#version 420
#extension GL_ARB_texture_gather : enable
#extension GL_ARB_separate_shader_objects : enable
#extension GL_ARB_shading_language_packing : enable
// shader 10e939370329849a
// Used for: Fixing Nvidia lava when on Vah Rudania.
// Check rules.txt for documentation and when to enable.



layout(binding = 1, std140) uniform uniformBlockVS1
{
vec4 uf_blockVS1[1024];
};

layout(binding = 2, std140) uniform uniformBlockVS2
{
vec4 uf_blockVS2[1024];
};

layout(binding = 4, std140) uniform uniformBlockVS4
{
vec4 uf_blockVS4[1024];
};

layout(binding = 8, std140) uniform uniformBlockVS8
{
vec4 uf_blockVS8[1024];
};

uniform vec2 uf_windowSpaceToClipSpaceTransform;
layout(location = 0) in uvec4 attrDataSem0;
layout(location = 1) in uvec4 attrDataSem1;
layout(location = 2) in uvec4 attrDataSem2;
layout(location = 3) in uvec4 attrDataSem6;
layout(location = 4) in uvec4 attrDataSem8;
layout(location = 5) in uvec4 attrDataSem12;
out gl_PerVertex
{
	vec4 gl_Position;
	float gl_PointSize;
};
layout(location = 5) out vec4 passParameterSem5;
layout(location = 6) out vec4 passParameterSem6;
layout(location = 0) out vec4 passParameterSem0;
layout(location = 1) out vec4 passParameterSem1;
layout(location = 2) out vec4 passParameterSem2;
layout(location = 4) out vec4 passParameterSem4;
layout(location = 7) out vec4 passParameterSem7;
layout(location = 3) out vec4 passParameterSem3;
int clampFI32(int v)
{
if( v == 0x7FFFFFFF )
	return floatBitsToInt(1.0);
else if( v == 0xFFFFFFFF )
	return floatBitsToInt(0.0);
return floatBitsToInt(clamp(intBitsToFloat(v), 0.0, 1.0));
}
float mul_nonIEEE(float a, float b){return mix(0.0, a*b, (a != 0.0) && (b != 0.0));}
void main()
{
ivec4 R0i = ivec4(0);
ivec4 R1i = ivec4(0);
ivec4 R2i = ivec4(0);
ivec4 R3i = ivec4(0);
ivec4 R4i = ivec4(0);
ivec4 R5i = ivec4(0);
ivec4 R6i = ivec4(0);
ivec4 R7i = ivec4(0);
ivec4 R8i = ivec4(0);
ivec4 R9i = ivec4(0);
ivec4 R10i = ivec4(0);
ivec4 R11i = ivec4(0);
ivec4 R12i = ivec4(0);
ivec4 R13i = ivec4(0);
ivec4 R14i = ivec4(0);
ivec4 R15i = ivec4(0);
ivec4 R123i = ivec4(0);
ivec4 R124i = ivec4(0);
ivec4 R125i = ivec4(0);
ivec4 R126i = ivec4(0);
ivec4 R127i = ivec4(0);
uvec4 attrDecoder;
int backupReg0i, backupReg1i, backupReg2i, backupReg3i, backupReg4i;
ivec4 PV0i = ivec4(0), PV1i = ivec4(0);
int PS0i = 0, PS1i = 0;
ivec4 tempi = ivec4(0);
float tempResultf;
int tempResulti;
ivec4 ARi = ivec4(0);
bool predResult = true;
vec3 cubeMapSTM;
int cubeMapFaceId;
R0i = ivec4(gl_VertexID, 0, 0, gl_InstanceID);
attrDecoder.xyzw = attrDataSem0.xyzw;
attrDecoder = ((attrDecoder>>8)&0xFF)|((attrDecoder<<8)&0xFF00);
attrDecoder.xyzw = floatBitsToInt(vec4(unpackHalf2x16(attrDecoder.x|(attrDecoder.y<<16)),unpackHalf2x16(attrDecoder.z|(attrDecoder.w<<16))));
R4i = ivec4(int(attrDecoder.x), int(attrDecoder.y), int(attrDecoder.z), int(attrDecoder.w));
attrDecoder.x = attrDataSem1.x;
attrDecoder.x = (attrDecoder.x>>24)|((attrDecoder.x>>8)&0xFF00)|((attrDecoder.x<<8)&0xFF0000)|((attrDecoder.x<<24));
attrDecoder.y = 0;
attrDecoder.z = 0;
attrDecoder.w = 0;
attrDecoder.xyzw = uvec4((attrDecoder.x>>0)&0x3FF,(attrDecoder.x>>10)&0x3FF,(attrDecoder.x>>20)&0x3FF,(attrDecoder.x>>30)&0x3);
if( (attrDecoder.x&0x200) != 0 ) attrDecoder.x |= 0xFFFFFC00;
if( (attrDecoder.y&0x200) != 0 ) attrDecoder.y |= 0xFFFFFC00;
if( (attrDecoder.z&0x200) != 0 ) attrDecoder.z |= 0xFFFFFC00;
attrDecoder.x = floatBitsToUint(max(float(int(attrDecoder.x))/511.0,-1.0));
attrDecoder.y = floatBitsToUint(max(float(int(attrDecoder.y))/511.0,-1.0));
attrDecoder.z = floatBitsToUint(max(float(int(attrDecoder.z))/511.0,-1.0));
attrDecoder.w = floatBitsToUint(float(attrDecoder.w));
R3i = ivec4(int(attrDecoder.x), int(attrDecoder.y), int(attrDecoder.z), int(attrDecoder.w));
attrDecoder.xyzw = attrDataSem2.xyzw;
if( (attrDecoder.x&0x80) != 0 ) attrDecoder.x |= 0xFFFFFF00;
if( (attrDecoder.y&0x80) != 0 ) attrDecoder.y |= 0xFFFFFF00;
if( (attrDecoder.z&0x80) != 0 ) attrDecoder.z |= 0xFFFFFF00;
if( (attrDecoder.w&0x80) != 0 ) attrDecoder.w |= 0xFFFFFF00;
attrDecoder.x = floatBitsToUint(max(float(int(attrDecoder.x))/127.0,-1.0));
attrDecoder.y = floatBitsToUint(max(float(int(attrDecoder.y))/127.0,-1.0));
attrDecoder.z = floatBitsToUint(max(float(int(attrDecoder.z))/127.0,-1.0));
attrDecoder.w = floatBitsToUint(max(float(int(attrDecoder.w))/127.0,-1.0));
R5i = ivec4(int(attrDecoder.x), int(attrDecoder.y), int(attrDecoder.z), int(attrDecoder.w));
attrDecoder.xy = attrDataSem8.xy;
attrDecoder.xy = (attrDecoder.xy>>24)|((attrDecoder.xy>>8)&0xFF00)|((attrDecoder.xy<<8)&0xFF0000)|((attrDecoder.xy<<24));
attrDecoder.z = 0;
attrDecoder.w = 0;
R6i = ivec4(int(attrDecoder.x), int(attrDecoder.y), floatBitsToInt(0.0), floatBitsToInt(1.0));
attrDecoder.xyzw = floatBitsToUint(vec4(attrDataSem12.xyzw)/255.0);
R2i = ivec4(int(attrDecoder.x), int(attrDecoder.y), int(attrDecoder.z), int(attrDecoder.w));
attrDecoder.xyzw = uvec4(attrDataSem6.x,0,0,0);
R1i = ivec4(int(attrDecoder.x), 0, 0, 1);
// 0
backupReg0i = R1i.x;
R7i.x = 0x3f800000;
R1i.yzw = ivec3(0x3f800000,floatBitsToInt(uf_blockVS4[3].y),0x3f800000);
R1i.x = backupReg0i * 0x00000003;
PS0i = R1i.x;
// 1
R0i.x = PS0i + 0x00000002;
R0i.y = floatBitsToInt(uf_blockVS8[7].x);
R0i.z = floatBitsToInt(uf_blockVS8[7].y);
R0i.w = PS0i + int(1);
R8i.x = floatBitsToInt(uf_blockVS8[8].x);
PS1i = R8i.x;
R9i.xyzw = floatBitsToInt(uf_blockVS2[R1i.x].xyzw);
R10i.xyzw = floatBitsToInt(uf_blockVS2[R0i.w].xyzw);
R11i.xyzw = floatBitsToInt(uf_blockVS2[R0i.x].xyzw);
// export
passParameterSem5 = vec4(intBitsToFloat(R2i.x), intBitsToFloat(R2i.y), intBitsToFloat(R2i.z), intBitsToFloat(R2i.w));
// 0
R127i.x = floatBitsToInt(dot(vec4(intBitsToFloat(R4i.x),intBitsToFloat(R4i.y),intBitsToFloat(R4i.z),intBitsToFloat(R1i.w)),vec4(intBitsToFloat(R9i.x),intBitsToFloat(R9i.y),intBitsToFloat(R9i.z),intBitsToFloat(R9i.w))));
PV0i.x = R127i.x;
PV0i.y = R127i.x;
PV0i.z = R127i.x;
PV0i.w = R127i.x;
R127i.w = floatBitsToInt(uf_blockVS8[8].y);
PS0i = R127i.w;
// 1
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R4i.x),intBitsToFloat(R4i.y),intBitsToFloat(R4i.z),intBitsToFloat(R1i.w)),vec4(intBitsToFloat(R10i.x),intBitsToFloat(R10i.y),intBitsToFloat(R10i.z),intBitsToFloat(R10i.w))));
PV1i.x = tempi.x;
PV1i.y = tempi.x;
PV1i.z = tempi.x;
PV1i.w = tempi.x;
R127i.y = tempi.x;
R126i.w = floatBitsToInt(uf_blockVS8[11].x);
PS1i = R126i.w;
// 2
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R4i.x),intBitsToFloat(R4i.y),intBitsToFloat(R4i.z),intBitsToFloat(R1i.w)),vec4(intBitsToFloat(R11i.x),intBitsToFloat(R11i.y),intBitsToFloat(R11i.z),intBitsToFloat(R11i.w))));
PV0i.x = tempi.x;
PV0i.y = tempi.x;
PV0i.z = tempi.x;
PV0i.w = tempi.x;
R127i.z = tempi.x;
R126i.y = floatBitsToInt(uf_blockVS8[11].y);
PS0i = R126i.y;
// 3
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R127i.x),intBitsToFloat(R127i.y),intBitsToFloat(PV0i.x),intBitsToFloat(R7i.x)),vec4(uf_blockVS1[0].x,uf_blockVS1[0].y,uf_blockVS1[0].z,uf_blockVS1[0].w)));
PV1i.x = tempi.x;
PV1i.y = tempi.x;
PV1i.z = tempi.x;
PV1i.w = tempi.x;
R14i.w = R5i.w;
PS1i = R14i.w;
// 4
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R127i.x),intBitsToFloat(R127i.y),intBitsToFloat(R127i.z),intBitsToFloat(R7i.x)),vec4(uf_blockVS1[1].x,uf_blockVS1[1].y,uf_blockVS1[1].z,uf_blockVS1[1].w)));
PV0i.x = tempi.x;
PV0i.y = tempi.x;
PV0i.z = tempi.x;
PV0i.w = tempi.x;
R4i.x = PV1i.x;
PS0i = R4i.x;
// 5
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R127i.x),intBitsToFloat(R127i.y),intBitsToFloat(R127i.z),intBitsToFloat(R7i.x)),vec4(uf_blockVS1[2].x,uf_blockVS1[2].y,uf_blockVS1[2].z,uf_blockVS1[2].w)));
PV1i.x = tempi.x;
PV1i.y = tempi.x;
PV1i.z = tempi.x;
PV1i.w = tempi.x;
R4i.y = PV0i.x;
PS1i = R4i.y;
// 6
R127i.x = floatBitsToInt((mul_nonIEEE(uf_blockVS8[15].x,intBitsToFloat(R1i.z)) + intBitsToFloat(R0i.y)));
R124i.y = floatBitsToInt(uf_blockVS8[12].y);
R4i.z = PV1i.x;
PV0i.z = R4i.z;
R125i.w = floatBitsToInt(uf_blockVS8[12].x);
R127i.y = floatBitsToInt((mul_nonIEEE(uf_blockVS8[15].y,intBitsToFloat(R1i.z)) + intBitsToFloat(R0i.z)));
PS0i = R127i.y;
// 7
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R4i.x),intBitsToFloat(R4i.y),intBitsToFloat(PV0i.z),intBitsToFloat(R1i.y)),vec4(uf_blockVS1[8].x,uf_blockVS1[8].y,uf_blockVS1[8].z,uf_blockVS1[8].w)));
PV1i.x = tempi.x;
PV1i.y = tempi.x;
PV1i.z = tempi.x;
PV1i.w = tempi.x;
R12i.y = tempi.x;
R13i.z = R6i.x;
PS1i = R13i.z;
// 8
R12i.x = floatBitsToInt(dot(vec4(intBitsToFloat(R4i.x),intBitsToFloat(R4i.y),intBitsToFloat(R4i.z),intBitsToFloat(R1i.y)),vec4(uf_blockVS1[7].x,uf_blockVS1[7].y,uf_blockVS1[7].z,uf_blockVS1[7].w)));
PV0i.x = R12i.x;
PV0i.y = R12i.x;
PV0i.z = R12i.x;
PV0i.w = R12i.x;
R0i.z = floatBitsToInt(-(intBitsToFloat(PV1i.x)));
PS0i = R0i.z;
// 9
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R4i.x),intBitsToFloat(R4i.y),intBitsToFloat(R4i.z),intBitsToFloat(R1i.y)),vec4(uf_blockVS1[9].x,uf_blockVS1[9].y,uf_blockVS1[9].z,uf_blockVS1[9].w)));
PV1i.x = tempi.x;
PV1i.y = tempi.x;
PV1i.z = tempi.x;
PV1i.w = tempi.x;
R12i.z = tempi.x;
R13i.w = R6i.y;
PS1i = R13i.w;
// 10
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R4i.x),intBitsToFloat(R4i.y),intBitsToFloat(R4i.z),intBitsToFloat(R1i.y)),vec4(uf_blockVS1[10].x,uf_blockVS1[10].y,uf_blockVS1[10].z,uf_blockVS1[10].w)));
PV0i.x = tempi.x;
PV0i.y = tempi.x;
PV0i.z = tempi.x;
PV0i.w = tempi.x;
R12i.w = tempi.x;
R15i.z = PV1i.x;
PS0i = R15i.z;
// 11
R126i.x = floatBitsToInt(dot(vec4(intBitsToFloat(R3i.x),intBitsToFloat(R3i.y),intBitsToFloat(R3i.z),-0.0),vec4(intBitsToFloat(R9i.x),intBitsToFloat(R9i.y),intBitsToFloat(R9i.z),0.0)));
PV1i.x = R126i.x;
PV1i.y = R126i.x;
PV1i.z = R126i.x;
PV1i.w = R126i.x;
R7i.x = floatBitsToInt(uf_blockVS8[7].z);
PS1i = R7i.x;
// 12
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R3i.x),intBitsToFloat(R3i.y),intBitsToFloat(R3i.z),-0.0),vec4(intBitsToFloat(R10i.x),intBitsToFloat(R10i.y),intBitsToFloat(R10i.z),0.0)));
PV0i.x = tempi.x;
PV0i.y = tempi.x;
PV0i.z = tempi.x;
PV0i.w = tempi.x;
R1i.y = tempi.x;
R1i.w = floatBitsToInt(uf_blockVS8[7].w);
PS0i = R1i.w;
// 13
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R3i.x),intBitsToFloat(R3i.y),intBitsToFloat(R3i.z),-0.0),vec4(intBitsToFloat(R11i.x),intBitsToFloat(R11i.y),intBitsToFloat(R11i.z),0.0)));
PV1i.x = tempi.x;
PV1i.y = tempi.x;
PV1i.z = tempi.x;
PV1i.w = tempi.x;
R126i.z = tempi.x;
R127i.z = floatBitsToInt((mul_nonIEEE(uf_blockVS8[16].x,intBitsToFloat(R1i.z)) + intBitsToFloat(R8i.x)));
PS1i = R127i.z;
// 14
R125i.x = floatBitsToInt(dot(vec4(intBitsToFloat(R5i.x),intBitsToFloat(R5i.y),intBitsToFloat(R5i.z),-0.0),vec4(intBitsToFloat(R9i.x),intBitsToFloat(R9i.y),intBitsToFloat(R9i.z),0.0)));
PV0i.x = R125i.x;
PV0i.y = R125i.x;
PV0i.z = R125i.x;
PV0i.w = R125i.x;
R125i.y = floatBitsToInt((mul_nonIEEE(uf_blockVS8[16].y,intBitsToFloat(R1i.z)) + intBitsToFloat(R127i.w)));
PS0i = R125i.y;
// 15
backupReg0i = R10i.y;
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R5i.x),intBitsToFloat(R5i.y),intBitsToFloat(R5i.z),-0.0),vec4(intBitsToFloat(R10i.x),intBitsToFloat(backupReg0i),intBitsToFloat(R10i.z),0.0)));
PV1i.x = tempi.x;
PV1i.y = tempi.x;
PV1i.z = tempi.x;
PV1i.w = tempi.x;
R10i.y = tempi.x;
R10i.x = floatBitsToInt(uf_blockVS8[9].x);
PS1i = R10i.x;
// 16
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R5i.x),intBitsToFloat(R5i.y),intBitsToFloat(R5i.z),-0.0),vec4(intBitsToFloat(R11i.x),intBitsToFloat(R11i.y),intBitsToFloat(R11i.z),0.0)));
PV0i.x = tempi.x;
PV0i.y = tempi.x;
PV0i.z = tempi.x;
PV0i.w = tempi.x;
R10i.z = tempi.x;
R5i.w = floatBitsToInt(uf_blockVS8[9].y);
PS0i = R5i.w;
// 17
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R126i.x),intBitsToFloat(R1i.y),intBitsToFloat(R126i.z),-0.0),vec4(intBitsToFloat(R126i.x),intBitsToFloat(R1i.y),intBitsToFloat(R126i.z),0.0)));
PV1i.x = tempi.x;
PV1i.y = tempi.x;
PV1i.z = tempi.x;
PV1i.w = tempi.x;
R5i.x = floatBitsToInt(uf_blockVS8[10].x);
PS1i = R5i.x;
// 18
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R125i.x),intBitsToFloat(R10i.y),intBitsToFloat(R10i.z),-0.0),vec4(intBitsToFloat(R125i.x),intBitsToFloat(R10i.y),intBitsToFloat(R10i.z),0.0)));
PV0i.x = tempi.x;
PV0i.y = tempi.x;
PV0i.z = tempi.x;
PV0i.w = tempi.x;
R5i.y = tempi.x;
tempResultf = 1.0 / sqrt(intBitsToFloat(PV1i.x));
R125i.z = floatBitsToInt(tempResultf);
PS0i = R125i.z;
// 19
backupReg0i = R127i.x;
R127i.x = floatBitsToInt((mul_nonIEEE(uf_blockVS8[15].y,intBitsToFloat(R1i.z)) + intBitsToFloat(R126i.y)));
R11i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R6i.x),intBitsToFloat(backupReg0i)) + intBitsToFloat(R127i.z)));
R127i.z = floatBitsToInt((mul_nonIEEE(uf_blockVS8[15].x,intBitsToFloat(R1i.z)) + intBitsToFloat(R126i.w)));
R10i.w = floatBitsToInt(uf_blockVS8[10].y);
R5i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R6i.x),intBitsToFloat(R127i.y)) + intBitsToFloat(R125i.y)));
PS1i = R5i.z;
// 20
R123i.x = floatBitsToInt((mul_nonIEEE(uf_blockVS8[16].y,intBitsToFloat(R1i.z)) + intBitsToFloat(R124i.y)));
PV0i.x = R123i.x;
R9i.y = floatBitsToInt(uf_blockVS8[11].w);
R123i.z = floatBitsToInt((mul_nonIEEE(uf_blockVS8[16].x,intBitsToFloat(R1i.z)) + intBitsToFloat(R125i.w)));
PV0i.z = R123i.z;
R11i.w = floatBitsToInt(uf_blockVS8[11].z);
R9i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R126i.x), intBitsToFloat(R125i.z)));
PS0i = R9i.x;
// 21
backupReg0i = R1i.y;
R3i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R126i.z), intBitsToFloat(R125i.z)));
R1i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(backupReg0i), intBitsToFloat(R125i.z)));
R11i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R6i.x),intBitsToFloat(R127i.x)) + intBitsToFloat(PV0i.x)));
R9i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R6i.x),intBitsToFloat(R127i.z)) + intBitsToFloat(PV0i.z)));
tempResultf = 1.0 / sqrt(intBitsToFloat(R5i.y));
R2i.w = floatBitsToInt(tempResultf);
PS1i = R2i.w;
// 22
backupReg0i = R10i.y;
R11i.x = floatBitsToInt(uf_blockVS8[6].x);
R10i.y = floatBitsToInt(uf_blockVS8[31].x);
R9i.z = floatBitsToInt(uf_blockVS8[6].y);
R0i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R125i.x), intBitsToFloat(PS1i)));
R5i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(backupReg0i), intBitsToFloat(PS1i)));
PS0i = R5i.y;
// export
gl_Position = vec4(intBitsToFloat(R12i.x), intBitsToFloat(R12i.y), intBitsToFloat(R12i.z), 1.0); // "workaround"
// export
passParameterSem6 = vec4(intBitsToFloat(R4i.x), intBitsToFloat(R4i.y), intBitsToFloat(R4i.z), intBitsToFloat(R4i.w));
// 0
R125i.x = floatBitsToInt((mul_nonIEEE(uf_blockVS8[15].x,intBitsToFloat(R1i.z)) + intBitsToFloat(R10i.x)));
R124i.y = floatBitsToInt((mul_nonIEEE(uf_blockVS8[15].w,intBitsToFloat(R1i.z)) + intBitsToFloat(R1i.w)));
R123i.z = floatBitsToInt((mul_nonIEEE(uf_blockVS8[15].z,intBitsToFloat(R1i.z)) + intBitsToFloat(R7i.x)));
PV0i.z = R123i.z;
R125i.w = floatBitsToInt((mul_nonIEEE(uf_blockVS8[15].y,intBitsToFloat(R1i.z)) + intBitsToFloat(R5i.w)));
R127i.z = floatBitsToInt((mul_nonIEEE(uf_blockVS8[15].z,intBitsToFloat(R1i.z)) + intBitsToFloat(R11i.w)));
PS0i = R127i.z;
// 1
R127i.x = floatBitsToInt(uf_blockVS8[9].z);
R123i.y = floatBitsToInt((mul_nonIEEE(uf_blockVS8[16].y,intBitsToFloat(R1i.z)) + intBitsToFloat(R10i.w)));
PV1i.y = R123i.y;
R123i.z = floatBitsToInt((mul_nonIEEE(uf_blockVS8[16].x,intBitsToFloat(R1i.z)) + intBitsToFloat(R5i.x)));
PV1i.z = R123i.z;
R126i.w = floatBitsToInt(uf_blockVS8[9].w);
R127i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R6i.y),intBitsToFloat(PV0i.z)) + intBitsToFloat(R11i.y)));
PS1i = R127i.w;
// 2
backupReg0i = R124i.y;
backupReg1i = R125i.w;
backupReg2i = R127i.z;
R123i.x = floatBitsToInt((mul_nonIEEE(uf_blockVS8[15].w,intBitsToFloat(R1i.z)) + intBitsToFloat(R9i.y)));
PV0i.x = R123i.x;
R124i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R6i.y),intBitsToFloat(backupReg0i)) + intBitsToFloat(R5i.z)));
R127i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R6i.x),intBitsToFloat(R125i.x)) + intBitsToFloat(PV1i.z)));
R125i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R6i.x),intBitsToFloat(backupReg1i)) + intBitsToFloat(PV1i.y)));
R126i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R6i.y),intBitsToFloat(backupReg2i)) + intBitsToFloat(R9i.w)));
PS0i = R126i.y;
// 3
R125i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R6i.y),intBitsToFloat(PV0i.x)) + intBitsToFloat(R11i.z)));
R125i.y = floatBitsToInt((mul_nonIEEE(uf_blockVS8[5].y,intBitsToFloat(R10i.y)) + intBitsToFloat(R9i.z)));
R126i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R10i.z), intBitsToFloat(R2i.w)));
R124i.w = floatBitsToInt((mul_nonIEEE(uf_blockVS8[5].x,intBitsToFloat(R10i.y)) + intBitsToFloat(R11i.x)));
R15i.x = floatBitsToInt(intBitsToFloat(R12i.x) + intBitsToFloat(R12i.w));
R15i.x = floatBitsToInt(intBitsToFloat(R15i.x) / 2.0);
PS1i = R15i.x;
// 4
backupReg0i = R0i.z;
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R9i.x),intBitsToFloat(R1i.y),intBitsToFloat(R3i.x),-0.0),vec4(uf_blockVS1[0].x,uf_blockVS1[0].y,uf_blockVS1[0].z,0.0)));
PV0i.x = tempi.x;
PV0i.y = tempi.x;
PV0i.z = tempi.x;
PV0i.w = tempi.x;
R15i.y = floatBitsToInt(intBitsToFloat(backupReg0i) + intBitsToFloat(R12i.w));
R15i.y = floatBitsToInt(intBitsToFloat(R15i.y) / 2.0);
PS0i = R15i.y;
// 5
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R9i.x),intBitsToFloat(R1i.y),intBitsToFloat(R3i.x),-0.0),vec4(uf_blockVS1[1].x,uf_blockVS1[1].y,uf_blockVS1[1].z,0.0)));
PV1i.x = tempi.x;
PV1i.y = tempi.x;
PV1i.z = tempi.x;
PV1i.w = tempi.x;
R2i.x = PV0i.x;
PS1i = R2i.x;
// 6
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R9i.x),intBitsToFloat(R1i.y),intBitsToFloat(R3i.x),-0.0),vec4(uf_blockVS1[2].x,uf_blockVS1[2].y,uf_blockVS1[2].z,0.0)));
PV0i.x = tempi.x;
PV0i.y = tempi.x;
PV0i.z = tempi.x;
PV0i.w = tempi.x;
R2i.y = PV1i.x;
PS0i = R2i.y;
// 7
backupReg0i = R127i.x;
R127i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R126i.z), uf_blockVS1[0].z));
R127i.y = floatBitsToInt((mul_nonIEEE(uf_blockVS8[15].w,intBitsToFloat(R1i.z)) + intBitsToFloat(R126i.w)));
R123i.z = floatBitsToInt((mul_nonIEEE(uf_blockVS8[15].z,intBitsToFloat(R1i.z)) + intBitsToFloat(backupReg0i)));
PV1i.z = R123i.z;
R2i.w = PV0i.x;
R15i.w = R12i.w;
PS1i = R15i.w;
// 8
R126i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R6i.x),uf_blockVS8[13].y) + uf_blockVS8[14].y));
R123i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R6i.x),uf_blockVS8[13].x) + uf_blockVS8[14].x));
PV0i.y = R123i.y;
R1i.z = R127i.w;
R1i.w = R124i.y;
R12i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R6i.y),intBitsToFloat(PV1i.z)) + intBitsToFloat(R127i.z)));
PS0i = R12i.x;
// 9
R123i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R5i.y),uf_blockVS1[0].y) + intBitsToFloat(R127i.x)));
PV1i.x = R123i.x;
R12i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R6i.y),intBitsToFloat(R127i.y)) + intBitsToFloat(R125i.w)));
R12i.w = R125i.x;
R13i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R6i.y),uf_blockVS8[13].z) + intBitsToFloat(PV0i.y)));
PS1i = R13i.x;
// 10
R14i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R0i.w),uf_blockVS1[0].x) + intBitsToFloat(PV1i.x)));
R13i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R6i.y),uf_blockVS8[13].w) + intBitsToFloat(R126i.x)));
R12i.z = R126i.y;
// 11
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R0i.w),intBitsToFloat(R5i.y),intBitsToFloat(R126i.z),-0.0),vec4(uf_blockVS1[1].x,uf_blockVS1[1].y,uf_blockVS1[1].z,0.0)));
PV1i.x = tempi.x;
PV1i.y = tempi.x;
PV1i.z = tempi.x;
PV1i.w = tempi.x;
R14i.y = tempi.x;
// 12
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R0i.w),intBitsToFloat(R5i.y),intBitsToFloat(R126i.z),-0.0),vec4(uf_blockVS1[2].x,uf_blockVS1[2].y,uf_blockVS1[2].z,0.0)));
PV0i.x = tempi.x;
PV0i.y = tempi.x;
PV0i.z = tempi.x;
PV0i.w = tempi.x;
R14i.z = tempi.x;
// 13
R1i.x = floatBitsToInt((mul_nonIEEE(uf_blockVS8[5].z,uf_blockVS8[31].x) + intBitsToFloat(R124i.w)));
R1i.y = floatBitsToInt((mul_nonIEEE(uf_blockVS8[5].w,uf_blockVS8[31].x) + intBitsToFloat(R125i.y)));
// export
passParameterSem0 = vec4(intBitsToFloat(R1i.x), intBitsToFloat(R1i.y), intBitsToFloat(R1i.z), intBitsToFloat(R1i.w));
// export
passParameterSem1 = vec4(intBitsToFloat(R12i.x), intBitsToFloat(R12i.y), intBitsToFloat(R12i.z), intBitsToFloat(R12i.w));
// export
passParameterSem2 = vec4(intBitsToFloat(R13i.x), intBitsToFloat(R13i.y), intBitsToFloat(R13i.z), intBitsToFloat(R13i.w));
// export
passParameterSem4 = vec4(intBitsToFloat(R14i.x), intBitsToFloat(R14i.y), intBitsToFloat(R14i.z), intBitsToFloat(R14i.w));
// export
passParameterSem7 = vec4(intBitsToFloat(R15i.x), intBitsToFloat(R15i.y), intBitsToFloat(R15i.z), intBitsToFloat(R15i.w));
// export
passParameterSem3 = vec4(intBitsToFloat(R2i.x), intBitsToFloat(R2i.y), intBitsToFloat(R2i.w), intBitsToFloat(R2i.w));
}
