#version 420
#extension GL_ARB_texture_gather : enable
#extension GL_ARB_separate_shader_objects : enable
#extension GL_ARB_shading_language_packing : enable
// shader 37d4289e0541199b
// Used for: Fixing Nvidia waterfall artifacts.
// Check rules.txt for documentation and when to enable.



uniform ivec4 uf_remappedVS[17];
uniform vec2 uf_windowSpaceToClipSpaceTransform;
layout(binding = 32) uniform sampler2D textureUnitVS0;// Tex0 addr 0xb7993000 res 64x64x1 dim 1 tm: 4 format 0034 compSel: 0 0 0 0 mipView: 0x0 (num 0x7) sliceView: 0x0 (num 0x1) Sampler18 ClampX/Y/Z: 0 0 2 border: 0
layout(location = 0) in uvec4 attrDataSem0;
layout(location = 1) in uvec4 attrDataSem1;
layout(location = 2) in uvec4 attrDataSem2;
layout(location = 3) in uvec4 attrDataSem8;
layout(location = 4) in uvec4 attrDataSem12;
out gl_PerVertex
{
	vec4 gl_Position;
	float gl_PointSize;
};
layout(location = 4) out vec4 passParameterSem5;
layout(location = 0) out vec4 passParameterSem0;
layout(location = 3) out vec4 passParameterSem4;
layout(location = 1) out vec4 passParameterSem7;
layout(location = 2) out vec4 passParameterSem3;
layout(location = 5) out vec4 passParameterSem6;
int clampFI32(int v)
{
if( v == 0x7FFFFFFF )
	return floatBitsToInt(1.0);
else if( v == 0xFFFFFFFF )
	return floatBitsToInt(0.0);
return floatBitsToInt(clamp(intBitsToFloat(v), 0.0, 1.0));
}
float mul_nonIEEE(float a, float b){return mix(0.0, a*b, (a != 0.0) && (b != 0.0));}
void main()
{
vec4 R0f = vec4(0.0);
vec4 R1f = vec4(0.0);
vec4 R2f = vec4(0.0);
vec4 R3f = vec4(0.0);
vec4 R4f = vec4(0.0);
vec4 R5f = vec4(0.0);
vec4 R6f = vec4(0.0);
vec4 R7f = vec4(0.0);
vec4 R8f = vec4(0.0);
vec4 R9f = vec4(0.0);
vec4 R122f = vec4(0.0);
vec4 R123f = vec4(0.0);
vec4 R124f = vec4(0.0);
vec4 R125f = vec4(0.0);
vec4 R126f = vec4(0.0);
vec4 R127f = vec4(0.0);
uvec4 attrDecoder;
float backupReg0f, backupReg1f, backupReg2f, backupReg3f, backupReg4f;
vec4 PV0f = vec4(0.0), PV1f = vec4(0.0);
float PS0f = 0.0, PS1f = 0.0;
vec4 tempf = vec4(0.0);
float tempResultf;
int tempResulti;
ivec4 ARi = ivec4(0);
bool predResult = true;
vec3 cubeMapSTM;
int cubeMapFaceId;
R0f = floatBitsToInt(ivec4(gl_VertexID, 0, 0, gl_InstanceID));
attrDecoder.xyz = attrDataSem0.xyz;
attrDecoder.xyz = (attrDecoder.xyz>>24)|((attrDecoder.xyz>>8)&0xFF00)|((attrDecoder.xyz<<8)&0xFF0000)|((attrDecoder.xyz<<24));
attrDecoder.w = 0;
R3f = vec4(intBitsToFloat(int(attrDecoder.x)), intBitsToFloat(int(attrDecoder.y)), intBitsToFloat(int(attrDecoder.z)), intBitsToFloat(floatBitsToInt(1.0)));
attrDecoder.x = attrDataSem1.x;
attrDecoder.x = (attrDecoder.x>>24)|((attrDecoder.x>>8)&0xFF00)|((attrDecoder.x<<8)&0xFF0000)|((attrDecoder.x<<24));
attrDecoder.y = 0;
attrDecoder.z = 0;
attrDecoder.w = 0;
attrDecoder.xyzw = uvec4((attrDecoder.x>>0)&0x3FF,(attrDecoder.x>>10)&0x3FF,(attrDecoder.x>>20)&0x3FF,(attrDecoder.x>>30)&0x3);
if( (attrDecoder.x&0x200) != 0 ) attrDecoder.x |= 0xFFFFFC00;
if( (attrDecoder.y&0x200) != 0 ) attrDecoder.y |= 0xFFFFFC00;
if( (attrDecoder.z&0x200) != 0 ) attrDecoder.z |= 0xFFFFFC00;
attrDecoder.x = floatBitsToUint(max(float(int(attrDecoder.x))/511.0,-1.0));
attrDecoder.y = floatBitsToUint(max(float(int(attrDecoder.y))/511.0,-1.0));
attrDecoder.z = floatBitsToUint(max(float(int(attrDecoder.z))/511.0,-1.0));
attrDecoder.w = floatBitsToUint(float(attrDecoder.w));
R2f = vec4(intBitsToFloat(int(attrDecoder.x)), intBitsToFloat(int(attrDecoder.y)), intBitsToFloat(int(attrDecoder.z)), intBitsToFloat(int(attrDecoder.w)));
attrDecoder.xyzw = attrDataSem2.xyzw;
if( (attrDecoder.x&0x80) != 0 ) attrDecoder.x |= 0xFFFFFF00;
if( (attrDecoder.y&0x80) != 0 ) attrDecoder.y |= 0xFFFFFF00;
if( (attrDecoder.z&0x80) != 0 ) attrDecoder.z |= 0xFFFFFF00;
if( (attrDecoder.w&0x80) != 0 ) attrDecoder.w |= 0xFFFFFF00;
attrDecoder.x = floatBitsToUint(max(float(int(attrDecoder.x))/127.0,-1.0));
attrDecoder.y = floatBitsToUint(max(float(int(attrDecoder.y))/127.0,-1.0));
attrDecoder.z = floatBitsToUint(max(float(int(attrDecoder.z))/127.0,-1.0));
attrDecoder.w = floatBitsToUint(max(float(int(attrDecoder.w))/127.0,-1.0));
R4f = vec4(intBitsToFloat(int(attrDecoder.x)), intBitsToFloat(int(attrDecoder.y)), intBitsToFloat(int(attrDecoder.z)), intBitsToFloat(int(attrDecoder.w)));
attrDecoder.xy = attrDataSem8.xy;
attrDecoder.xy = ((attrDecoder.xy>>8)&0xFF)|((attrDecoder.xy<<8)&0xFF00);
attrDecoder.z = 0;
attrDecoder.w = 0;
attrDecoder.xy = floatBitsToUint(unpackHalf2x16(attrDecoder.x|(attrDecoder.y<<16)));
attrDecoder.zw = uvec2(0);
R5f = vec4(intBitsToFloat(int(attrDecoder.x)), intBitsToFloat(int(attrDecoder.y)), intBitsToFloat(floatBitsToInt(0.0)), intBitsToFloat(floatBitsToInt(1.0)));
attrDecoder.xyzw = floatBitsToUint(vec4(attrDataSem12.xyzw)/255.0);
R1f = vec4(intBitsToFloat(int(attrDecoder.x)), intBitsToFloat(int(attrDecoder.y)), intBitsToFloat(int(attrDecoder.z)), intBitsToFloat(int(attrDecoder.w)));
// 0
PV0f.x = mul_nonIEEE(R5f.x, intBitsToFloat(uf_remappedVS[0].x));
PV0f.y = mul_nonIEEE(R5f.y, intBitsToFloat(uf_remappedVS[0].w));
PV0f.z = mul_nonIEEE(R5f.y, intBitsToFloat(uf_remappedVS[0].z));
PV0f.w = mul_nonIEEE(R5f.x, intBitsToFloat(uf_remappedVS[0].y));
R0f.w = 1.0;
PS0f = R0f.w;
// 1
R8f.x = 1.0;
R8f.y = 1.0;
PV1f.z = PV0f.z + PV0f.x;
PV1f.w = PV0f.y + PV0f.w;
R122f.x = (mul_nonIEEE(R5f.x,intBitsToFloat(uf_remappedVS[1].x)) + intBitsToFloat(uf_remappedVS[2].x));
PS1f = R122f.x;
// 2
R7f.x = intBitsToFloat(uf_remappedVS[3].x) + PV1f.z;
R7f.y = intBitsToFloat(uf_remappedVS[3].y) + PV1f.w;
R5f.z = (mul_nonIEEE(R5f.y,intBitsToFloat(uf_remappedVS[1].z)) + PS1f);
R9f.w = R4f.w;
R7f.z = R5f.x;
PS0f = R7f.z;
R0f.xyz = (textureLod(textureUnitVS0, R7f.xy,0.0).xyz);
// export
passParameterSem5 = vec4(R1f.x, R1f.y, R1f.z, 1.0);
// 0
backupReg0f = R0f.y;
backupReg1f = R0f.x;
PV0f.x = mul_nonIEEE(R0f.z, intBitsToFloat(uf_remappedVS[4].z));
PV0f.y = mul_nonIEEE(backupReg0f, intBitsToFloat(uf_remappedVS[4].z));
PV0f.z = mul_nonIEEE(backupReg1f, intBitsToFloat(uf_remappedVS[4].z));
R7f.w = R5f.y;
R6f.z = R5f.z;
PS0f = R6f.z;
// 1
R127f.x = (mul_nonIEEE(R5f.x,intBitsToFloat(uf_remappedVS[1].y)) + intBitsToFloat(uf_remappedVS[2].y));
PV1f.y = mul_nonIEEE(R1f.y, PV0f.x);
PV1f.z = mul_nonIEEE(R1f.y, PV0f.y);
PV1f.w = mul_nonIEEE(R1f.y, PV0f.z);
// 2
PV0f.x = mul_nonIEEE(R2f.x, PV1f.w);
PV0f.y = mul_nonIEEE(R2f.z, PV1f.y);
R123f.z = (mul_nonIEEE(R5f.x,intBitsToFloat(uf_remappedVS[5].x)) + intBitsToFloat(uf_remappedVS[6].x));
PV0f.z = R123f.z;
PV0f.w = mul_nonIEEE(R2f.y, PV1f.z);
R127f.w = (mul_nonIEEE(R5f.x,intBitsToFloat(uf_remappedVS[5].y)) + intBitsToFloat(uf_remappedVS[6].y));
PS0f = R127f.w;
// 3
backupReg0f = R127f.x;
R127f.xyz = vec3(R3f.x,R3f.y,R3f.z) + vec3(PV0f.x,PV0f.w,PV0f.y);
PV1f.x = R127f.x;
PV1f.y = R127f.y;
PV1f.z = R127f.z;
R123f.w = (mul_nonIEEE(R5f.y,intBitsToFloat(uf_remappedVS[1].w)) + backupReg0f);
PV1f.w = R123f.w;
R6f.x = (mul_nonIEEE(R5f.y,intBitsToFloat(uf_remappedVS[5].z)) + PV0f.z);
PS1f = R6f.x;
// 4
backupReg0f = R0f.w;
R3f.x = dot(vec4(PV1f.x,PV1f.y,PV1f.z,backupReg0f),vec4(intBitsToFloat(uf_remappedVS[7].x),intBitsToFloat(uf_remappedVS[7].y),intBitsToFloat(uf_remappedVS[7].z),intBitsToFloat(uf_remappedVS[7].w)));
PV0f.x = R3f.x;
PV0f.y = R3f.x;
PV0f.z = R3f.x;
PV0f.w = R3f.x;
R6f.w = PV1f.w;
PS0f = R6f.w;
// 5
backupReg0f = R0f.w;
tempf.x = dot(vec4(R127f.x,R127f.y,R127f.z,backupReg0f),vec4(intBitsToFloat(uf_remappedVS[8].x),intBitsToFloat(uf_remappedVS[8].y),intBitsToFloat(uf_remappedVS[8].z),intBitsToFloat(uf_remappedVS[8].w)));
PV1f.x = tempf.x;
PV1f.y = tempf.x;
PV1f.z = tempf.x;
PV1f.w = tempf.x;
R3f.y = tempf.x;
R126f.x = mul_nonIEEE(R2f.z, intBitsToFloat(uf_remappedVS[8].z));
PS1f = R126f.x;
// 6
backupReg0f = R0f.w;
tempf.x = dot(vec4(R127f.x,R127f.y,R127f.z,backupReg0f),vec4(intBitsToFloat(uf_remappedVS[9].x),intBitsToFloat(uf_remappedVS[9].y),intBitsToFloat(uf_remappedVS[9].z),intBitsToFloat(uf_remappedVS[9].w)));
PV0f.x = tempf.x;
PV0f.y = tempf.x;
PV0f.z = tempf.x;
PV0f.w = tempf.x;
R3f.z = tempf.x;
R127f.x = mul_nonIEEE(R2f.z, intBitsToFloat(uf_remappedVS[9].z));
PS0f = R127f.x;
// 7
R124f.x = dot(vec4(R2f.x,R2f.y,R2f.z,-0.0),vec4(intBitsToFloat(uf_remappedVS[7].x),intBitsToFloat(uf_remappedVS[7].y),intBitsToFloat(uf_remappedVS[7].z),0.0));
PV1f.x = R124f.x;
PV1f.y = R124f.x;
PV1f.z = R124f.x;
PV1f.w = R124f.x;
R125f.x = mul_nonIEEE(R4f.z, intBitsToFloat(uf_remappedVS[7].z));
PS1f = R125f.x;
// 8
tempf.x = dot(vec4(R2f.x,R2f.y,R126f.x,-0.0),vec4(intBitsToFloat(uf_remappedVS[8].x),intBitsToFloat(uf_remappedVS[8].y),1.0,0.0));
PV0f.x = tempf.x;
PV0f.y = tempf.x;
PV0f.z = tempf.x;
PV0f.w = tempf.x;
R127f.y = tempf.x;
R122f.x = (mul_nonIEEE(R2f.y,intBitsToFloat(uf_remappedVS[9].y)) + R127f.x);
PS0f = R122f.x;
// 9
R123f.x = (mul_nonIEEE(R4f.y,intBitsToFloat(uf_remappedVS[7].y)) + R125f.x);
PV1f.x = R123f.x;
R127f.z = (mul_nonIEEE(R2f.x,intBitsToFloat(uf_remappedVS[9].x)) + PS0f);
PV1f.z = R127f.z;
PS1f = mul_nonIEEE(R4f.y, intBitsToFloat(uf_remappedVS[9].y));
// 10
R127f.x = (mul_nonIEEE(R4f.x,intBitsToFloat(uf_remappedVS[7].x)) + PV1f.x);
PV0f.y = mul_nonIEEE(PV1f.z, PV1f.z);
R125f.x = (mul_nonIEEE(R4f.z,intBitsToFloat(uf_remappedVS[9].z)) + PS1f);
PS0f = R125f.x;
// 11
tempf.x = dot(vec4(R4f.x,R4f.y,R4f.z,-0.0),vec4(intBitsToFloat(uf_remappedVS[8].x),intBitsToFloat(uf_remappedVS[8].y),intBitsToFloat(uf_remappedVS[8].z),0.0));
PV1f.x = tempf.x;
PV1f.y = tempf.x;
PV1f.z = tempf.x;
PV1f.w = tempf.x;
R126f.y = tempf.x;
R122f.x = (mul_nonIEEE(R127f.y,R127f.y) + PV0f.y);
PS1f = R122f.x;
// 12
R6f.y = (mul_nonIEEE(R5f.y,intBitsToFloat(uf_remappedVS[5].w)) + R127f.w);
R126f.z = (mul_nonIEEE(R4f.x,intBitsToFloat(uf_remappedVS[9].x)) + R125f.x);
PV0f.z = R126f.z;
R123f.w = (mul_nonIEEE(R124f.x,R124f.x) + PS1f);
PV0f.w = R123f.w;
// 13
tempf.x = dot(vec4(R127f.x,R126f.y,PV0f.z,-0.0),vec4(R127f.x,R126f.y,PV0f.z,0.0));
PV1f.x = tempf.x;
PV1f.y = tempf.x;
PV1f.z = tempf.x;
PV1f.w = tempf.x;
tempResultf = 1.0 / sqrt(PV0f.w);
PS1f = tempResultf;
// 14
R4f.x = mul_nonIEEE(R124f.x, PS1f);
R4f.y = mul_nonIEEE(R127f.y, PS1f);
R4f.z = mul_nonIEEE(R127f.z, PS1f);
tempResultf = 1.0 / sqrt(PV1f.x);
PS0f = tempResultf;
// 15
R5f.x = mul_nonIEEE(R127f.x, PS0f);
R5f.y = mul_nonIEEE(R126f.y, PS0f);
R2f.z = mul_nonIEEE(R126f.z, PS0f);
// export
passParameterSem0 = vec4(R6f.x, R6f.y, R6f.z, R6f.w);
// export
// skipped export to semanticId 255
// 0
tempf.x = dot(vec4(R3f.x,R3f.y,R3f.z,R8f.x),vec4(intBitsToFloat(uf_remappedVS[10].x),intBitsToFloat(uf_remappedVS[10].y),intBitsToFloat(uf_remappedVS[10].z),intBitsToFloat(uf_remappedVS[10].w)));
PV0f.x = tempf.x;
PV0f.y = tempf.x;
PV0f.z = tempf.x;
PV0f.w = tempf.x;
R127f.x = mul_nonIEEE(R4f.z, intBitsToFloat(uf_remappedVS[10].z));
PS0f = R127f.x;
// 1
tempf.x = dot(vec4(R3f.x,R3f.y,R3f.z,R8f.x),vec4(intBitsToFloat(uf_remappedVS[11].x),intBitsToFloat(uf_remappedVS[11].y),intBitsToFloat(uf_remappedVS[11].z),intBitsToFloat(uf_remappedVS[11].w)));
PV1f.x = tempf.x;
PV1f.y = tempf.x;
PV1f.z = tempf.x;
PV1f.w = tempf.x;
R6f.x = PV0f.x;
PS1f = R6f.x;
// 2
tempf.x = dot(vec4(R3f.x,R3f.y,R3f.z,R8f.x),vec4(intBitsToFloat(uf_remappedVS[12].x),intBitsToFloat(uf_remappedVS[12].y),intBitsToFloat(uf_remappedVS[12].z),intBitsToFloat(uf_remappedVS[12].w)));
PV0f.x = tempf.x;
PV0f.y = tempf.x;
PV0f.z = tempf.x;
PV0f.w = tempf.x;
R6f.y = PV1f.x;
PS0f = R6f.y;
// 3
backupReg0f = R127f.x;
R127f.x = (mul_nonIEEE(R4f.y,intBitsToFloat(uf_remappedVS[10].y)) + backupReg0f);
R126f.y = mul_nonIEEE(R5f.y, intBitsToFloat(uf_remappedVS[10].y));
R6f.z = PV0f.x;
PV1f.z = R6f.z;
R127f.w = mul_nonIEEE(R2f.z, intBitsToFloat(uf_remappedVS[11].z));
R124f.x = mul_nonIEEE(R4f.z, intBitsToFloat(uf_remappedVS[11].z));
PS1f = R124f.x;
// 4
tempf.x = dot(vec4(R6f.x,R6f.y,PV1f.z,R8f.y),vec4(intBitsToFloat(uf_remappedVS[13].x),intBitsToFloat(uf_remappedVS[13].y),intBitsToFloat(uf_remappedVS[13].z),intBitsToFloat(uf_remappedVS[13].w)));
PV0f.x = tempf.x;
PV0f.y = tempf.x;
PV0f.z = tempf.x;
PV0f.w = tempf.x;
R3f.y = tempf.x;
// 5
R3f.x = dot(vec4(R6f.x,R6f.y,R6f.z,R8f.y),vec4(intBitsToFloat(uf_remappedVS[14].x),intBitsToFloat(uf_remappedVS[14].y),intBitsToFloat(uf_remappedVS[14].z),intBitsToFloat(uf_remappedVS[14].w)));
PV1f.x = R3f.x;
PV1f.y = R3f.x;
PV1f.z = R3f.x;
PV1f.w = R3f.x;
R125f.x = -(PV0f.x);
PS1f = R125f.x;
// 6
tempf.x = dot(vec4(R6f.x,R6f.y,R6f.z,R8f.y),vec4(intBitsToFloat(uf_remappedVS[15].x),intBitsToFloat(uf_remappedVS[15].y),intBitsToFloat(uf_remappedVS[15].z),intBitsToFloat(uf_remappedVS[15].w)));
PV0f.x = tempf.x;
PV0f.y = tempf.x;
PV0f.z = tempf.x;
PV0f.w = tempf.x;
R3f.z = tempf.x;
// 7
tempf.x = dot(vec4(R6f.x,R6f.y,R6f.z,R8f.y),vec4(intBitsToFloat(uf_remappedVS[16].x),intBitsToFloat(uf_remappedVS[16].y),intBitsToFloat(uf_remappedVS[16].z),intBitsToFloat(uf_remappedVS[16].w)));
PV1f.x = tempf.x;
PV1f.y = tempf.x;
PV1f.z = tempf.x;
PV1f.w = tempf.x;
R3f.w = tempf.x;
R8f.z = PV0f.x;
PS1f = R8f.z;
// 8
R123f.x = (mul_nonIEEE(R4f.x,intBitsToFloat(uf_remappedVS[10].x)) + R127f.x);
PV0f.x = R123f.x;
R123f.y = (mul_nonIEEE(R5f.y,intBitsToFloat(uf_remappedVS[11].y)) + R127f.w);
PV0f.y = R123f.y;
R8f.w = PV1f.x;
R122f.x = (mul_nonIEEE(R4f.y,intBitsToFloat(uf_remappedVS[11].y)) + R124f.x);
PS0f = R122f.x;
// 9
R127f.x = (mul_nonIEEE(R2f.z,intBitsToFloat(uf_remappedVS[10].z)) + R126f.y);
R9f.y = (mul_nonIEEE(R5f.x,intBitsToFloat(uf_remappedVS[11].x)) + PV0f.y);
R123f.w = (mul_nonIEEE(R4f.x,intBitsToFloat(uf_remappedVS[11].x)) + PS0f);
PV1f.w = R123f.w;
R7f.x = PV0f.x;
PS1f = R7f.x;
// 10
tempf.x = dot(vec4(R4f.x,R4f.y,R4f.z,-0.0),vec4(intBitsToFloat(uf_remappedVS[12].x),intBitsToFloat(uf_remappedVS[12].y),intBitsToFloat(uf_remappedVS[12].z),0.0));
PV0f.x = tempf.x;
PV0f.y = tempf.x;
PV0f.z = tempf.x;
PV0f.w = tempf.x;
R7f.y = PV1f.w;
PS0f = R7f.y;
// 11
R9f.x = (mul_nonIEEE(R5f.x,intBitsToFloat(uf_remappedVS[10].x)) + R127f.x);
PV1f.y = mul_nonIEEE(R2f.z, intBitsToFloat(uf_remappedVS[12].z));
R7f.z = PV0f.x;
R8f.x = R3f.x + R3f.w;
R8f.x /= 2.0;
PS1f = R8f.x;
// 12
tempf.x = dot(vec4(R5f.x,R5f.y,PV1f.y,-0.0),vec4(intBitsToFloat(uf_remappedVS[12].x),intBitsToFloat(uf_remappedVS[12].y),1.0,0.0));
PV0f.x = tempf.x;
PV0f.y = tempf.x;
PV0f.z = tempf.x;
PV0f.w = tempf.x;
R9f.z = tempf.x;
R8f.y = R125f.x + R3f.w;
R8f.y /= 2.0;
PS0f = R8f.y;
// export
gl_Position = vec4(R3f.x, R3f.y, R3f.z, R3f.w);
// export
passParameterSem4 = vec4(R9f.x, R9f.y, R9f.z, R9f.w);
// export
passParameterSem7 = vec4(R8f.x, R8f.y, R8f.z, R8f.w);
// export
passParameterSem3 = vec4(R7f.x, R7f.y, R7f.z, R7f.w);
// export
passParameterSem6 = vec4(R6f.x, R6f.y, R6f.z, R6f.w);
}