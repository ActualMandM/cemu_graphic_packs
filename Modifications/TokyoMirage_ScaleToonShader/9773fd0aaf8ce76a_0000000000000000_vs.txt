#version 420
#extension GL_ARB_texture_gather : enable
#extension GL_ARB_separate_shader_objects : enable
#extension GL_ARB_shading_language_packing : enable
const float toonScale = 0.75;
// shader 9773fd0aaf8ce76a
layout(binding = 1, std140) uniform uniformBlockVS1
{
vec4 uf_blockVS1[1024];
};

layout(binding = 3, std140) uniform uniformBlockVS3
{
vec4 uf_blockVS3[1024];
};

layout(binding = 5, std140) uniform uniformBlockVS5
{
vec4 uf_blockVS5[1024];
};

layout(binding = 6, std140) uniform uniformBlockVS6
{
vec4 uf_blockVS6[1024];
};

uniform vec2 uf_windowSpaceToClipSpaceTransform;
layout(location = 0) in uvec4 attrDataSem0;
layout(location = 1) in uvec4 attrDataSem2;
layout(location = 2) in uvec4 attrDataSem3;
layout(location = 3) in uvec4 attrDataSem4;
layout(location = 4) in uvec4 attrDataSem7;
layout(location = 5) in uvec4 attrDataSem8;
layout(location = 6) in uvec4 attrDataSem14;
out gl_PerVertex
{
	vec4 gl_Position;
	float gl_PointSize;
};
layout(location = 1) out vec4 passParameterSem131;
int clampFI32(int v)
{
if( v == 0x7FFFFFFF )
	return floatBitsToInt(1.0);
else if( v == 0xFFFFFFFF )
	return floatBitsToInt(0.0);
return floatBitsToInt(clamp(intBitsToFloat(v), 0.0, 1.0));
}
float mul_nonIEEE(float a, float b){ if( a == 0.0 || b == 0.0 ) return 0.0; return a*b; }
void main()
{
ivec4 R0i = ivec4(0);
ivec4 R1i = ivec4(0);
ivec4 R2i = ivec4(0);
ivec4 R3i = ivec4(0);
ivec4 R4i = ivec4(0);
ivec4 R5i = ivec4(0);
ivec4 R6i = ivec4(0);
ivec4 R7i = ivec4(0);
ivec4 R8i = ivec4(0);
ivec4 R9i = ivec4(0);
ivec4 R10i = ivec4(0);
ivec4 R11i = ivec4(0);
ivec4 R12i = ivec4(0);
ivec4 R13i = ivec4(0);
ivec4 R14i = ivec4(0);
ivec4 R123i = ivec4(0);
ivec4 R124i = ivec4(0);
ivec4 R125i = ivec4(0);
ivec4 R126i = ivec4(0);
ivec4 R127i = ivec4(0);
uvec4 attrDecoder;
int backupReg0i, backupReg1i, backupReg2i, backupReg3i, backupReg4i;
ivec4 PV0i = ivec4(0), PV1i = ivec4(0);
int PS0i = 0, PS1i = 0;
ivec4 tempi = ivec4(0);
float tempResultf;
int tempResulti;
ivec4 ARi = ivec4(0);
bool predResult = true;
bool activeMaskStack[2];
bool activeMaskStackC[3];
activeMaskStack[0] = false;
activeMaskStackC[0] = false;
activeMaskStackC[1] = false;
activeMaskStack[0] = true;
activeMaskStackC[0] = true;
activeMaskStackC[1] = true;
vec3 cubeMapSTM;
int cubeMapFaceId;
R0i = ivec4(gl_VertexID, 0, 0, gl_InstanceID);
attrDecoder.xyz = attrDataSem0.xyz;
attrDecoder.xyz = (attrDecoder.xyz>>24)|((attrDecoder.xyz>>8)&0xFF00)|((attrDecoder.xyz<<8)&0xFF0000)|((attrDecoder.xyz<<24));
attrDecoder.w = 0;
R6i = ivec4(int(attrDecoder.x), int(attrDecoder.y), int(attrDecoder.z), floatBitsToInt(1.0));
attrDecoder.xyzw = uvec4(attrDataSem7.x,0,0,0);
R1i = ivec4(int(attrDecoder.x), 0, 0, 1);
attrDecoder.x = attrDataSem2.x;
attrDecoder.x = (attrDecoder.x>>24)|((attrDecoder.x>>8)&0xFF00)|((attrDecoder.x<<8)&0xFF0000)|((attrDecoder.x<<24));
attrDecoder.y = 0;
attrDecoder.z = 0;
attrDecoder.w = 0;
attrDecoder.xyzw = uvec4((attrDecoder.x>>0)&0x3FF,(attrDecoder.x>>10)&0x3FF,(attrDecoder.x>>20)&0x3FF,(attrDecoder.x>>30)&0x3);
if( (attrDecoder.x&0x200) != 0 ) attrDecoder.x |= 0xFFFFFC00;
if( (attrDecoder.y&0x200) != 0 ) attrDecoder.y |= 0xFFFFFC00;
if( (attrDecoder.z&0x200) != 0 ) attrDecoder.z |= 0xFFFFFC00;
attrDecoder.x = floatBitsToUint(max(float(int(attrDecoder.x))/511.0,-1.0));
attrDecoder.y = floatBitsToUint(max(float(int(attrDecoder.y))/511.0,-1.0));
attrDecoder.z = floatBitsToUint(max(float(int(attrDecoder.z))/511.0,-1.0));
attrDecoder.w = floatBitsToUint(float(attrDecoder.w));
R5i = ivec4(int(attrDecoder.x), int(attrDecoder.y), int(attrDecoder.z), int(attrDecoder.w));
attrDecoder.xyzw = attrDataSem3.xyzw;
attrDecoder = ((attrDecoder>>8)&0xFF)|((attrDecoder<<8)&0xFF00);
attrDecoder.xyzw = floatBitsToInt(vec4(unpackHalf2x16(attrDecoder.x|(attrDecoder.y<<16)),unpackHalf2x16(attrDecoder.z|(attrDecoder.w<<16))));
R3i = ivec4(int(attrDecoder.x), int(attrDecoder.y), int(attrDecoder.z), int(attrDecoder.w));
attrDecoder.x = floatBitsToUint(float(attrDataSem4.x)/255.0);
attrDecoder.yzw = uvec3(0);
R4i = ivec4(int(attrDecoder.x), floatBitsToInt(0.0), floatBitsToInt(0.0), floatBitsToInt(1.0));
if( activeMaskStackC[1] == true ) {
activeMaskStack[1] = activeMaskStack[0];
activeMaskStackC[2] = activeMaskStackC[1];
// 0
R4i.w = (floatBitsToInt(uf_blockVS5[22].x) == int(1))?int(0xFFFFFFFF):int(0x0);
// 1
predResult = (R4i.w != 0);
activeMaskStack[1] = predResult;
activeMaskStackC[2] = predResult == true && activeMaskStackC[1] == true;
}
else {
activeMaskStack[1] = false;
activeMaskStackC[2] = false;
}
if( activeMaskStackC[2] == true ) {
// 0
R0i.z = R1i.x * 0x00000003;
PS0i = R0i.z;
// 1
R0i.x = PS0i + 0x00000002;
R0i.y = PS0i + int(1);
}
if( activeMaskStackC[2] == true ) {
R11i.xyzw = floatBitsToInt(uf_blockVS6[R0i.z].xyzw);
R10i.xyzw = floatBitsToInt(uf_blockVS6[R0i.y].xyzw);
R12i.xyzw = floatBitsToInt(uf_blockVS6[R0i.x].xyzw);
}
activeMaskStack[1] = activeMaskStack[1] == false;
activeMaskStackC[2] = activeMaskStack[1] == true && activeMaskStackC[1] == true;
if( activeMaskStackC[2] == true ) {
// 0
R11i.xyz = ivec3(0,0,0);
R11i.w = 0;
R10i.x = 0;
PS0i = R10i.x;
// 1
R12i.x = 0;
R10i.yzw = ivec3(0,0,0);
R12i.y = 0;
PS1i = R12i.y;
// 2
R13i.x = 0;
R12i.z = 0;
R12i.w = 0;
}
while( activeMaskStackC[2] == true )
{
if( activeMaskStackC[2] == true ) {
// 0
predResult = (floatBitsToInt(uf_blockVS5[22].x) > R13i.x);
if( predResult == false ) break;
}
if( activeMaskStackC[2] == true ) {
// 0
R127i.x = ((R13i.x == 0)?(R1i.x):(0));
R0i.y = int(-1) + R13i.x;
PV0i.y = R0i.y;
R0i.z = 0xfffffffe + R13i.x;
PV0i.z = R0i.z;
R0i.w = 0xfffffffd + R13i.x;
PV0i.w = R0i.w;
R127i.y = ((R13i.x == 0)?(R2i.x):(0));
PS0i = R127i.y;
// 1
R123i.x = ((PV0i.y == 0)?(R1i.y):(0));
PV1i.x = R123i.x;
R123i.y = ((PV0i.y == 0)?(R2i.y):(0));
PV1i.y = R123i.y;
R127i.z = ((PV0i.w == 0)?(R1i.w):(0));
R127i.w = ((PV0i.z == 0)?(R1i.z):(0));
R126i.w = ((PV0i.z == 0)?(R2i.z):(0));
PS1i = R126i.w;
// 2
backupReg0i = R13i.x;
PV0i.x = floatBitsToInt(intBitsToFloat(R127i.y) + intBitsToFloat(PV1i.y));
PV0i.y = R127i.x + PV1i.x;
R126i.z = ((R0i.w == 0)?(R2i.w):(0));
R13i.x = backupReg0i + int(1);
PS0i = R13i.x;
// 3
PV1i.x = R127i.w + PV0i.y;
PV1i.y = floatBitsToInt(intBitsToFloat(R126i.w) + intBitsToFloat(PV0i.x));
// 4
R0i.x = floatBitsToInt(intBitsToFloat(R126i.z) + intBitsToFloat(PV1i.y));
PV0i.w = R127i.z + PV1i.x;
// 5
R0i.z = PV0i.w * 0x00000003;
PS1i = R0i.z;
// 6
R0i.y = PS1i + 0x00000002;
R7i.z = PS1i + int(1);
}
if( activeMaskStackC[2] == true ) {
R8i.xyzw = floatBitsToInt(uf_blockVS6[R0i.z].xyzw);
R7i.xyzw = floatBitsToInt(uf_blockVS6[R7i.z].xyzw);
R9i.xyzw = floatBitsToInt(uf_blockVS6[R0i.y].xyzw);
}
if( activeMaskStackC[2] == true ) {
// 0
R127i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R0i.x), intBitsToFloat(R8i.z)));
R127i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R0i.x), intBitsToFloat(R8i.y)));
R127i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R0i.x), intBitsToFloat(R8i.x)));
R127i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R0i.x), intBitsToFloat(R8i.w)));
R126i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R0i.x), intBitsToFloat(R7i.x)));
PS0i = R126i.y;
// 1
R126i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R0i.x), intBitsToFloat(R7i.y)));
R125i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R0i.x), intBitsToFloat(R9i.x)));
R126i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R0i.x), intBitsToFloat(R7i.w)));
R126i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R0i.x), intBitsToFloat(R7i.z)));
R125i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R0i.x), intBitsToFloat(R9i.y)));
PS1i = R125i.w;
// 2
backupReg0i = R11i.x;
backupReg1i = R11i.y;
backupReg2i = R127i.y;
R11i.x = floatBitsToInt(intBitsToFloat(backupReg0i) + intBitsToFloat(R127i.z));
R127i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R0i.x), intBitsToFloat(R9i.w)));
R127i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R0i.x), intBitsToFloat(R9i.z)));
R11i.y = floatBitsToInt(intBitsToFloat(backupReg1i) + intBitsToFloat(backupReg2i));
PS0i = R11i.y;
// 3
backupReg0i = R10i.x;
backupReg1i = R10i.y;
backupReg2i = R11i.z;
backupReg3i = R11i.w;
backupReg4i = R10i.z;
R10i.x = floatBitsToInt(intBitsToFloat(backupReg0i) + intBitsToFloat(R126i.y));
R10i.y = floatBitsToInt(intBitsToFloat(backupReg1i) + intBitsToFloat(R126i.x));
R11i.z = floatBitsToInt(intBitsToFloat(backupReg2i) + intBitsToFloat(R127i.x));
R11i.w = floatBitsToInt(intBitsToFloat(backupReg3i) + intBitsToFloat(R127i.w));
R10i.z = floatBitsToInt(intBitsToFloat(backupReg4i) + intBitsToFloat(R126i.w));
PS1i = R10i.z;
// 4
backupReg0i = R12i.x;
backupReg1i = R12i.y;
backupReg2i = R12i.z;
backupReg3i = R10i.w;
backupReg4i = R12i.w;
R12i.xyz = floatBitsToInt(vec3(intBitsToFloat(backupReg0i),intBitsToFloat(backupReg1i),intBitsToFloat(backupReg2i)) + vec3(intBitsToFloat(R125i.y),intBitsToFloat(R125i.w),intBitsToFloat(R127i.z)));
R10i.w = floatBitsToInt(intBitsToFloat(backupReg3i) + intBitsToFloat(R126i.z));
R12i.w = floatBitsToInt(intBitsToFloat(backupReg4i) + intBitsToFloat(R127i.y));
PS0i = R12i.w;
}
}
activeMaskStackC[1] = activeMaskStack[0] == true && activeMaskStackC[0] == true;
if( activeMaskStackC[1] == true ) {
activeMaskStack[1] = activeMaskStack[0];
activeMaskStackC[2] = activeMaskStackC[1];
// 0
R127i.x = floatBitsToInt((mul_nonIEEE(uf_blockVS5[0].z,intBitsToFloat(R12i.w)) + uf_blockVS5[0].w));
R127i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R12i.z), uf_blockVS5[0].z));
R127i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R12i.x), uf_blockVS5[0].z));
R127i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R12i.y), uf_blockVS5[0].z));
R126i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R12i.x), uf_blockVS5[1].z));
PS0i = R126i.z;
// 1
R126i.x = floatBitsToInt((mul_nonIEEE(uf_blockVS5[1].z,intBitsToFloat(R12i.w)) + uf_blockVS5[1].w));
R126i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R12i.z), uf_blockVS5[1].z));
R125i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R12i.x), uf_blockVS5[2].z));
R126i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R12i.y), uf_blockVS5[1].z));
R125i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R12i.y), uf_blockVS5[2].z));
PS1i = R125i.w;
// 2
R125i.x = floatBitsToInt((mul_nonIEEE(uf_blockVS5[2].z,intBitsToFloat(R12i.w)) + uf_blockVS5[2].w));
R125i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R12i.z), uf_blockVS5[2].z));
R124i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R12i.x), uf_blockVS5[3].z));
R124i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R12i.y), uf_blockVS5[3].z));
R124i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R12i.z), uf_blockVS5[3].z));
PS0i = R124i.y;
// 3
R124i.x = floatBitsToInt((mul_nonIEEE(uf_blockVS5[3].z,intBitsToFloat(R12i.w)) + uf_blockVS5[3].w));
R0i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R4i.x), uf_blockVS3[14].z));
tempResultf = log2(intBitsToFloat(R3i.x));
if( isinf(tempResultf) == true ) tempResultf = -3.40282347E+38F;
R0i.z = floatBitsToInt(tempResultf);
PS1i = R0i.z;
// 4
backupReg0i = R127i.x;
backupReg1i = R127i.y;
backupReg2i = R127i.z;
backupReg3i = R127i.w;
backupReg4i = R126i.z;
R127i.x = floatBitsToInt((mul_nonIEEE(uf_blockVS5[0].y,intBitsToFloat(R10i.w)) + intBitsToFloat(backupReg0i)));
R127i.y = floatBitsToInt((mul_nonIEEE(uf_blockVS5[0].y,intBitsToFloat(R10i.z)) + intBitsToFloat(backupReg1i)));
R127i.z = floatBitsToInt((mul_nonIEEE(uf_blockVS5[0].y,intBitsToFloat(R10i.x)) + intBitsToFloat(backupReg2i)));
R127i.w = floatBitsToInt((mul_nonIEEE(uf_blockVS5[0].y,intBitsToFloat(R10i.y)) + intBitsToFloat(backupReg3i)));
R126i.z = floatBitsToInt((mul_nonIEEE(uf_blockVS5[1].y,intBitsToFloat(R10i.x)) + intBitsToFloat(backupReg4i)));
PS0i = R126i.z;
// 5
backupReg0i = R126i.x;
backupReg1i = R126i.y;
backupReg2i = R125i.z;
backupReg3i = R126i.w;
backupReg4i = R125i.w;
R126i.x = floatBitsToInt((mul_nonIEEE(uf_blockVS5[1].y,intBitsToFloat(R10i.w)) + intBitsToFloat(backupReg0i)));
R126i.y = floatBitsToInt((mul_nonIEEE(uf_blockVS5[1].y,intBitsToFloat(R10i.z)) + intBitsToFloat(backupReg1i)));
R125i.z = floatBitsToInt((mul_nonIEEE(uf_blockVS5[2].y,intBitsToFloat(R10i.x)) + intBitsToFloat(backupReg2i)));
R126i.w = floatBitsToInt((mul_nonIEEE(uf_blockVS5[1].y,intBitsToFloat(R10i.y)) + intBitsToFloat(backupReg3i)));
R125i.w = floatBitsToInt((mul_nonIEEE(uf_blockVS5[2].y,intBitsToFloat(R10i.y)) + intBitsToFloat(backupReg4i)));
PS1i = R125i.w;
// 6
backupReg0i = R125i.x;
backupReg1i = R125i.y;
backupReg2i = R124i.z;
backupReg3i = R124i.w;
backupReg4i = R124i.y;
R125i.x = floatBitsToInt((mul_nonIEEE(uf_blockVS5[2].y,intBitsToFloat(R10i.w)) + intBitsToFloat(backupReg0i)));
R125i.y = floatBitsToInt((mul_nonIEEE(uf_blockVS5[2].y,intBitsToFloat(R10i.z)) + intBitsToFloat(backupReg1i)));
R124i.z = floatBitsToInt((mul_nonIEEE(uf_blockVS5[3].y,intBitsToFloat(R10i.x)) + intBitsToFloat(backupReg2i)));
R124i.w = floatBitsToInt((mul_nonIEEE(uf_blockVS5[3].y,intBitsToFloat(R10i.y)) + intBitsToFloat(backupReg3i)));
R124i.y = floatBitsToInt((mul_nonIEEE(uf_blockVS5[3].y,intBitsToFloat(R10i.z)) + intBitsToFloat(backupReg4i)));
PS0i = R124i.y;
// 7
backupReg0i = R124i.x;
backupReg1i = R0i.y;
R124i.x = floatBitsToInt((mul_nonIEEE(uf_blockVS5[3].y,intBitsToFloat(R10i.w)) + intBitsToFloat(backupReg0i)));
R0i.y = floatBitsToInt(intBitsToFloat(backupReg1i) * intBitsToFloat(0x447a0000) * toonScale);
R0i.w = floatBitsToInt(intBitsToFloat(R0i.z) * intBitsToFloat(0x400ccccd));
R8i.x = floatBitsToInt((mul_nonIEEE(uf_blockVS5[0].x,intBitsToFloat(R11i.x)) + intBitsToFloat(R127i.z)));
PS1i = R8i.x;
// 8
R9i.x = floatBitsToInt((mul_nonIEEE(uf_blockVS5[1].x,intBitsToFloat(R11i.x)) + intBitsToFloat(R126i.z)));
R7i.y = floatBitsToInt((mul_nonIEEE(uf_blockVS5[0].x,intBitsToFloat(R11i.y)) + intBitsToFloat(R127i.w)));
R8i.z = floatBitsToInt((mul_nonIEEE(uf_blockVS5[0].x,intBitsToFloat(R11i.z)) + intBitsToFloat(R127i.y)));
R6i.w = floatBitsToInt((mul_nonIEEE(uf_blockVS5[0].x,intBitsToFloat(R11i.w)) + intBitsToFloat(R127i.x)));
R8i.y = floatBitsToInt((mul_nonIEEE(uf_blockVS5[1].x,intBitsToFloat(R11i.y)) + intBitsToFloat(R126i.w)));
PS0i = R8i.y;
// 9
R10i.x = floatBitsToInt((mul_nonIEEE(uf_blockVS5[2].x,intBitsToFloat(R11i.x)) + intBitsToFloat(R125i.z)));
R9i.y = floatBitsToInt((mul_nonIEEE(uf_blockVS5[2].x,intBitsToFloat(R11i.y)) + intBitsToFloat(R125i.w)));
R9i.z = floatBitsToInt((mul_nonIEEE(uf_blockVS5[1].x,intBitsToFloat(R11i.z)) + intBitsToFloat(R126i.y)));
R7i.w = floatBitsToInt((mul_nonIEEE(uf_blockVS5[1].x,intBitsToFloat(R11i.w)) + intBitsToFloat(R126i.x)));
R10i.z = floatBitsToInt((mul_nonIEEE(uf_blockVS5[2].x,intBitsToFloat(R11i.z)) + intBitsToFloat(R125i.y)));
PS1i = R10i.z;
// 10
backupReg0i = R11i.x;
R11i.x = floatBitsToInt((mul_nonIEEE(uf_blockVS5[3].x,intBitsToFloat(backupReg0i)) + intBitsToFloat(R124i.z)));
R10i.y = floatBitsToInt((mul_nonIEEE(uf_blockVS5[3].x,intBitsToFloat(R11i.y)) + intBitsToFloat(R124i.w)));
R7i.z = floatBitsToInt((mul_nonIEEE(uf_blockVS5[3].x,intBitsToFloat(R11i.z)) + intBitsToFloat(R124i.y)));
R5i.w = floatBitsToInt((mul_nonIEEE(uf_blockVS5[2].x,intBitsToFloat(R11i.w)) + intBitsToFloat(R125i.x)));
R8i.w = floatBitsToInt((mul_nonIEEE(uf_blockVS5[3].x,intBitsToFloat(R11i.w)) + intBitsToFloat(R124i.x)));
PS0i = R8i.w;
// 11
R11i.z = floatBitsToInt(uf_blockVS3[14].w + intBitsToFloat(R0i.y));
tempResultf = log2(intBitsToFloat(R3i.y));
if( isinf(tempResultf) == true ) tempResultf = -3.40282347E+38F;
PS1i = floatBitsToInt(tempResultf);
// 12
R124i.z = floatBitsToInt(intBitsToFloat(PS1i) * intBitsToFloat(0x400ccccd));
tempResultf = log2(intBitsToFloat(R3i.z));
if( isinf(tempResultf) == true ) tempResultf = -3.40282347E+38F;
PS0i = floatBitsToInt(tempResultf);
// 13
R124i.w = floatBitsToInt(intBitsToFloat(PS0i) * intBitsToFloat(0x400ccccd));
R12i.x = floatBitsToInt(exp2(intBitsToFloat(R0i.w)));
PS1i = R12i.x;
// 14
R12i.y = floatBitsToInt(exp2(intBitsToFloat(R124i.z)));
PS0i = R12i.y;
// 15
R12i.w = R3i.w;
R12i.z = floatBitsToInt(exp2(intBitsToFloat(R124i.w)));
PS1i = R12i.z;
// 16
predResult = (R4i.w != 0);
activeMaskStack[1] = predResult;
activeMaskStackC[2] = predResult == true && activeMaskStackC[1] == true;
}
else {
activeMaskStack[1] = false;
activeMaskStackC[2] = false;
}
if( activeMaskStackC[2] == true ) {
// 0
R1i.w = R1i.x * 0x00000003;
PS0i = R1i.w;
// 1
R1i.x = PS0i + int(1);
R0i.w = PS0i + 0x00000002;
}
if( activeMaskStackC[2] == true ) {
R0i.xyz = floatBitsToInt(uf_blockVS6[R1i.w].xyz);
R1i.xyz = floatBitsToInt(uf_blockVS6[R1i.x].xyz);
R2i.xyz = floatBitsToInt(uf_blockVS6[R0i.w].xyz);
}
if( activeMaskStackC[2] == true ) {
// 0
backupReg0i = R0i.y;
backupReg1i = R0i.z;
R13i.x = floatBitsToInt(dot(vec4(intBitsToFloat(R5i.x),intBitsToFloat(R5i.y),intBitsToFloat(R5i.z),-0.0),vec4(intBitsToFloat(R0i.x),intBitsToFloat(backupReg0i),intBitsToFloat(backupReg1i),0.0)));
PV0i.x = R13i.x;
PV0i.y = R13i.x;
PV0i.z = R13i.x;
PV0i.w = R13i.x;
// 1
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R5i.x),intBitsToFloat(R5i.y),intBitsToFloat(R5i.z),-0.0),vec4(intBitsToFloat(R1i.x),intBitsToFloat(R1i.y),intBitsToFloat(R1i.z),0.0)));
PV1i.x = tempi.x;
PV1i.y = tempi.x;
PV1i.z = tempi.x;
PV1i.w = tempi.x;
R13i.y = tempi.x;
// 2
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R5i.x),intBitsToFloat(R5i.y),intBitsToFloat(R5i.z),-0.0),vec4(intBitsToFloat(R2i.x),intBitsToFloat(R2i.y),intBitsToFloat(R2i.z),0.0)));
PV0i.x = tempi.x;
PV0i.y = tempi.x;
PV0i.z = tempi.x;
PV0i.w = tempi.x;
R13i.z = tempi.x;
}
activeMaskStack[1] = activeMaskStack[1] == false;
activeMaskStackC[2] = activeMaskStack[1] == true && activeMaskStackC[1] == true;
if( activeMaskStackC[2] == true ) {
// 0
R14i.x = 0;
R13i.yzx = ivec3(0,0,0);
PS0i = R13i.x;
}
while( activeMaskStackC[2] == true )
{
if( activeMaskStackC[2] == true ) {
// 0
predResult = (floatBitsToInt(uf_blockVS5[22].x) > R14i.x);
if( predResult == false ) break;
}
if( activeMaskStackC[2] == true ) {
// 0
R127i.x = ((R14i.x == 0)?(R1i.x):(0));
R0i.y = int(-1) + R14i.x;
PV0i.y = R0i.y;
R0i.z = 0xfffffffe + R14i.x;
PV0i.z = R0i.z;
R0i.w = 0xfffffffd + R14i.x;
PV0i.w = R0i.w;
R127i.y = ((R14i.x == 0)?(R2i.x):(0));
PS0i = R127i.y;
// 1
R123i.x = ((PV0i.y == 0)?(R1i.y):(0));
PV1i.x = R123i.x;
R123i.y = ((PV0i.y == 0)?(R2i.y):(0));
PV1i.y = R123i.y;
R127i.z = ((PV0i.w == 0)?(R1i.w):(0));
R127i.w = ((PV0i.z == 0)?(R1i.z):(0));
R126i.x = ((PV0i.z == 0)?(R2i.z):(0));
PS1i = R126i.x;
// 2
backupReg0i = R14i.x;
PV0i.x = floatBitsToInt(intBitsToFloat(R127i.y) + intBitsToFloat(PV1i.y));
PV0i.y = R127i.x + PV1i.x;
R126i.z = ((R0i.w == 0)?(R2i.w):(0));
R14i.x = backupReg0i + int(1);
PS0i = R14i.x;
// 3
PV1i.x = R127i.w + PV0i.y;
PV1i.w = floatBitsToInt(intBitsToFloat(R126i.x) + intBitsToFloat(PV0i.x));
// 4
R7i.x = floatBitsToInt(intBitsToFloat(R126i.z) + intBitsToFloat(PV1i.w));
PV0i.w = R127i.z + PV1i.x;
// 5
R0i.z = PV0i.w * 0x00000003;
PS1i = R0i.z;
// 6
R0i.x = PS1i + 0x00000002;
R0i.w = PS1i + int(1);
}
if( activeMaskStackC[2] == true ) {
R3i.xyz = floatBitsToInt(uf_blockVS6[R0i.z].xyz);
R4i.xyz = floatBitsToInt(uf_blockVS6[R0i.w].xyz);
R0i.xyz = floatBitsToInt(uf_blockVS6[R0i.x].xyz);
}
if( activeMaskStackC[2] == true ) {
// 0
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R5i.x),intBitsToFloat(R5i.y),intBitsToFloat(R5i.z),-0.0),vec4(intBitsToFloat(R3i.x),intBitsToFloat(R3i.y),intBitsToFloat(R3i.z),0.0)));
PV0i.x = tempi.x;
PV0i.y = tempi.x;
PV0i.z = tempi.x;
PV0i.w = tempi.x;
// 1
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R5i.x),intBitsToFloat(R5i.y),intBitsToFloat(R5i.z),-0.0),vec4(intBitsToFloat(R4i.x),intBitsToFloat(R4i.y),intBitsToFloat(R4i.z),0.0)));
PV1i.x = tempi.x;
PV1i.y = tempi.x;
PV1i.z = tempi.x;
PV1i.w = tempi.x;
R127i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV0i.x), intBitsToFloat(R7i.x)));
PS1i = R127i.z;
// 2
backupReg0i = R0i.x;
backupReg1i = R0i.y;
backupReg2i = R0i.z;
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R5i.x),intBitsToFloat(R5i.y),intBitsToFloat(R5i.z),-0.0),vec4(intBitsToFloat(backupReg0i),intBitsToFloat(backupReg1i),intBitsToFloat(backupReg2i),0.0)));
PV0i.x = tempi.x;
PV0i.y = tempi.x;
PV0i.z = tempi.x;
PV0i.w = tempi.x;
PS0i = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV1i.x), intBitsToFloat(R7i.x)));
// 3
backupReg0i = R13i.x;
backupReg1i = R13i.y;
R13i.x = floatBitsToInt(intBitsToFloat(backupReg0i) + intBitsToFloat(R127i.z));
R13i.y = floatBitsToInt(intBitsToFloat(backupReg1i) + intBitsToFloat(PS0i));
PV1i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV0i.x), intBitsToFloat(R7i.x)));
// 4
backupReg0i = R13i.z;
R13i.z = floatBitsToInt(intBitsToFloat(backupReg0i) + intBitsToFloat(PV1i.w));
}
}
activeMaskStackC[1] = activeMaskStack[0] == true && activeMaskStackC[0] == true;
if( activeMaskStackC[1] == true ) {
// 0
R127i.xyz = ivec3(R6i.x,R6i.y,R6i.z);
PV0i.x = R127i.x;
PV0i.y = R127i.y;
PV0i.z = R127i.z;
R126i.w = 0x3f800000;
PV0i.w = R126i.w;
R126i.z = 0;
PS0i = R126i.z;
// 1
R125i.x = floatBitsToInt(dot(vec4(intBitsToFloat(PV0i.x),intBitsToFloat(PV0i.y),intBitsToFloat(PV0i.z),intBitsToFloat(PV0i.w)),vec4(intBitsToFloat(R8i.x),intBitsToFloat(R7i.y),intBitsToFloat(R8i.z),intBitsToFloat(R6i.w))));
PV1i.x = R125i.x;
PV1i.y = R125i.x;
PV1i.z = R125i.x;
PV1i.w = R125i.x;
R127i.w = floatBitsToInt(1.0 / uf_blockVS1[0].x);
PS1i = R127i.w;
// 2
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R127i.x),intBitsToFloat(R127i.y),intBitsToFloat(R127i.z),intBitsToFloat(R126i.w)),vec4(intBitsToFloat(R9i.x),intBitsToFloat(R8i.y),intBitsToFloat(R9i.z),intBitsToFloat(R7i.w))));
PV0i.x = tempi.x;
PV0i.y = tempi.x;
PV0i.z = tempi.x;
PV0i.w = tempi.x;
R126i.y = tempi.x;
R126i.x = floatBitsToInt(1.0 / uf_blockVS1[0].y);
PS0i = R126i.x;
// 3
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R127i.x),intBitsToFloat(R127i.y),intBitsToFloat(R127i.z),intBitsToFloat(R126i.w)),vec4(intBitsToFloat(R10i.x),intBitsToFloat(R9i.y),intBitsToFloat(R10i.z),intBitsToFloat(R5i.w))));
PV1i.x = tempi.x;
PV1i.y = tempi.x;
PV1i.z = tempi.x;
PV1i.w = tempi.x;
R124i.z = tempi.x;
R125i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R11i.z), intBitsToFloat(R127i.w)));
PS1i = R125i.z;
// 4
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R127i.x),intBitsToFloat(R127i.y),intBitsToFloat(R127i.z),intBitsToFloat(R126i.w)),vec4(intBitsToFloat(R11i.x),intBitsToFloat(R10i.y),intBitsToFloat(R7i.z),intBitsToFloat(R8i.w))));
PV0i.x = tempi.x;
PV0i.y = tempi.x;
PV0i.z = tempi.x;
PV0i.w = tempi.x;
R125i.w = tempi.x;
R127i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R11i.z), intBitsToFloat(R126i.x)));
PS0i = R127i.w;
// 5
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R13i.x),intBitsToFloat(R13i.y),intBitsToFloat(R13i.z),-0.0),vec4(uf_blockVS5[8].x,uf_blockVS5[8].y,uf_blockVS5[8].z,0.0)));
PV1i.x = tempi.x;
PV1i.y = tempi.x;
PV1i.z = tempi.x;
PV1i.w = tempi.x;
R6i.z = 0x3b449ba6;
PS1i = R6i.z;
// 6
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R13i.x),intBitsToFloat(R13i.y),intBitsToFloat(R13i.z),-0.0),vec4(uf_blockVS5[9].x,uf_blockVS5[9].y,uf_blockVS5[9].z,0.0)));
PV0i.x = tempi.x;
PV0i.y = tempi.x;
PV0i.z = tempi.x;
PV0i.w = tempi.x;
R127i.x = PV1i.x;
PS0i = R127i.x;
// 7
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R13i.x),intBitsToFloat(R13i.y),intBitsToFloat(R13i.z),-0.0),vec4(uf_blockVS5[10].x,uf_blockVS5[10].y,uf_blockVS5[10].z,0.0)));
PV1i.x = tempi.x;
PV1i.y = tempi.x;
PV1i.z = tempi.x;
PV1i.w = tempi.x;
R127i.y = PV0i.x;
PS1i = R127i.y;
// 8
R127i.z = PV1i.x;
// 9
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R125i.x),intBitsToFloat(R126i.y),intBitsToFloat(R124i.z),intBitsToFloat(R125i.w)),vec4(uf_blockVS1[25].x,uf_blockVS1[25].y,uf_blockVS1[25].z,uf_blockVS1[25].w)));
PV1i.x = tempi.x;
PV1i.y = tempi.x;
PV1i.z = tempi.x;
PV1i.w = tempi.x;
R0i.w = tempi.x;
// 10
R126i.x = floatBitsToInt(dot(vec4(intBitsToFloat(R127i.x),intBitsToFloat(R127i.y),intBitsToFloat(R127i.z),intBitsToFloat(R126i.w)),vec4(uf_blockVS1[11].x,uf_blockVS1[11].y,uf_blockVS1[11].z,uf_blockVS1[11].w)));
PV0i.x = R126i.x;
PV0i.y = R126i.x;
PV0i.z = R126i.x;
PV0i.w = R126i.x;
tempResultf = log2(intBitsToFloat(PV1i.x));
if( isinf(tempResultf) == true ) tempResultf = -3.40282347E+38F;
PS0i = floatBitsToInt(tempResultf);
// 11
backupReg0i = R127i.y;
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R127i.x),intBitsToFloat(backupReg0i),intBitsToFloat(R127i.z),intBitsToFloat(R126i.w)),vec4(uf_blockVS1[12].x,uf_blockVS1[12].y,uf_blockVS1[12].z,uf_blockVS1[12].w)));
PV1i.x = tempi.x;
PV1i.y = tempi.x;
PV1i.z = tempi.x;
PV1i.w = tempi.x;
R127i.y = tempi.x;
PS1i = floatBitsToInt(intBitsToFloat(PS0i) * intBitsToFloat(0x3f400000));
// 12
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R126i.x),intBitsToFloat(PV1i.x),intBitsToFloat(R126i.z),-0.0),vec4(intBitsToFloat(R126i.x),intBitsToFloat(PV1i.x),intBitsToFloat(R126i.z),0.0)));
PV0i.x = tempi.x;
PV0i.y = tempi.x;
PV0i.z = tempi.x;
PV0i.w = tempi.x;
PS0i = floatBitsToInt(exp2(intBitsToFloat(PS1i)));
// 13
PV1i.z = floatBitsToInt(max(intBitsToFloat(PS0i), 2.0));
tempResultf = 1.0 / sqrt(intBitsToFloat(PV0i.x));
PS1i = floatBitsToInt(tempResultf);
// 14
PV0i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R127i.y), intBitsToFloat(PS1i)));
PV0i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R126i.x), intBitsToFloat(PS1i)));
R126i.z = floatBitsToInt(min(intBitsToFloat(PV1i.z), intBitsToFloat(0x41f00000)));
// 15
backupReg0i = R127i.w;
PV1i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV0i.y), intBitsToFloat(R125i.z)));
R127i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV0i.x), intBitsToFloat(backupReg0i)));
// 16
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R125i.x),intBitsToFloat(R126i.y),intBitsToFloat(R124i.z),intBitsToFloat(R125i.w)),vec4(uf_blockVS1[22].x,uf_blockVS1[22].y,uf_blockVS1[22].z,uf_blockVS1[22].w)));
PV0i.x = tempi.x;
PV0i.y = tempi.x;
PV0i.z = tempi.x;
PV0i.w = tempi.x;
R125i.z = tempi.x;
R126i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV1i.y), intBitsToFloat(R126i.z)));
PS0i = R126i.x;
// 17
backupReg0i = R127i.w;
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R125i.x),intBitsToFloat(R126i.y),intBitsToFloat(R124i.z),intBitsToFloat(R125i.w)),vec4(uf_blockVS1[23].x,uf_blockVS1[23].y,uf_blockVS1[23].z,uf_blockVS1[23].w)));
PV1i.x = tempi.x;
PV1i.y = tempi.x;
PV1i.z = tempi.x;
PV1i.w = tempi.x;
R127i.y = tempi.x;
R127i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(backupReg0i), intBitsToFloat(R126i.z)));
PS1i = R127i.w;
// 18
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R125i.x),intBitsToFloat(R126i.y),intBitsToFloat(R124i.z),intBitsToFloat(R125i.w)),vec4(uf_blockVS1[24].x,uf_blockVS1[24].y,uf_blockVS1[24].z,uf_blockVS1[24].w)));
PV0i.x = tempi.x;
PV0i.y = tempi.x;
PV0i.z = tempi.x;
PV0i.w = tempi.x;
R0i.x = floatBitsToInt(intBitsToFloat(R125i.z) + intBitsToFloat(R126i.x));
PS0i = R0i.x;
// 19
R0i.y = floatBitsToInt(intBitsToFloat(R127i.y) + intBitsToFloat(R127i.w));
R0i.z = floatBitsToInt(intBitsToFloat(PV0i.x) + intBitsToFloat(R6i.z));
}
// export
gl_Position = vec4(intBitsToFloat(R0i.x), intBitsToFloat(R0i.y), intBitsToFloat(R0i.z), intBitsToFloat(R0i.w));
// export
passParameterSem131 = vec4(intBitsToFloat(R12i.x), intBitsToFloat(R12i.y), intBitsToFloat(R12i.z), intBitsToFloat(R12i.w));
}
