#version 420
#extension GL_ARB_texture_gather : enable
#extension GL_ARB_separate_shader_objects : enable
#extension GL_ARB_shading_language_packing : enable
const float toonScale = 0.75;
// shader d197a7aa2d4a9878
uniform ivec4 uf_remappedVS[15];
uniform vec2 uf_windowSpaceToClipSpaceTransform;
layout(location = 0) in uvec4 attrDataSem0;
layout(location = 1) in uvec4 attrDataSem2;
layout(location = 2) in uvec4 attrDataSem3;
layout(location = 3) in uvec4 attrDataSem8;
layout(location = 4) in uvec4 attrDataSem14;
out gl_PerVertex
{
	vec4 gl_Position;
	float gl_PointSize;
};
layout(location = 1) out vec4 passParameterSem131;
int clampFI32(int v)
{
if( v == 0x7FFFFFFF )
	return floatBitsToInt(1.0);
else if( v == 0xFFFFFFFF )
	return floatBitsToInt(0.0);
return floatBitsToInt(clamp(intBitsToFloat(v), 0.0, 1.0));
}
float mul_nonIEEE(float a, float b){ if( a == 0.0 || b == 0.0 ) return 0.0; return a*b; }
void main()
{
vec4 R0f = vec4(0.0);
vec4 R1f = vec4(0.0);
vec4 R2f = vec4(0.0);
vec4 R3f = vec4(0.0);
vec4 R4f = vec4(0.0);
vec4 R124f = vec4(0.0);
vec4 R125f = vec4(0.0);
vec4 R126f = vec4(0.0);
vec4 R127f = vec4(0.0);
uvec4 attrDecoder;
float backupReg0f, backupReg1f, backupReg2f, backupReg3f, backupReg4f;
vec4 PV0f = vec4(0.0), PV1f = vec4(0.0);
float PS0f = 0.0, PS1f = 0.0;
vec4 tempf = vec4(0.0);
float tempResultf;
int tempResulti;
ivec4 ARi = ivec4(0);
bool predResult = true;
vec3 cubeMapSTM;
int cubeMapFaceId;
R0f = floatBitsToInt(ivec4(gl_VertexID, 0, 0, gl_InstanceID));
attrDecoder.xyz = attrDataSem0.xyz;
attrDecoder.xyz = (attrDecoder.xyz>>24)|((attrDecoder.xyz>>8)&0xFF00)|((attrDecoder.xyz<<8)&0xFF0000)|((attrDecoder.xyz<<24));
attrDecoder.w = 0;
R3f = vec4(intBitsToFloat(int(attrDecoder.x)), intBitsToFloat(int(attrDecoder.y)), intBitsToFloat(int(attrDecoder.z)), intBitsToFloat(floatBitsToInt(1.0)));
attrDecoder.x = attrDataSem2.x;
attrDecoder.x = (attrDecoder.x>>24)|((attrDecoder.x>>8)&0xFF00)|((attrDecoder.x<<8)&0xFF0000)|((attrDecoder.x<<24));
attrDecoder.y = 0;
attrDecoder.z = 0;
attrDecoder.w = 0;
attrDecoder.xyzw = uvec4((attrDecoder.x>>0)&0x3FF,(attrDecoder.x>>10)&0x3FF,(attrDecoder.x>>20)&0x3FF,(attrDecoder.x>>30)&0x3);
if( (attrDecoder.x&0x200) != 0 ) attrDecoder.x |= 0xFFFFFC00;
if( (attrDecoder.y&0x200) != 0 ) attrDecoder.y |= 0xFFFFFC00;
if( (attrDecoder.z&0x200) != 0 ) attrDecoder.z |= 0xFFFFFC00;
attrDecoder.x = floatBitsToUint(max(float(int(attrDecoder.x))/511.0,-1.0));
attrDecoder.y = floatBitsToUint(max(float(int(attrDecoder.y))/511.0,-1.0));
attrDecoder.z = floatBitsToUint(max(float(int(attrDecoder.z))/511.0,-1.0));
attrDecoder.w = floatBitsToUint(float(attrDecoder.w));
R2f = vec4(intBitsToFloat(int(attrDecoder.x)), intBitsToFloat(int(attrDecoder.y)), intBitsToFloat(int(attrDecoder.z)), intBitsToFloat(int(attrDecoder.w)));
attrDecoder.xyzw = floatBitsToUint(vec4(attrDataSem3.xyzw)/255.0);
R1f = vec4(intBitsToFloat(int(attrDecoder.x)), intBitsToFloat(int(attrDecoder.y)), intBitsToFloat(int(attrDecoder.z)), intBitsToFloat(int(attrDecoder.w)));
attrDecoder.xy = attrDataSem8.xy;
attrDecoder.xy = ((attrDecoder.xy>>8)&0xFF)|((attrDecoder.xy<<8)&0xFF00);
attrDecoder.z = 0;
attrDecoder.w = 0;
attrDecoder.xy = floatBitsToUint(vec2(float(attrDecoder.x), float(attrDecoder.y))/65535.0);
attrDecoder.zw = uvec2(0);
R4f = vec4(intBitsToFloat(int(attrDecoder.x)), intBitsToFloat(int(attrDecoder.y)), intBitsToFloat(floatBitsToInt(0.0)), intBitsToFloat(floatBitsToInt(1.0)));
// 0
R127f.xyz = vec3(R3f.x,R3f.y,R3f.z);
R127f.w = 1.0;
R124f.z = 0.0;
PS0f = R124f.z;
// 1
tempf.x = dot(vec4(R2f.x,R2f.y,R2f.z,-0.0),vec4(intBitsToFloat(uf_remappedVS[0].x),intBitsToFloat(uf_remappedVS[0].y),intBitsToFloat(uf_remappedVS[0].z),0.0));
PV1f.x = tempf.x;
PV1f.y = tempf.x;
PV1f.z = tempf.x;
PV1f.w = tempf.x;
R3f.z = intBitsToFloat(0x3b449ba6);
PS1f = R3f.z;
// 2
tempf.x = dot(vec4(R2f.x,R2f.y,R2f.z,-0.0),vec4(intBitsToFloat(uf_remappedVS[1].x),intBitsToFloat(uf_remappedVS[1].y),intBitsToFloat(uf_remappedVS[1].z),0.0));
PV0f.x = tempf.x;
PV0f.y = tempf.x;
PV0f.z = tempf.x;
PV0f.w = tempf.x;
R126f.x = PV1f.x;
PS0f = R126f.x;
// 3
tempf.x = dot(vec4(R2f.x,R2f.y,R2f.z,-0.0),vec4(intBitsToFloat(uf_remappedVS[2].x),intBitsToFloat(uf_remappedVS[2].y),intBitsToFloat(uf_remappedVS[2].z),0.0));
PV1f.x = tempf.x;
PV1f.y = tempf.x;
PV1f.z = tempf.x;
PV1f.w = tempf.x;
R126f.y = PV0f.x;
PS1f = R126f.y;
// 4
R124f.x = dot(vec4(R127f.x,R127f.y,R127f.z,R127f.w),vec4(intBitsToFloat(uf_remappedVS[3].x),intBitsToFloat(uf_remappedVS[3].y),intBitsToFloat(uf_remappedVS[3].z),intBitsToFloat(uf_remappedVS[3].w)));
PV0f.x = R124f.x;
PV0f.y = R124f.x;
PV0f.z = R124f.x;
PV0f.w = R124f.x;
R125f.z = PV1f.x;
PS0f = R125f.z;
// 5
tempf.x = dot(vec4(R127f.x,R127f.y,R127f.z,R127f.w),vec4(intBitsToFloat(uf_remappedVS[4].x),intBitsToFloat(uf_remappedVS[4].y),intBitsToFloat(uf_remappedVS[4].z),intBitsToFloat(uf_remappedVS[4].w)));
PV1f.x = tempf.x;
PV1f.y = tempf.x;
PV1f.z = tempf.x;
PV1f.w = tempf.x;
R125f.y = tempf.x;
tempResultf = log2(R1f.x);
if( isinf(tempResultf) == true ) tempResultf = -3.40282347E+38F;
R126f.z = tempResultf;
PS1f = R126f.z;
// 6
tempf.x = dot(vec4(R127f.x,R127f.y,R127f.z,R127f.w),vec4(intBitsToFloat(uf_remappedVS[5].x),intBitsToFloat(uf_remappedVS[5].y),intBitsToFloat(uf_remappedVS[5].z),intBitsToFloat(uf_remappedVS[5].w)));
PV0f.x = tempf.x;
PV0f.y = tempf.x;
PV0f.z = tempf.x;
PV0f.w = tempf.x;
R2f.z = tempf.x;
tempResultf = log2(R1f.y);
if( isinf(tempResultf) == true ) tempResultf = -3.40282347E+38F;
R125f.x = tempResultf;
PS0f = R125f.x;
// 7
tempf.x = dot(vec4(R127f.x,R127f.y,R127f.z,R127f.w),vec4(intBitsToFloat(uf_remappedVS[6].x),intBitsToFloat(uf_remappedVS[6].y),intBitsToFloat(uf_remappedVS[6].z),intBitsToFloat(uf_remappedVS[6].w)));
PV1f.x = tempf.x;
PV1f.y = tempf.x;
PV1f.z = tempf.x;
PV1f.w = tempf.x;
R126f.w = tempf.x;
tempResultf = log2(R1f.z);
if( isinf(tempResultf) == true ) tempResultf = -3.40282347E+38F;
R127f.z = tempResultf;
PS1f = R127f.z;
// 8
tempf.x = dot(vec4(R124f.x,R125f.y,R2f.z,PV1f.x),vec4(intBitsToFloat(uf_remappedVS[7].x),intBitsToFloat(uf_remappedVS[7].y),intBitsToFloat(uf_remappedVS[7].z),intBitsToFloat(uf_remappedVS[7].w)));
PV0f.x = tempf.x;
PV0f.y = tempf.x;
PV0f.z = tempf.x;
PV0f.w = tempf.x;
R4f.w = tempf.x;
R127f.y = R126f.z * intBitsToFloat(0x400ccccd);
PS0f = R127f.y;
// 9
R127f.x = dot(vec4(R126f.x,R126f.y,R125f.z,R127f.w),vec4(intBitsToFloat(uf_remappedVS[8].x),intBitsToFloat(uf_remappedVS[8].y),intBitsToFloat(uf_remappedVS[8].z),intBitsToFloat(uf_remappedVS[8].w)));
PV1f.x = R127f.x;
PV1f.y = R127f.x;
PV1f.z = R127f.x;
PV1f.w = R127f.x;
tempResultf = log2(PV0f.x);
if( isinf(tempResultf) == true ) tempResultf = -3.40282347E+38F;
PS1f = tempResultf;
// 10
backupReg0f = R126f.y;
tempf.x = dot(vec4(R126f.x,backupReg0f,R125f.z,R127f.w),vec4(intBitsToFloat(uf_remappedVS[9].x),intBitsToFloat(uf_remappedVS[9].y),intBitsToFloat(uf_remappedVS[9].z),intBitsToFloat(uf_remappedVS[9].w)));
PV0f.x = tempf.x;
PV0f.y = tempf.x;
PV0f.z = tempf.x;
PV0f.w = tempf.x;
R126f.y = tempf.x;
R126f.x = PS1f * intBitsToFloat(0x3f400000);
PS0f = R126f.x;
// 11
tempf.x = dot(vec4(R127f.x,PV0f.x,R124f.z,-0.0),vec4(R127f.x,PV0f.x,R124f.z,0.0));
PV1f.x = tempf.x;
PV1f.y = tempf.x;
PV1f.z = tempf.x;
PV1f.w = tempf.x;
R0f.w = 1.0 / intBitsToFloat(uf_remappedVS[10].x);
PS1f = R0f.w;
// 12
tempf.x = dot(vec4(R124f.x,R125f.y,R2f.z,R126f.w),vec4(intBitsToFloat(uf_remappedVS[11].x),intBitsToFloat(uf_remappedVS[11].y),intBitsToFloat(uf_remappedVS[11].z),intBitsToFloat(uf_remappedVS[11].w)));
PV0f.x = tempf.x;
PV0f.y = tempf.x;
PV0f.z = tempf.x;
PV0f.w = tempf.x;
R0f.z = tempf.x;
tempResultf = 1.0 / sqrt(PV1f.x);
PS0f = tempResultf;
// 13
backupReg0f = R127f.z;
R3f.x = mul_nonIEEE(R126f.y, PS0f);
R2f.y = mul_nonIEEE(R127f.x, PS0f);
R127f.z = backupReg0f * intBitsToFloat(0x400ccccd);
R127f.w = R125f.x * intBitsToFloat(0x400ccccd);
R2f.x = 1.0 / intBitsToFloat(uf_remappedVS[10].y);
PS1f = R2f.x;
// 14
tempf.x = dot(vec4(R124f.x,R125f.y,R2f.z,R126f.w),vec4(intBitsToFloat(uf_remappedVS[12].x),intBitsToFloat(uf_remappedVS[12].y),intBitsToFloat(uf_remappedVS[12].z),intBitsToFloat(uf_remappedVS[12].w)));
PV0f.x = tempf.x;
PV0f.y = tempf.x;
PV0f.z = tempf.x;
PV0f.w = tempf.x;
R0f.y = tempf.x;
PS0f = exp2(R126f.x);
// 15
backupReg0f = R1f.w;
PV1f.z = max(PS0f, 2.0);
R1f.w = backupReg0f;
R1f.x = exp2(R127f.y);
PS1f = R1f.x;
// 16
R3f.y = min(PV1f.z, intBitsToFloat(0x41f00000));
R1f.y = exp2(R127f.w);
PS0f = R1f.y;
// 17
tempf.x = dot(vec4(R124f.x,R125f.y,R2f.z,R126f.w),vec4(intBitsToFloat(uf_remappedVS[13].x),intBitsToFloat(uf_remappedVS[13].y),intBitsToFloat(uf_remappedVS[13].z),intBitsToFloat(uf_remappedVS[13].w)));
PV1f.x = tempf.x;
PV1f.y = tempf.x;
PV1f.z = tempf.x;
PV1f.w = tempf.x;
R1f.z = exp2(R127f.z);
PS1f = R1f.z;
// 18
R4f.z = PV1f.x + R3f.z;
// export
passParameterSem131 = vec4(R1f.x, R1f.y, R1f.z, R1f.w);
// 0
PV0f.x = intBitsToFloat(uf_remappedVS[14].z) * intBitsToFloat(0x447a0000) * toonScale;
// 1
PV1f.z = intBitsToFloat(uf_remappedVS[14].w) + PV0f.x;
// 2
PV0f.z = mul_nonIEEE(PV1f.z, R0f.w);
PV0f.w = mul_nonIEEE(PV1f.z, R2f.x);
// 3
PV1f.y = mul_nonIEEE(R2f.y, PV0f.z);
PV1f.w = mul_nonIEEE(R3f.x, PV0f.w);
// 4
PV0f.x = mul_nonIEEE(PV1f.y, R3f.y);
PV0f.w = mul_nonIEEE(PV1f.w, R3f.y);
// 5
R4f.x = R0f.z + PV0f.x;
R4f.y = R0f.y + PV0f.w;
// export
gl_Position = vec4(R4f.x, R4f.y, R4f.z, R4f.w);
}
