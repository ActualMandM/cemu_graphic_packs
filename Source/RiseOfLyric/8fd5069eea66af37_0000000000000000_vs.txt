<?php
include 'Source/functions.php';
$fullWidth = $argv[1];
$fullHeight = $argv[2];
$scaleFactorX = always_decimal_format($fullWidth / 1280.0);
$scaleFactorY = always_decimal_format($fullHeight / 720.0);
?>
#version 420
#extension GL_ARB_texture_gather : enable
#extension GL_ARB_separate_shader_objects : enable
#extension GL_ARB_shading_language_packing : enable
// shader 8fd5069eea66af37
const float resXScale = <?=$scaleFactorX?>;
const float resYScale = <?=$scaleFactorY?>;
uniform ivec4 uf_remappedVS[12];
uniform vec2 uf_windowSpaceToClipSpaceTransform;
layout(location = 0) in uvec4 attrDataSem1;
layout(location = 1) in uvec4 attrDataSem3;
layout(location = 2) in uvec4 attrDataSem7;
out gl_PerVertex
{
	vec4 gl_Position;
	float gl_PointSize;
};
layout(location = 0) out vec4 passParameterSem137;
layout(location = 1) out vec4 passParameterSem138;
layout(location = 2) out vec4 passParameterSem139;
layout(location = 3) out vec4 passParameterSem140;
int clampFI32(int v)
{
if( v == 0x7FFFFFFF )
	return floatBitsToInt(1.0);
else if( v == 0xFFFFFFFF )
	return floatBitsToInt(0.0);
return floatBitsToInt(clamp(intBitsToFloat(v), 0.0, 1.0));
}
float mul_nonIEEE(float a, float b){ if( a == 0.0 || b == 0.0 ) return 0.0; return a*b; }
void main()
{
vec4 R0f = vec4(0.0);
vec4 R1f = vec4(0.0);
vec4 R2f = vec4(0.0);
vec4 R3f = vec4(0.0);
vec4 R4f = vec4(0.0);
vec4 R5f = vec4(0.0);
vec4 R126f = vec4(0.0);
vec4 R127f = vec4(0.0);
uvec4 attrDecoder;
float backupReg0f, backupReg1f, backupReg2f, backupReg3f, backupReg4f;
vec4 PV0f = vec4(0.0), PV1f = vec4(0.0);
float PS0f = 0.0, PS1f = 0.0;
vec4 tempf = vec4(0.0);
float tempResultf;
int tempResulti;
ivec4 ARi = ivec4(0);
bool predResult = true;
vec3 cubeMapSTM;
int cubeMapFaceId;
R0f = floatBitsToInt(ivec4(gl_VertexID, 0, 0, gl_InstanceID));
attrDecoder.xyz = attrDataSem1.xyz;
attrDecoder.xyz = (attrDecoder.xyz>>24)|((attrDecoder.xyz>>8)&0xFF00)|((attrDecoder.xyz<<8)&0xFF0000)|((attrDecoder.xyz<<24));
attrDecoder.w = 0;
R1f = vec4(intBitsToFloat(int(attrDecoder.x)), intBitsToFloat(int(attrDecoder.y)), intBitsToFloat(int(attrDecoder.z)), intBitsToFloat(floatBitsToInt(1.0)));
attrDecoder.xy = attrDataSem7.xy;
attrDecoder.xy = (attrDecoder.xy>>24)|((attrDecoder.xy>>8)&0xFF00)|((attrDecoder.xy<<8)&0xFF0000)|((attrDecoder.xy<<24));
attrDecoder.z = 0;
attrDecoder.w = 0;
R2f = vec4(intBitsToFloat(int(attrDecoder.x)), intBitsToFloat(int(attrDecoder.y)), intBitsToFloat(floatBitsToInt(0.0)), intBitsToFloat(floatBitsToInt(1.0)));
// 0
R0f.x = dot(vec4(R1f.x,R1f.y,R1f.z,R1f.w),vec4(intBitsToFloat(uf_remappedVS[0].x),intBitsToFloat(uf_remappedVS[0].y),intBitsToFloat(uf_remappedVS[0].z),intBitsToFloat(uf_remappedVS[0].w)));
PV0f.x = R0f.x;
PV0f.y = R0f.x;
PV0f.z = R0f.x;
PV0f.w = R0f.x;
R5f.z = 0.0;
PS0f = R5f.z;
// 1
tempf.x = dot(vec4(R1f.x,R1f.y,R1f.z,R1f.w),vec4(intBitsToFloat(uf_remappedVS[1].x),intBitsToFloat(uf_remappedVS[1].y),intBitsToFloat(uf_remappedVS[1].z),intBitsToFloat(uf_remappedVS[1].w)));
PV1f.x = tempf.x;
PV1f.y = tempf.x;
PV1f.z = tempf.x;
PV1f.w = tempf.x;
R0f.y = tempf.x;
R5f.x = R2f.x;
PS1f = R5f.x;
// 2
tempf.x = dot(vec4(R1f.x,R1f.y,R1f.z,R1f.w),vec4(intBitsToFloat(uf_remappedVS[2].x),intBitsToFloat(uf_remappedVS[2].y),intBitsToFloat(uf_remappedVS[2].z),intBitsToFloat(uf_remappedVS[2].w)));
PV0f.x = tempf.x;
PV0f.y = tempf.x;
PV0f.z = tempf.x;
PV0f.w = tempf.x;
R0f.z = tempf.x;
R5f.y = R2f.y;
PS0f = R5f.y;
// 3
tempf.x = dot(vec4(R1f.x,R1f.y,R1f.z,R1f.w),vec4(intBitsToFloat(uf_remappedVS[3].x),intBitsToFloat(uf_remappedVS[3].y),intBitsToFloat(uf_remappedVS[3].z),intBitsToFloat(uf_remappedVS[3].w)));
PV1f.x = tempf.x;
PV1f.y = tempf.x;
PV1f.z = tempf.x;
PV1f.w = tempf.x;
R0f.w = tempf.x;
// 4
R127f.xyz = vec3(R2f.y,R2f.x,R2f.y) + vec3(intBitsToFloat(uf_remappedVS[4].y) / resYScale,intBitsToFloat(uf_remappedVS[4].x) / resXScale,intBitsToFloat(uf_remappedVS[5].y));
PV0f.w = R2f.x + intBitsToFloat(uf_remappedVS[5].x) / resXScale;
// 5
R126f.xyz = vec3(R2f.y,R2f.x,R2f.y) + vec3(intBitsToFloat(uf_remappedVS[6].y) / resYScale,intBitsToFloat(uf_remappedVS[6].x) / resXScale,intBitsToFloat(uf_remappedVS[7].y));
R127f.w = R2f.x + intBitsToFloat(uf_remappedVS[7].x) / resXScale;
R1f.z = PV0f.w;
PS1f = R1f.z;
// 6
R1f.x = R2f.x + intBitsToFloat(uf_remappedVS[8].x) / resXScale;
R1f.y = R2f.y + intBitsToFloat(uf_remappedVS[8].y) / resYScale;
R3f.z = R127f.y;
R1f.w = R127f.z;
R3f.x = R2f.x + intBitsToFloat(uf_remappedVS[9].x) / resXScale;
PS0f = R3f.x;
// 7
R4f.x = R2f.x + intBitsToFloat(uf_remappedVS[10].x) / resXScale;
R3f.y = R2f.y + intBitsToFloat(uf_remappedVS[9].y) / resYScale;
R4f.z = R127f.w;
R3f.w = R127f.x;
R4f.y = R2f.y + intBitsToFloat(uf_remappedVS[10].y) / resYScale;
PS1f = R4f.y;
// 8
backupReg0f = R2f.x;
backupReg1f = R2f.y;
R2f.x = backupReg0f + intBitsToFloat(uf_remappedVS[11].x) / resXScale;
R2f.y = backupReg1f + intBitsToFloat(uf_remappedVS[11].y) / resYScale;
R2f.z = R126f.y;
R4f.w = R126f.z;
R2f.w = R126f.x;
PS0f = R2f.w;
// export
gl_Position = vec4(R0f.x, R0f.y, R0f.z, R0f.w);
// export
passParameterSem137 = vec4(R1f.x, R1f.y, R1f.z, R1f.w);
// export
passParameterSem138 = vec4(R3f.x, R3f.y, R3f.z, R3f.w);
// export
passParameterSem139 = vec4(R4f.x, R4f.y, R4f.z, R4f.w);
// export
passParameterSem140 = vec4(R2f.x, R2f.y, R2f.z, R2f.w);
// export
// skipped export to semanticId 255
// 0
}
