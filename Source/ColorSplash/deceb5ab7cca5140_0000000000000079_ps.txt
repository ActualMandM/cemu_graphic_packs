<?php
include 'Source/functions.php';
$fullWidth = $argv[1];
$fullHeight = $argv[2];
$scaleFactorX = always_decimal_format($fullWidth / 1280.0);
$scaleFactorY = always_decimal_format($fullHeight / 720.0);
?>
#version 420
#extension GL_ARB_texture_gather : enable
#extension GL_ARB_separate_shader_objects : enable
// shader deceb5ab7cca5140
const float resXScale = <?=$scaleFactorX?>; 
const float resYScale = <?=$scaleFactorY?>; 
uniform ivec4 uf_remappedPS[1];
layout(binding = 0) uniform sampler2D textureUnitPS0;// Tex0 addr 0xf4c23000 res 640x360x1 dim 1 tm: 4 format 0816 compSel: 0 1 2 5 mipView: 0x0 (num 0x1) sliceView: 0x0 (num 0x1) Sampler0 ClampX/Y/Z: 2 2 2 border: 0
layout(location = 0) in vec4 passParameterSem0;
layout(location = 0) out vec4 passPixelColor0;
uniform vec2 uf_fragCoordScale;
int clampFI32(int v)
{
if( v == 0x7FFFFFFF )
	return floatBitsToInt(1.0);
else if( v == 0xFFFFFFFF )
	return floatBitsToInt(0.0);
return floatBitsToInt(clamp(intBitsToFloat(v), 0.0, 1.0));
}
float mul_nonIEEE(float a, float b){ return min(a*b,min(abs(a)*3.40282347E+38F,abs(b)*3.40282347E+38F)); }
void main()
{
vec4 R0f = vec4(0.0);
vec4 R1f = vec4(0.0);
vec4 R2f = vec4(0.0);
vec4 R127f = vec4(0.0);
float backupReg0f, backupReg1f, backupReg2f, backupReg3f, backupReg4f;
vec4 PV0f = vec4(0.0), PV1f = vec4(0.0);
float PS0f = 0.0, PS1f = 0.0;
vec4 tempf = vec4(0.0);
float tempResultf;
int tempResulti;
ivec4 ARi = ivec4(0);
bool predResult = true;
vec3 cubeMapSTM;
int cubeMapFaceId;
R0f = passParameterSem0;
// 0
PV0f.x = intBitsToFloat(uf_remappedPS[0].y) * intBitsToFloat(0x3af5c290) / resXScale;
R2f.y = intBitsToFloat(uf_remappedPS[0].z) * 0.5;
PV0f.z = intBitsToFloat(uf_remappedPS[0].y) * intBitsToFloat(0xbaf5c290) / resYScale;
PV0f.w = 0.0;
// 1
backupReg0f = R0f.x;
backupReg1f = R0f.y;
backupReg0f = R0f.x;
backupReg1f = R0f.y;
R0f.xyz = vec3(backupReg0f,backupReg1f,backupReg0f) + vec3(PV0f.z,PV0f.w,PV0f.x);
R0f.w = backupReg1f + PV0f.w;
R1f.xyzw = (texture(textureUnitPS0, R0f.xy).xyzw);
R0f.xyzw = (texture(textureUnitPS0, R0f.zw).xyzw);
// 0
backupReg0f = R0f.w;
R127f.x = R1f.z + R0f.z;
R127f.x /= 2.0;
PV0f.x = R127f.x;
R127f.y = R1f.y + R0f.y;
R127f.y /= 2.0;
PV0f.y = R127f.y;
R127f.z = R1f.x + R0f.x;
R127f.z /= 2.0;
PV0f.z = R127f.z;
R0f.w = R1f.w + backupReg0f;
R0f.w /= 2.0;
// 1
PV1f.x = -(PV0f.y) + 0.0;
PV1f.y = -(PV0f.z) + 0.0;
PV1f.w = -(PV0f.x) + 0.0;
// 2
R0f.x = (mul_nonIEEE(PV1f.y,R2f.y) + R127f.z);
R0f.y = (mul_nonIEEE(PV1f.x,R2f.y) + R127f.y);
R0f.z = (mul_nonIEEE(PV1f.w,R2f.y) + R127f.x);
// export
passPixelColor0 = vec4(R0f.x, R0f.y, R0f.z, R0f.w);
}
