<?php
include 'Source/functions.php';
$fullWidth = $argv[1];
$fullHeight = $argv[2];
$scaleFactorX = always_decimal_format($fullWidth / 1280.0);
$scaleFactorY = always_decimal_format($fullHeight / 720.0);
?>

#version 420
#extension GL_ARB_texture_gather : enable
#extension GL_ARB_separate_shader_objects : enable
const float resScale = <?=$scaleFactorX?>; //shadows
// shader e2f8996baff83d4d
layout(binding = 33, std140) uniform uniformBlockPS1
{
vec4 uf_blockPS1[1024];
};

layout(binding = 34, std140) uniform uniformBlockPS2
{
vec4 uf_blockPS2[1024];
};

layout(binding = 35, std140) uniform uniformBlockPS3
{
vec4 uf_blockPS3[1024];
};

layout(binding = 40, std140) uniform uniformBlockPS8
{
vec4 uf_blockPS8[1024];
};

layout(binding = 42, std140) uniform uniformBlockPS10
{
vec4 uf_blockPS10[1024];
};

layout(binding = 43, std140) uniform uniformBlockPS11
{
vec4 uf_blockPS11[1024];
};

layout(binding = 0) uniform sampler2D textureUnitPS0;// Tex0 addr 0x1a249000 res 128x128x1 dim 1 tm: 4 format 0431 compSel: 0 1 2 3 mipView: 0x0 (num 0x8) sliceView: 0x0 (num 0x1) Sampler0 ClampX/Y/Z: 0 0 2 border: 0
layout(binding = 3) uniform sampler2D textureUnitPS3;// Tex3 addr 0x19a60000 res 64x64x1 dim 1 tm: 4 format 0235 compSel: 0 1 4 5 mipView: 0x0 (num 0x7) sliceView: 0x0 (num 0x1) Sampler3 ClampX/Y/Z: 0 0 2 border: 0
layout(binding = 9) uniform samplerCubeArray textureUnitPS9;// Tex9 addr 0x19bd6000 res 128x128x1 dim 3 tm: 4 format 0031 compSel: 0 1 2 3 mipView: 0x0 (num 0x3) sliceView: 0x0 (num 0x6) Sampler9 ClampX/Y/Z: 2 2 2 border: 0
layout(binding = 10) uniform sampler2D textureUnitPS10;// Tex10 addr 0x184a2000 res 2048x2048x1 dim 1 tm: 4 format 0433 compSel: 0 1 2 3 mipView: 0x0 (num 0x1) sliceView: 0x0 (num 0x1) Sampler10 ClampX/Y/Z: 2 2 2 border: 0
layout(binding = 13) uniform sampler2DShadow textureUnitPS13;// Tex13 addr 0x277b8800 res 1024x2048x1 dim 1 tm: 4 format 0011 compSel: 0 0 0 0 mipView: 0x0 (num 0x1) sliceView: 0x0 (num 0x1) Sampler13 ClampX/Y/Z: 6 6 6 border: 2
layout(binding = 14) uniform sampler2DShadow textureUnitPS14;// Tex14 addr 0x27fb9000 res 1024x1024x1 dim 1 tm: 4 format 0011 compSel: 0 0 0 0 mipView: 0x0 (num 0x1) sliceView: 0x0 (num 0x1) Sampler14 ClampX/Y/Z: 6 6 6 border: 2
layout(location = 1) in vec4 passParameterSem143;
layout(location = 2) in vec4 passParameterSem130;
layout(location = 3) in vec4 passParameterSem128;
layout(location = 4) in vec4 passParameterSem144;
layout(location = 5) in vec4 passParameterSem142;
layout(location = 6) in vec4 passParameterSem136;
layout(location = 7) in vec4 passParameterSem137;
layout(location = 0) out vec4 passPixelColor0;
layout(location = 2) out vec4 passPixelColor2;
uniform vec2 uf_fragCoordScale;
void redcCUBE(vec4 src0, vec4 src1, out vec3 stm, out int faceId)
{
// stm -> x .. s, y .. t, z .. MajorAxis*2.0
vec3 inputCoord = normalize(vec3(src1.y, src1.x, src0.x));
float rx = inputCoord.x;
float ry = inputCoord.y;
float rz = inputCoord.z;
if( abs(rx) > abs(ry) && abs(rx) > abs(rz) )
{
stm.z = rx*2.0;
stm.xy = vec2(ry,rz);	
if( rx >= 0.0 )
{
faceId = 0;
}
else
{
faceId = 1;
}
}
else if( abs(ry) > abs(rx) && abs(ry) > abs(rz) )
{
stm.z = ry*2.0;
stm.xy = vec2(rx,rz);	
if( ry >= 0.0 )
{
faceId = 2;
}
else
{
faceId = 3;
}
}
else //if( abs(rz) > abs(ry) && abs(rz) > abs(rx) )
{
stm.z = rz*2.0;
stm.xy = vec2(rx,ry);	
if( rz >= 0.0 )
{
faceId = 4;
}
else
{
faceId = 5;
}
}
}
vec3 redcCUBEReverse(vec2 st, int faceId)
{
st.yx = st.xy;
vec3 v;
float majorAxis = 1.0;
if( faceId == 0 )
{
v.yz = (st-vec2(1.5))*(majorAxis*2.0);
v.x = 1.0;
}
else if( faceId == 1 )
{
v.yz = (st-vec2(1.5))*(majorAxis*2.0);
v.x = -1.0;
}
else if( faceId == 2 )
{
v.xz = (st-vec2(1.5))*(majorAxis*2.0);
v.y = 1.0;
}
else if( faceId == 3 )
{
v.xz = (st-vec2(1.5))*(majorAxis*2.0);
v.y = -1.0;
}
else if( faceId == 4 )
{
v.xy = (st-vec2(1.5))*(majorAxis*2.0);
v.z = 1.0;
}
else
{
v.xy = (st-vec2(1.5))*(majorAxis*2.0);
v.z = -1.0;
}
return v;
}
int clampFI32(int v)
{
if( v == 0x7FFFFFFF )
	return floatBitsToInt(1.0);
else if( v == 0xFFFFFFFF )
	return floatBitsToInt(0.0);
return floatBitsToInt(clamp(intBitsToFloat(v), 0.0, 1.0));
}
float mul_nonIEEE(float a, float b){ if( a == 0.0 || b == 0.0 ) return 0.0; return a*b; }
void main()
{
ivec4 R0i = ivec4(0);
ivec4 R1i = ivec4(0);
ivec4 R2i = ivec4(0);
ivec4 R3i = ivec4(0);
ivec4 R4i = ivec4(0);
ivec4 R5i = ivec4(0);
ivec4 R6i = ivec4(0);
ivec4 R7i = ivec4(0);
ivec4 R8i = ivec4(0);
ivec4 R9i = ivec4(0);
ivec4 R10i = ivec4(0);
ivec4 R11i = ivec4(0);
ivec4 R12i = ivec4(0);
ivec4 R13i = ivec4(0);
ivec4 R14i = ivec4(0);
ivec4 R30i = ivec4(0);
ivec4 R48i = ivec4(0);
ivec4 R122i = ivec4(0);
ivec4 R123i = ivec4(0);
ivec4 R125i = ivec4(0);
ivec4 R126i = ivec4(0);
ivec4 R127i = ivec4(0);
int backupReg0i, backupReg1i, backupReg2i, backupReg3i, backupReg4i;
ivec4 PV0i = ivec4(0), PV1i = ivec4(0);
int PS0i = 0, PS1i = 0;
ivec4 tempi = ivec4(0);
float tempResultf;
int tempResulti;
ivec4 ARi = ivec4(0);
bool predResult = true;
bool activeMaskStack[4];
bool activeMaskStackC[5];
activeMaskStack[0] = false;
activeMaskStack[1] = false;
activeMaskStack[2] = false;
activeMaskStackC[0] = false;
activeMaskStackC[1] = false;
activeMaskStackC[2] = false;
activeMaskStackC[3] = false;
activeMaskStack[0] = true;
activeMaskStackC[0] = true;
activeMaskStackC[1] = true;
vec3 cubeMapSTM;
int cubeMapFaceId;
float cubeMapArrayIndex9 = 0.0;
R0i = floatBitsToInt(vec4(gl_FragCoord.xy*uf_fragCoordScale,gl_FragCoord.zw));
R1i = floatBitsToInt(passParameterSem143);
R2i = floatBitsToInt(passParameterSem130);
R3i = floatBitsToInt(passParameterSem128);
R4i = floatBitsToInt(passParameterSem144);
R5i = floatBitsToInt(passParameterSem142);
R6i = floatBitsToInt(passParameterSem136);
R7i = floatBitsToInt(passParameterSem137);
if( activeMaskStackC[1] == true ) {
R8i.xy = floatBitsToInt(texture(textureUnitPS3, intBitsToFloat(R6i.xy)).xy);
}
if( activeMaskStackC[1] == true ) {
// 0
backupReg0i = R0i.x;
backupReg1i = R0i.y;
PV0i.x = floatBitsToInt(intBitsToFloat(backupReg0i) * intBitsToFloat(0x3d800000));
PV0i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R8i.x), intBitsToFloat(R8i.x)));
R127i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R5i.y), intBitsToFloat(R5i.w)));
PV0i.w = floatBitsToInt(intBitsToFloat(backupReg1i) * intBitsToFloat(0x3d800000));
R127i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R5i.z), intBitsToFloat(R5i.w)));
PS0i = R127i.w;
// 1
backupReg0i = R5i.w;
R127i.x = floatBitsToInt(floor(intBitsToFloat(PV0i.x)));
R123i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R8i.y),intBitsToFloat(R8i.y)) + intBitsToFloat(PV0i.y)));
PV1i.y = R123i.y;
PV1i.z = floatBitsToInt(floor(intBitsToFloat(PV0i.w)));
R5i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R5i.x), intBitsToFloat(backupReg0i)));
R5i.y = R1i.x;
PS1i = R5i.y;
// 2
R125i.x = floatBitsToInt(-(intBitsToFloat(PV1i.y)) + 1.0);
R9i.y = R127i.z;
R127i.z = R2i.x;
R8i.w = R1i.y;
R127i.y = int(uint(intBitsToFloat(PV1i.z)));
PS0i = R127i.y;
// 3
R5i.x = R127i.w;
R1i.y = R1i.z;
R126i.z = R2i.y;
R9i.w = R2i.z;
R9i.x = floatBitsToInt(-(intBitsToFloat(R3i.x)) + uf_blockPS1[2].x);
PS1i = R9i.x;
// 4
R12i.x = 0;
R10i.y = floatBitsToInt(-(intBitsToFloat(R3i.y)) + uf_blockPS1[2].y);
R8i.z = floatBitsToInt(-(intBitsToFloat(R3i.z)) + uf_blockPS1[2].z);
R12i.y = 0;
PS0i = R12i.y;
// 5
R0i.x = floatBitsToInt(uf_blockPS10[6].x) & 0x0000ffff;
R13i.y = 0;
R12i.z = 0;
R2i.w = int(floatBitsToUint(uf_blockPS10[6].x) >> uint(0x00000010));
R126i.x = int(uint(R127i.y) * uint(0x00000050));
PS1i = R126i.x;
// 6
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R9i.x),intBitsToFloat(R10i.y),intBitsToFloat(R8i.z),-0.0),vec4(intBitsToFloat(R9i.x),intBitsToFloat(R10i.y),intBitsToFloat(R8i.z),0.0)));
PV0i.x = tempi.x;
PV0i.y = tempi.x;
PV0i.z = tempi.x;
PV0i.w = tempi.x;
R127i.w = tempi.x;
PS0i = int(uint(intBitsToFloat(R127i.x)));
// 7
PV1i.w = R126i.x + PS0i;
R5i.z = floatBitsToInt(sqrt(intBitsToFloat(R125i.x)));
PS1i = R5i.z;
// 8
R1i.x = PV1i.w << 0x00000002;
R11i.y = PV1i.w << 0x00000005;
R1i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PS1i), intBitsToFloat(R127i.z)));
R1i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PS1i), intBitsToFloat(R126i.z)));
tempResultf = 1.0 / sqrt(intBitsToFloat(R127i.w));
R10i.x = floatBitsToInt(tempResultf);
PS0i = R10i.x;
}
if( activeMaskStackC[1] == true ) {
R4i.xyz = floatBitsToInt(vec3(0.0,0.0,0.0));
}
if( activeMaskStackC[1] == true ) {
// 0
R126i.x = floatBitsToInt(dot(vec4(intBitsToFloat(R8i.x),intBitsToFloat(R8i.y),intBitsToFloat(R1i.z),-0.0),vec4(intBitsToFloat(R5i.w),intBitsToFloat(R5i.y),1.0,0.0)));
PV0i.x = R126i.x;
PV0i.y = R126i.x;
PV0i.z = R126i.x;
PV0i.w = R126i.x;
R122i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R8i.y),intBitsToFloat(R8i.w)) + intBitsToFloat(R1i.w)));
PS0i = R122i.x;
// 1
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R8i.x),intBitsToFloat(R8i.y),intBitsToFloat(R5i.z),-0.0),vec4(intBitsToFloat(R5i.x),intBitsToFloat(R1i.y),intBitsToFloat(R9i.w),0.0)));
PV1i.x = tempi.x;
PV1i.y = tempi.x;
PV1i.z = tempi.x;
PV1i.w = tempi.x;
R127i.z = tempi.x;
R127i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R8i.x),intBitsToFloat(R9i.y)) + intBitsToFloat(PS0i)));
PS1i = R127i.y;
// 2
backupReg0i = R4i.x;
R4i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R9i.x), intBitsToFloat(R10i.x)));
R0i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R10i.y), intBitsToFloat(R10i.x)));
PV0i.z = backupReg0i << R2i.w;
R3i.w = R11i.y + 0x00000e10;
R11i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R8i.z), intBitsToFloat(R10i.x)));
PS0i = R11i.z;
// 3
backupReg0i = R0i.x;
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R126i.x),intBitsToFloat(R127i.y),intBitsToFloat(R127i.z),-0.0),vec4(intBitsToFloat(R126i.x),intBitsToFloat(R127i.y),intBitsToFloat(R127i.z),0.0)));
PV1i.x = tempi.x;
PV1i.y = tempi.x;
PV1i.z = tempi.x;
PV1i.w = tempi.x;
PS1i = int(uint(PV0i.z) >> uint(backupReg0i));
// 4
R6i.z = floatBitsToInt(uf_blockPS11[0].x) + floatBitsToInt(uf_blockPS11[0].y);
R5i.w = PS1i & 0x0000ffff;
tempResultf = 1.0 / sqrt(intBitsToFloat(PV1i.x));
PS0i = floatBitsToInt(tempResultf);
// 5
R10i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R126i.x), intBitsToFloat(PS0i)));
R10i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R127i.y), intBitsToFloat(PS0i)));
R10i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R127i.z), intBitsToFloat(PS0i)));
}
while( activeMaskStackC[1] == true )
{
if( activeMaskStackC[1] == true ) {
// 0
R1i.z = (R5i.w > R13i.y)?int(0xFFFFFFFF):int(0x0);
// 1
predResult = (R1i.z != 0);
if( predResult == false ) break;
}
if( activeMaskStackC[1] == true ) {
// 0
backupReg0i = R13i.y;
backupReg0i = R13i.y;
R8i.x = 0;
R13i.y = backupReg0i + int(1);
PV0i.w = R3i.w + backupReg0i;
// 1
R1i.x = PV0i.w << 0x00000002;
}
if( activeMaskStackC[1] == true ) {
R1i.z = floatBitsToInt(vec3(0.0,0.0,0.0).x);
}
if( activeMaskStackC[1] == true ) {
// 0
PV0i.y = R1i.z << R2i.w;
// 1
PV1i.w = int(uint(PV0i.y) >> uint(R0i.x));
// 2
PV0i.z = PV1i.w & 0x0000ffff;
// 3
PS1i = PV0i.z * 0x00000005;
// 4
R1i.y = PS1i + 0x00000004;
R1i.w = PS1i + 0x00000003;
}
if( activeMaskStackC[1] == true ) {
R5i.xyz = floatBitsToInt(uf_blockPS11[R1i.w].xyz);
R1i.xyz = floatBitsToInt(uf_blockPS11[R1i.y].xyz);
}
if( activeMaskStackC[1] == true ) {
// 0
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R10i.x),intBitsToFloat(R10i.y),intBitsToFloat(R10i.z),intBitsToFloat(R10i.z)),vec4(-(intBitsToFloat(R5i.x)),-(intBitsToFloat(R5i.y)),-(intBitsToFloat(R5i.z)),-(intBitsToFloat(R8i.x)))));
PV0i.x = tempi.x;
PV0i.y = tempi.x;
PV0i.z = tempi.x;
PV0i.w = tempi.x;
// 1
PV1i.x = floatBitsToInt(intBitsToFloat(PV0i.x) + 1.0);
PV1i.x = floatBitsToInt(intBitsToFloat(PV1i.x) / 2.0);
// 2
PV0i.w = floatBitsToInt(max(intBitsToFloat(PV1i.x), 0.0));
// 3
backupReg0i = R12i.x;
backupReg1i = R12i.y;
backupReg2i = R12i.z;
R12i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R1i.x),intBitsToFloat(PV0i.w)) + intBitsToFloat(backupReg0i)));
R12i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R1i.y),intBitsToFloat(PV0i.w)) + intBitsToFloat(backupReg1i)));
R12i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R1i.z),intBitsToFloat(PV0i.w)) + intBitsToFloat(backupReg2i)));
}
}
if( activeMaskStackC[1] == true ) {
activeMaskStack[1] = activeMaskStack[0];
activeMaskStackC[2] = activeMaskStackC[1];
// 0
PV0i.z = R4i.y << R2i.w;
// 1
PV1i.y = int(uint(PV0i.z) >> uint(R0i.x));
// 2
R9i.x = PV1i.y & 0x0000ffff;
// 3
predResult = (R9i.x > 0);
activeMaskStack[1] = predResult;
activeMaskStackC[2] = predResult == true && activeMaskStackC[1] == true;
}
else {
activeMaskStack[1] = false;
activeMaskStackC[2] = false;
}
if( activeMaskStackC[2] == true ) {
// 0
R5i.w = 0;
}
while( activeMaskStackC[2] == true )
{
if( activeMaskStackC[2] == true ) {
// 0
R1i.y = (R9i.x > R5i.w)?int(0xFFFFFFFF):int(0x0);
// 1
predResult = (R1i.y != 0);
if( predResult == false ) break;
}
if( activeMaskStackC[2] == true ) {
// 0
backupReg0i = R5i.w;
PV0i.y = R3i.w + R5i.w;
R5i.w = backupReg0i + int(1);
// 1
R1i.x = PV0i.y << 0x00000002;
}
if( activeMaskStackC[2] == true ) {
R1i.x = floatBitsToInt(0.0);
}
if( activeMaskStackC[2] == true ) {
// 0
PV0i.w = R1i.x << R2i.w;
// 1
PV1i.z = int(uint(PV0i.w) >> uint(R0i.x));
// 2
PV0i.y = PV1i.z & 0x0000ffff;
// 3
PV1i.x = floatBitsToInt(uf_blockPS11[0].x) + PV0i.y;
// 4
PS0i = PV1i.x * 0x00000005;
// 5
R1i.x = PS0i + 0x00000004;
R1i.z = PS0i + int(1);
R1i.w = PS0i + 0x00000005;
}
if( activeMaskStackC[2] == true ) {
R5i.xyz = floatBitsToInt(uf_blockPS11[R1i.z].xyz);
R8i.xy = floatBitsToInt(uf_blockPS11[R1i.w].xy);
R1i.xyz = floatBitsToInt(uf_blockPS11[R1i.x].xyz);
}
if( activeMaskStackC[2] == true ) {
// 0
R127i.xyz = floatBitsToInt(vec3(-(intBitsToFloat(R3i.x)),-(intBitsToFloat(R3i.y)),-(intBitsToFloat(R3i.z))) + vec3(intBitsToFloat(R5i.x),intBitsToFloat(R5i.y),intBitsToFloat(R5i.z)));
PV0i.x = R127i.x;
PV0i.y = R127i.y;
PV0i.z = R127i.z;
PV0i.w = floatBitsToInt(intBitsToFloat(R8i.x) + -(intBitsToFloat(R8i.y)));
// 1
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(PV0i.x),intBitsToFloat(PV0i.y),intBitsToFloat(PV0i.z),-0.0),vec4(intBitsToFloat(PV0i.x),intBitsToFloat(PV0i.y),intBitsToFloat(PV0i.z),0.0)));
PV1i.x = tempi.x;
PV1i.y = tempi.x;
PV1i.z = tempi.x;
PV1i.w = tempi.x;
R126i.z = floatBitsToInt(1.0 / intBitsToFloat(PV0i.w));
PS1i = R126i.z;
// 2
PS0i = floatBitsToInt(sqrt(intBitsToFloat(PV1i.x)));
// 3
PV1i.x = floatBitsToInt(-(intBitsToFloat(R8i.y)) + intBitsToFloat(PS0i));
PS1i = floatBitsToInt(1.0 / intBitsToFloat(PS0i));
// 4
PV0i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R127i.x), intBitsToFloat(PS1i)));
PV0i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R127i.y), intBitsToFloat(PS1i)));
PV0i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R127i.z), intBitsToFloat(PS1i)));
R127i.w = floatBitsToInt((mul_nonIEEE(-(intBitsToFloat(PV1i.x)),intBitsToFloat(R126i.z)) + 1.0));
R127i.w = clampFI32(R127i.w);
PV0i.w = R127i.w;
// 5
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R10i.x),intBitsToFloat(R10i.y),intBitsToFloat(R10i.z),-0.0),vec4(intBitsToFloat(PV0i.x),intBitsToFloat(PV0i.y),intBitsToFloat(PV0i.z),0.0)));
PV1i.x = tempi.x;
PV1i.y = tempi.x;
PV1i.z = tempi.x;
PV1i.w = tempi.x;
R127i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R1i.x), intBitsToFloat(PV0i.w)));
PS1i = R127i.z;
// 6
PV0i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R1i.z), intBitsToFloat(R127i.w)));
PV0i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R1i.y), intBitsToFloat(R127i.w)));
PV0i.w = floatBitsToInt(max(intBitsToFloat(PV1i.x), 0.0));
// 7
backupReg0i = R12i.x;
backupReg1i = R12i.y;
backupReg2i = R12i.z;
R12i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV0i.w),intBitsToFloat(R127i.z)) + intBitsToFloat(backupReg0i)));
R12i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV0i.w),intBitsToFloat(PV0i.y)) + intBitsToFloat(backupReg1i)));
R12i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV0i.w),intBitsToFloat(PV0i.x)) + intBitsToFloat(backupReg2i)));
}
}
activeMaskStackC[1] = activeMaskStack[0] == true && activeMaskStackC[0] == true;
if( activeMaskStackC[1] == true ) {
activeMaskStack[1] = activeMaskStack[0];
activeMaskStackC[2] = activeMaskStackC[1];
// 0
PV0i.y = R4i.z << R2i.w;
// 1
backupReg0i = R0i.x;
PV1i.x = int(uint(PV0i.y) >> uint(backupReg0i));
// 2
R5i.w = PV1i.x & 0x0000ffff;
// 3
predResult = (R5i.w > 0);
activeMaskStack[1] = predResult;
activeMaskStackC[2] = predResult == true && activeMaskStackC[1] == true;
}
else {
activeMaskStack[1] = false;
activeMaskStackC[2] = false;
}
if( activeMaskStackC[2] == true ) {
// 0
R4i.z = 0;
}
while( activeMaskStackC[2] == true )
{
if( activeMaskStackC[2] == true ) {
// 0
R1i.x = (R5i.w > R4i.z)?int(0xFFFFFFFF):int(0x0);
// 1
predResult = (R1i.x != 0);
if( predResult == false ) break;
}
if( activeMaskStackC[2] == true ) {
// 0
backupReg0i = R4i.z;
backupReg0i = R4i.z;
R4i.z = backupReg0i + int(1);
PV0i.w = R3i.w + backupReg0i;
// 1
R1i.x = PV0i.w << 0x00000002;
}
if( activeMaskStackC[2] == true ) {
R1i.y = floatBitsToInt(vec2(0.0,0.0).x);
}
if( activeMaskStackC[2] == true ) {
// 0
PV0i.z = R1i.y << R2i.w;
// 1
PV1i.w = int(uint(PV0i.z) >> uint(R0i.x));
// 2
PV0i.y = PV1i.w & 0x0000ffff;
// 3
PV1i.x = R6i.z + PV0i.y;
// 4
PS0i = PV1i.x * 0x00000005;
// 5
R1i.x = PS0i + 0x00000003;
R1i.y = PS0i + 0x00000005;
R1i.z = PS0i + 0x00000004;
R1i.w = PS0i + int(1);
}
if( activeMaskStackC[2] == true ) {
R5i.xyz = floatBitsToInt(uf_blockPS11[R1i.w].xyz);
R8i.xyz = floatBitsToInt(uf_blockPS11[R1i.x].xyz);
R9i.xyzw = floatBitsToInt(uf_blockPS11[R1i.y].xyzw);
R1i.xyz = floatBitsToInt(uf_blockPS11[R1i.z].xyz);
}
if( activeMaskStackC[2] == true ) {
// 0
R127i.xyz = floatBitsToInt(vec3(-(intBitsToFloat(R3i.x)),-(intBitsToFloat(R3i.y)),-(intBitsToFloat(R3i.z))) + vec3(intBitsToFloat(R5i.x),intBitsToFloat(R5i.y),intBitsToFloat(R5i.z)));
PV0i.x = R127i.x;
PV0i.y = R127i.y;
PV0i.z = R127i.z;
PV0i.w = floatBitsToInt(intBitsToFloat(R9i.x) + -(intBitsToFloat(R9i.y)));
R127i.w = floatBitsToInt(-(intBitsToFloat(R9i.z)) + intBitsToFloat(R9i.w));
PS0i = R127i.w;
// 1
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(PV0i.x),intBitsToFloat(PV0i.y),intBitsToFloat(PV0i.z),-0.0),vec4(intBitsToFloat(PV0i.x),intBitsToFloat(PV0i.y),intBitsToFloat(PV0i.z),0.0)));
PV1i.x = tempi.x;
PV1i.y = tempi.x;
PV1i.z = tempi.x;
PV1i.w = tempi.x;
R126i.x = floatBitsToInt(1.0 / intBitsToFloat(PV0i.w));
PS1i = R126i.x;
// 2
PS0i = floatBitsToInt(sqrt(intBitsToFloat(PV1i.x)));
// 3
PV1i.w = floatBitsToInt(-(intBitsToFloat(R9i.y)) + intBitsToFloat(PS0i));
PS1i = floatBitsToInt(1.0 / intBitsToFloat(PS0i));
// 4
backupReg0i = R127i.x;
backupReg1i = R127i.y;
backupReg2i = R127i.w;
R127i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(backupReg0i), intBitsToFloat(PS1i)));
PV0i.x = R127i.x;
R127i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(backupReg1i), intBitsToFloat(PS1i)));
PV0i.y = R127i.y;
PV0i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R127i.z), intBitsToFloat(PS1i)));
R127i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV1i.w), intBitsToFloat(R126i.x)));
R127i.w = clampFI32(R127i.w);
R127i.z = floatBitsToInt(1.0 / intBitsToFloat(backupReg2i));
PS0i = R127i.z;
// 5
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R8i.x),intBitsToFloat(R8i.y),intBitsToFloat(R8i.z),-0.0),vec4(-(intBitsToFloat(PV0i.x)),-(intBitsToFloat(PV0i.y)),-(intBitsToFloat(PV0i.z)),0.0)));
PV1i.x = tempi.x;
PV1i.y = tempi.x;
PV1i.z = tempi.x;
PV1i.w = tempi.x;
PS1i = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R10i.z), intBitsToFloat(PV0i.z)));
// 6
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R10i.x),intBitsToFloat(R10i.y),intBitsToFloat(PS1i),-0.0),vec4(intBitsToFloat(R127i.x),intBitsToFloat(R127i.y),1.0,0.0)));
PV0i.x = tempi.x;
PV0i.y = tempi.x;
PV0i.z = tempi.x;
PV0i.w = tempi.x;
PS0i = floatBitsToInt(-(intBitsToFloat(R9i.z)) + intBitsToFloat(PV1i.x));
// 7
PV1i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PS0i), intBitsToFloat(R127i.z)));
PV1i.y = clampFI32(PV1i.y);
PV1i.z = floatBitsToInt(max(intBitsToFloat(PV0i.x), 0.0));
// 8
R123i.x = floatBitsToInt((mul_nonIEEE(-(intBitsToFloat(R127i.w)),intBitsToFloat(PV1i.y)) + intBitsToFloat(PV1i.y)));
PV0i.x = R123i.x;
PV0i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R1i.x), intBitsToFloat(PV1i.z)));
PV0i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R1i.y), intBitsToFloat(PV1i.z)));
PV0i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R1i.z), intBitsToFloat(PV1i.z)));
// 9
backupReg0i = R12i.x;
backupReg1i = R12i.y;
backupReg2i = R12i.z;
R12i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV0i.x),intBitsToFloat(PV0i.y)) + intBitsToFloat(backupReg0i)));
R12i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV0i.x),intBitsToFloat(PV0i.z)) + intBitsToFloat(backupReg1i)));
R12i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV0i.x),intBitsToFloat(PV0i.w)) + intBitsToFloat(backupReg2i)));
}
}
activeMaskStackC[1] = activeMaskStack[0] == true && activeMaskStackC[0] == true;
if( activeMaskStackC[1] == true ) {
R1i.xyzw = floatBitsToInt(texture(textureUnitPS10, intBitsToFloat(R7i.xy)).xyzw);
}
if( activeMaskStackC[1] == true ) {
// 0
R5i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R7i.z),intBitsToFloat(R1i.x)) + intBitsToFloat(R7i.w)));
R5i.y = floatBitsToInt((mul_nonIEEE(uf_blockPS2[0].y,uf_blockPS2[0].w) + intBitsToFloat(R12i.y)));
R5i.z = floatBitsToInt((mul_nonIEEE(uf_blockPS2[0].z,uf_blockPS2[0].w) + intBitsToFloat(R12i.z)));
R2i.w = floatBitsToInt((mul_nonIEEE(uf_blockPS2[0].x,uf_blockPS2[0].w) + intBitsToFloat(R12i.x)));
tempResultf = log2(intBitsToFloat(R1i.w));
if( isinf(tempResultf) == true ) tempResultf = -3.40282347E+38F;
PS0i = floatBitsToInt(tempResultf);
// 1
PV1i.x = floatBitsToInt(mul_nonIEEE(uf_blockPS2[1].w, intBitsToFloat(PS0i)));
R127i.yzw = floatBitsToInt(vec3(-(uf_blockPS2[1].y),-(uf_blockPS2[1].z),-(uf_blockPS2[1].x)) + vec3(1.0,1.0,1.0));
R8i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R7i.z),intBitsToFloat(R1i.y)) + intBitsToFloat(R7i.w)));
PS1i = R8i.z;
// 2
backupReg0i = R2i.z;
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R2i.x),intBitsToFloat(R2i.y),intBitsToFloat(backupReg0i),-0.0),vec4(-(uf_blockPS8[12].x),-(uf_blockPS8[12].y),-(uf_blockPS8[12].z),0.0)));
PV0i.x = tempi.x;
PV0i.y = tempi.x;
PV0i.z = tempi.x;
PV0i.w = tempi.x;
R2i.z = tempi.x;
PS0i = floatBitsToInt(exp2(intBitsToFloat(PV1i.x)));
// 3
backupReg0i = R1i.z;
R1i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R127i.w),intBitsToFloat(PS0i)) + uf_blockPS2[1].x));
R1i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R127i.z),intBitsToFloat(PS0i)) + uf_blockPS2[1].z));
R1i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R7i.z),intBitsToFloat(backupReg0i)) + intBitsToFloat(R7i.w)));
R1i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R127i.y),intBitsToFloat(PS0i)) + uf_blockPS2[1].y));
// 4
PV0i.y = ((0.0 >= intBitsToFloat(R2i.z))?int(0xFFFFFFFF):int(0x0));
// 5
R0i.x = ((PV0i.y == 0)?(0):(0x3f800000));
R3i.w = ((PV0i.y == 0)?(0):(0));
}
if( activeMaskStackC[1] == true ) {
activeMaskStack[1] = activeMaskStack[0];
activeMaskStackC[2] = activeMaskStackC[1];
// 0
PV0i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R2i.w), uf_blockPS10[1].y));
PV0i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R5i.z), uf_blockPS10[1].y));
PV0i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R5i.y), uf_blockPS10[1].y));
// 1
PV1i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV0i.w), intBitsToFloat(R1i.w)));
PV1i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV0i.x), intBitsToFloat(R1i.x)));
PV1i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV0i.y), intBitsToFloat(R1i.y)));
// 2
backupReg0i = R5i.x;
R5i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(backupReg0i),uf_blockPS10[0].w) + intBitsToFloat(PV1i.z)));
R5i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R8i.z),uf_blockPS10[0].w) + intBitsToFloat(PV1i.x)));
R4i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R1i.z),uf_blockPS10[0].w) + intBitsToFloat(PV1i.w)));
// 3
backupReg0i = R0i.x;
predResult = (backupReg0i == 0);
activeMaskStack[1] = predResult;
activeMaskStackC[2] = predResult == true && activeMaskStackC[1] == true;
}
else {
activeMaskStack[1] = false;
activeMaskStackC[2] = false;
}
if( activeMaskStackC[2] == true ) {
activeMaskStack[2] = activeMaskStack[1];
activeMaskStackC[3] = activeMaskStackC[2];
// 0
PV0i.z = R2i.z;
PV0i.z = floatBitsToInt(intBitsToFloat(PV0i.z) * 4.0);
PV0i.z = clampFI32(PV0i.z);
R127i.w = floatBitsToInt(max(intBitsToFloat(R2i.z), 0.0));
PV0i.w = R127i.w;
// 1
PV1i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV0i.z), intBitsToFloat(PV0i.z)));
R123i.y = floatBitsToInt((intBitsToFloat(0xc0000000) * intBitsToFloat(PV0i.z) + intBitsToFloat(0x40400000)));
PV1i.y = R123i.y;
PV1i.z = floatBitsToInt(-(intBitsToFloat(PV0i.w)) + 1.0);
// 2
R123i.x = floatBitsToInt((mul_nonIEEE(-(intBitsToFloat(R127i.w)),intBitsToFloat(PV1i.z)) + intBitsToFloat(PV1i.z)));
PV0i.x = R123i.x;
R5i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV1i.x), intBitsToFloat(PV1i.y)));
// 3
R7i.y = floatBitsToInt((mul_nonIEEE(-(intBitsToFloat(R127i.w)),intBitsToFloat(PV0i.x)) + intBitsToFloat(PV0i.x)));
// 4
predResult = (uf_blockPS8[13].x >= -(intBitsToFloat(R4i.w)));
activeMaskStack[2] = predResult;
activeMaskStackC[3] = predResult == true && activeMaskStackC[2] == true;
}
else {
activeMaskStack[2] = false;
activeMaskStackC[3] = false;
}
if( activeMaskStackC[3] == true ) {
// 0
R127i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R7i.y),uf_blockPS8[16].y) + uf_blockPS8[16].x));
R3i.w = 0x3f800000;
PV0i.w = R3i.w;
// 1
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R3i.x),intBitsToFloat(R3i.y),intBitsToFloat(R3i.z),intBitsToFloat(PV0i.w)),vec4(uf_blockPS8[3].x,uf_blockPS8[3].y,uf_blockPS8[3].z,uf_blockPS8[3].w)));
PV1i.x = tempi.x;
PV1i.y = tempi.x;
PV1i.z = tempi.x;
PV1i.w = tempi.x;
// 2
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R3i.x),intBitsToFloat(R3i.y),intBitsToFloat(R3i.z),intBitsToFloat(R3i.w)),vec4(uf_blockPS8[2].x,uf_blockPS8[2].y,uf_blockPS8[2].z,uf_blockPS8[2].w)));
PV0i.x = tempi.x;
PV0i.y = tempi.x;
PV0i.z = tempi.x;
PV0i.w = tempi.x;
R127i.y = floatBitsToInt(1.0 / intBitsToFloat(PV1i.x));
PS0i = R127i.y;
// 3
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R3i.x),intBitsToFloat(R3i.y),intBitsToFloat(R3i.z),intBitsToFloat(R3i.w)),vec4(uf_blockPS8[0].x,uf_blockPS8[0].y,uf_blockPS8[0].z,uf_blockPS8[0].w)));
PV1i.x = tempi.x;
PV1i.y = tempi.x;
PV1i.z = tempi.x;
PV1i.w = tempi.x;
R127i.z = tempi.x;
PS1i = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV0i.x), intBitsToFloat(PS0i)));
// 4
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R3i.x),intBitsToFloat(R3i.y),intBitsToFloat(R3i.z),intBitsToFloat(R3i.w)),vec4(uf_blockPS8[1].x,uf_blockPS8[1].y,uf_blockPS8[1].z,uf_blockPS8[1].w)));
PV0i.x = tempi.x;
PV0i.y = tempi.x;
PV0i.z = tempi.x;
PV0i.w = tempi.x;
PS0i = floatBitsToInt(-(intBitsToFloat(R127i.x)) + intBitsToFloat(PS1i));
PS0i = clampFI32(PS0i);
// 5
PV1i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R127i.z), intBitsToFloat(R127i.y)));
R4i.y = floatBitsToInt(-(uf_blockPS8[13].x) + uf_blockPS8[21].x);
R1i.z = PS0i;
PV1i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV0i.x), intBitsToFloat(R127i.y)));
R2i.w = PS0i;
PS1i = R2i.w;
// 6
R1i.x = floatBitsToInt((uf_blockPS8[23].x /resScale * 0.5 + intBitsToFloat(PV1i.x)));
R1i.y = floatBitsToInt((uf_blockPS8[23].y /resScale * 0.5 + intBitsToFloat(PV1i.w)));
R2i.z = floatBitsToInt((-(uf_blockPS8[23].x) /resScale * 0.5 + intBitsToFloat(PV1i.x)));
R2i.y = floatBitsToInt((-(uf_blockPS8[23].y) /resScale * 0.5 + intBitsToFloat(PV1i.w)));
PS0i = R2i.y;
}
if( activeMaskStackC[3] == true ) {
R1i.w = floatBitsToInt(texture(textureUnitPS13, vec3(intBitsToFloat(R1i.xy), intBitsToFloat(R1i.w))));
R2i.z = floatBitsToInt(texture(textureUnitPS13, vec3(intBitsToFloat(R2i.zy), intBitsToFloat(R2i.w))));
}
if( activeMaskStackC[3] == true ) {
activeMaskStack[3] = activeMaskStack[2];
activeMaskStackC[4] = activeMaskStackC[3];
// 0
R1i.z = floatBitsToInt(intBitsToFloat(R1i.w) + intBitsToFloat(R2i.z));
R1i.z = floatBitsToInt(intBitsToFloat(R1i.z) / 2.0);
R2i.z = floatBitsToInt(-(intBitsToFloat(R4i.w)) + intBitsToFloat(R4i.y));
PS0i = R2i.z;
// 1
predResult = (intBitsToFloat(R2i.z) > 0.0);
activeMaskStack[3] = predResult;
activeMaskStackC[4] = predResult == true && activeMaskStackC[3] == true;
}
else {
activeMaskStack[3] = false;
activeMaskStackC[4] = false;
}
if( activeMaskStackC[4] == true ) {
// 0
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R3i.x),intBitsToFloat(R3i.y),intBitsToFloat(R3i.z),intBitsToFloat(R3i.w)),vec4(uf_blockPS8[7].x,uf_blockPS8[7].y,uf_blockPS8[7].z,uf_blockPS8[7].w)));
PV0i.x = tempi.x;
PV0i.y = tempi.x;
PV0i.z = tempi.x;
PV0i.w = tempi.x;
// 1
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R3i.x),intBitsToFloat(R3i.y),intBitsToFloat(R3i.z),intBitsToFloat(R3i.w)),vec4(uf_blockPS8[6].x,uf_blockPS8[6].y,uf_blockPS8[6].z,uf_blockPS8[6].w)));
PV1i.x = tempi.x;
PV1i.y = tempi.x;
PV1i.z = tempi.x;
PV1i.w = tempi.x;
R127i.z = floatBitsToInt(1.0 / intBitsToFloat(PV0i.x));
PS1i = R127i.z;
// 2
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R3i.x),intBitsToFloat(R3i.y),intBitsToFloat(R3i.z),intBitsToFloat(R3i.w)),vec4(uf_blockPS8[4].x,uf_blockPS8[4].y,uf_blockPS8[4].z,uf_blockPS8[4].w)));
PV0i.x = tempi.x;
PV0i.y = tempi.x;
PV0i.z = tempi.x;
PV0i.w = tempi.x;
R127i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV1i.x), intBitsToFloat(PS1i)));
PS0i = R127i.w;
// 3
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R3i.x),intBitsToFloat(R3i.y),intBitsToFloat(R3i.z),intBitsToFloat(R3i.w)),vec4(uf_blockPS8[5].x,uf_blockPS8[5].y,uf_blockPS8[5].z,uf_blockPS8[5].w)));
PV1i.x = tempi.x;
PV1i.y = tempi.x;
PV1i.z = tempi.x;
PV1i.w = tempi.x;
PS1i = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV0i.x), intBitsToFloat(R127i.z)));
// 4
R123i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R7i.y),uf_blockPS8[17].y) + uf_blockPS8[17].x));
PV0i.x = R123i.x;
PV0i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV1i.x), intBitsToFloat(R127i.z)));
R3i.z = floatBitsToInt((uf_blockPS8[24].x /resScale * 0.5 + intBitsToFloat(PS1i)));
R1i.x = floatBitsToInt((-(uf_blockPS8[24].x) /resScale * 0.5 + intBitsToFloat(PS1i)));
PS0i = R1i.x;
// 5
R3i.y = floatBitsToInt((uf_blockPS8[24].y /resScale * 0.5 + intBitsToFloat(PV0i.y)));
PV1i.z = floatBitsToInt(-(intBitsToFloat(PV0i.x)) + intBitsToFloat(R127i.w));
PV1i.z = clampFI32(PV1i.z);
R1i.y = floatBitsToInt((-(uf_blockPS8[24].y) /resScale * 0.5 + intBitsToFloat(PV0i.y)));
PS1i = R1i.y;
// 6
R3i.w = PV1i.z;
R1i.w = PV1i.z;
PS0i = R1i.w;
}
if( activeMaskStackC[4] == true ) {
R3i.y = floatBitsToInt(texture(textureUnitPS14, vec3(intBitsToFloat(R3i.zy), intBitsToFloat(R3i.w))));
R1i.x = floatBitsToInt(texture(textureUnitPS14, vec3(intBitsToFloat(R1i.xy), intBitsToFloat(R1i.w))));
}
if( activeMaskStackC[4] == true ) {
// 0
PV0i.z = floatBitsToInt(intBitsToFloat(R3i.y) + intBitsToFloat(R1i.x));
PV0i.z = floatBitsToInt(intBitsToFloat(PV0i.z) / 2.0);
PS0i = floatBitsToInt(1.0 / uf_blockPS8[21].x);
// 1
PV1i.x = floatBitsToInt(-(intBitsToFloat(R1i.z)) + intBitsToFloat(PV0i.z));
PV1i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R2i.z), intBitsToFloat(PS0i)));
// 2
backupReg0i = R1i.z;
R1i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV1i.x),intBitsToFloat(PV1i.y)) + intBitsToFloat(backupReg0i)));
}
activeMaskStackC[3] = activeMaskStack[2] == true && activeMaskStackC[2] == true;
activeMaskStack[2] = activeMaskStack[2] == false;
activeMaskStackC[3] = activeMaskStack[2] == true && activeMaskStackC[2] == true;
if( activeMaskStackC[3] == true ) {
// 0
R127i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R7i.y),uf_blockPS8[17].y) + uf_blockPS8[17].x));
R1i.w = 0x3f800000;
PV0i.w = R1i.w;
// 1
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R3i.x),intBitsToFloat(R3i.y),intBitsToFloat(R3i.z),intBitsToFloat(PV0i.w)),vec4(uf_blockPS8[7].x,uf_blockPS8[7].y,uf_blockPS8[7].z,uf_blockPS8[7].w)));
PV1i.x = tempi.x;
PV1i.y = tempi.x;
PV1i.z = tempi.x;
PV1i.w = tempi.x;
// 2
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R3i.x),intBitsToFloat(R3i.y),intBitsToFloat(R3i.z),intBitsToFloat(R1i.w)),vec4(uf_blockPS8[6].x,uf_blockPS8[6].y,uf_blockPS8[6].z,uf_blockPS8[6].w)));
PV0i.x = tempi.x;
PV0i.y = tempi.x;
PV0i.z = tempi.x;
PV0i.w = tempi.x;
R127i.y = floatBitsToInt(1.0 / intBitsToFloat(PV1i.x));
PS0i = R127i.y;
// 3
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R3i.x),intBitsToFloat(R3i.y),intBitsToFloat(R3i.z),intBitsToFloat(R1i.w)),vec4(uf_blockPS8[4].x,uf_blockPS8[4].y,uf_blockPS8[4].z,uf_blockPS8[4].w)));
PV1i.x = tempi.x;
PV1i.y = tempi.x;
PV1i.z = tempi.x;
PV1i.w = tempi.x;
R127i.z = tempi.x;
PS1i = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV0i.x), intBitsToFloat(PS0i)));
// 4
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R3i.x),intBitsToFloat(R3i.y),intBitsToFloat(R3i.z),intBitsToFloat(R1i.w)),vec4(uf_blockPS8[5].x,uf_blockPS8[5].y,uf_blockPS8[5].z,uf_blockPS8[5].w)));
PV0i.x = tempi.x;
PV0i.y = tempi.x;
PV0i.z = tempi.x;
PV0i.w = tempi.x;
R126i.y = floatBitsToInt(-(intBitsToFloat(R127i.x)) + intBitsToFloat(PS1i));
R126i.y = clampFI32(R126i.y);
PS0i = R126i.y;
// 5
PV1i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R127i.z), intBitsToFloat(R127i.y)));
PV1i.z = floatBitsToInt(-(uf_blockPS8[13].x) + uf_blockPS8[14].x);
PV1i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV0i.x), intBitsToFloat(R127i.y)));
R3i.w = PS0i;
PS1i = R3i.w;
// 6
R3i.x = floatBitsToInt((uf_blockPS8[24].x /resScale * 0.5 + intBitsToFloat(PV1i.x)));
R3i.y = floatBitsToInt((uf_blockPS8[24].y /resScale * 0.5 + intBitsToFloat(PV1i.w)));
R1i.z = floatBitsToInt((-(uf_blockPS8[24].x) /resScale * 0.5 + intBitsToFloat(PV1i.x)));
PV0i.w = floatBitsToInt(intBitsToFloat(PV1i.z) * intBitsToFloat(0x3dcccccd));
R1i.y = floatBitsToInt((-(uf_blockPS8[24].y) /resScale * 0.5 + intBitsToFloat(PV1i.w)));
PS0i = R1i.y;
// 7
R2i.y = floatBitsToInt(-(uf_blockPS8[14].x) + intBitsToFloat(PV0i.w));
R1i.w = R126i.y;
R3i.z = floatBitsToInt(1.0 / intBitsToFloat(PV0i.w));
PS1i = R3i.z;
}
if( activeMaskStackC[3] == true ) {
R3i.w = floatBitsToInt(texture(textureUnitPS14, vec3(intBitsToFloat(R3i.xy), intBitsToFloat(R3i.w))));
R1i.z = floatBitsToInt(texture(textureUnitPS14, vec3(intBitsToFloat(R1i.zy), intBitsToFloat(R1i.w))));
}
if( activeMaskStackC[3] == true ) {
// 0
PV0i.x = floatBitsToInt(-(intBitsToFloat(R4i.w)) + intBitsToFloat(R2i.y));
R126i.y = floatBitsToInt(intBitsToFloat(R3i.w) + intBitsToFloat(R1i.z));
R126i.y = floatBitsToInt(intBitsToFloat(R126i.y) / 2.0);
PV0i.y = R126i.y;
// 1
R127i.x = floatBitsToInt(-(intBitsToFloat(PV0i.y)) + 1.0);
PV1i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV0i.x), intBitsToFloat(R3i.z)));
// 2
PV0i.y = floatBitsToInt(max(intBitsToFloat(PV1i.w), 0.0));
// 3
R1i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R127i.x),intBitsToFloat(PV0i.y)) + intBitsToFloat(R126i.y)));
}
activeMaskStackC[2] = activeMaskStack[1] == true && activeMaskStackC[1] == true;
if( activeMaskStackC[2] == true ) {
// 0
R3i.w = floatBitsToInt(min(intBitsToFloat(R5i.w), intBitsToFloat(R1i.z)));
}
activeMaskStackC[1] = activeMaskStack[0] == true && activeMaskStackC[0] == true;
if( activeMaskStackC[1] == true ) {
R2i.xyzw = floatBitsToInt(texture(textureUnitPS0, intBitsToFloat(R6i.xy)).xyzw);
}
if( activeMaskStackC[1] == true ) {
// 0
backupReg0i = R0i.y;
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R10i.x),intBitsToFloat(R10i.y),intBitsToFloat(R10i.z),-0.0),vec4(-(intBitsToFloat(R4i.x)),-(intBitsToFloat(backupReg0i)),-(intBitsToFloat(R11i.z)),0.0)));
tempi.x = floatBitsToInt(intBitsToFloat(tempi.x) * 2.0);
PV0i.x = tempi.x;
PV0i.y = tempi.x;
PV0i.z = tempi.x;
PV0i.w = tempi.x;
R127i.z = floatBitsToInt(-(uf_blockPS3[15].z) + 1.0);
PS0i = R127i.z;
// 1
R123i.x = floatBitsToInt((mul_nonIEEE(-(intBitsToFloat(PV0i.x)),intBitsToFloat(R10i.x)) + -(intBitsToFloat(R4i.x))));
PV1i.x = R123i.x;
R123i.y = floatBitsToInt((mul_nonIEEE(-(intBitsToFloat(PV0i.x)),intBitsToFloat(R10i.y)) + -(intBitsToFloat(R0i.y))));
PV1i.y = R123i.y;
R123i.z = floatBitsToInt((mul_nonIEEE(-(intBitsToFloat(PV0i.x)),intBitsToFloat(R10i.z)) + -(intBitsToFloat(R11i.z))));
PV1i.z = R123i.z;
PV1i.w = floatBitsToInt(-(intBitsToFloat(PS0i)) + 1.0);
R127i.y = floatBitsToInt((mul_nonIEEE(uf_blockPS10[1].z,-(intBitsToFloat(R3i.w))) + uf_blockPS10[1].z));
PS1i = R127i.y;
// 2
redcCUBE(vec4(intBitsToFloat(PV1i.z),intBitsToFloat(PV1i.z),intBitsToFloat(PV1i.x),intBitsToFloat(PV1i.y)),vec4(intBitsToFloat(PV1i.y),intBitsToFloat(PV1i.x),intBitsToFloat(PV1i.z),intBitsToFloat(PV1i.z)),cubeMapSTM,cubeMapFaceId);
R6i.x = floatBitsToInt(cubeMapSTM.x);
R6i.y = floatBitsToInt(cubeMapSTM.y);
R6i.z = floatBitsToInt(cubeMapSTM.z);
R6i.w = cubeMapFaceId;
PV0i.x = R6i.x;
PV0i.y = R6i.y;
PV0i.z = R6i.z;
PV0i.w = R6i.w;
R1i.w = floatBitsToInt(1.0 / intBitsToFloat(PV1i.w));
PS0i = R1i.w;
// 3
backupReg0i = R0i.y;
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R10i.x),intBitsToFloat(R10i.y),intBitsToFloat(R10i.z),-0.0),vec4(intBitsToFloat(R4i.x),intBitsToFloat(backupReg0i),intBitsToFloat(R11i.z),0.0)));
PV1i.x = tempi.x;
PV1i.y = tempi.x;
PV1i.z = tempi.x;
PV1i.w = tempi.x;
PS1i = floatBitsToInt(1.0 / abs(intBitsToFloat(PV0i.z)));
// 4
backupReg0i = R6i.x;
backupReg1i = R6i.y;
backupReg2i = R0i.z;
backupReg3i = R0i.w;
R6i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(backupReg0i),intBitsToFloat(PS1i)) + 1.5));
R6i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(backupReg1i),intBitsToFloat(PS1i)) + 1.5));
PV0i.z = floatBitsToInt(max(intBitsToFloat(PV1i.x), 0.0));
R0i.w = floatBitsToInt(intBitsToFloat(R3i.w) + intBitsToFloat(R127i.y));
R0i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(backupReg2i), intBitsToFloat(backupReg3i)));
PS0i = R0i.x;
// 5
R4i.y = 0;
PV1i.w = floatBitsToInt(-(intBitsToFloat(PV0i.z)) + 1.0);
R3i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R2i.w), uf_blockPS10[5].x));
PS1i = R3i.w;
// 6
R0i.y = floatBitsToInt(intBitsToFloat(PV1i.w) + -(intBitsToFloat(R127i.z)));
}
if( activeMaskStackC[1] == true ) {
R6i.xyz = floatBitsToInt(texture(textureUnitPS9, vec4(redcCUBEReverse(intBitsToFloat(R6i.yx),R6i.w),cubeMapArrayIndex9)).xyz);
}
if( activeMaskStackC[1] == true ) {
// 0
R123i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R0i.w),uf_blockPS8[20].y) + uf_blockPS8[19].y));
PV0i.x = R123i.x;
PV0i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R0i.y), intBitsToFloat(R1i.w)));
PV0i.z = clampFI32(PV0i.z);
R123i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R0i.w),uf_blockPS8[20].x) + uf_blockPS8[19].x));
PV0i.w = R123i.w;
// 1
R123i.x = floatBitsToInt((intBitsToFloat(0xc0000000) * intBitsToFloat(PV0i.z) + intBitsToFloat(0x40400000)));
PV1i.x = R123i.x;
PV1i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV0i.z), intBitsToFloat(PV0i.z)));
R123i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R0i.w),uf_blockPS8[20].z) + uf_blockPS8[19].z));
PV1i.z = R123i.z;
PV1i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R5i.y), intBitsToFloat(PV0i.x)));
PS1i = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R5i.x), intBitsToFloat(PV0i.w)));
// 2
R1i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV1i.w), intBitsToFloat(R2i.y)));
PV0i.x = R1i.x;
R0i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PS1i), intBitsToFloat(R2i.x)));
PV0i.y = R0i.y;
PV0i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R4i.z), intBitsToFloat(PV1i.z)));
PV0i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV1i.y), intBitsToFloat(PV1i.x)));
R127i.w = floatBitsToInt(-(uf_blockPS1[0].z) + uf_blockPS1[0].w);
PS0i = R127i.w;
// 3
R2i.x = floatBitsToInt(-(intBitsToFloat(PV0i.x)) + intBitsToFloat(R6i.y));
R2i.y = floatBitsToInt(-(intBitsToFloat(PV0i.y)) + intBitsToFloat(R6i.x));
R0i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV0i.z), intBitsToFloat(R2i.z)));
PV1i.w = R0i.w;
tempResultf = log2(intBitsToFloat(PV0i.w));
if( isinf(tempResultf) == true ) tempResultf = -3.40282347E+38F;
R2i.z = floatBitsToInt(tempResultf);
PS1i = R2i.z;
// 4
R2i.w = floatBitsToInt(-(intBitsToFloat(PV1i.w)) + intBitsToFloat(R6i.z));
PS0i = floatBitsToInt(1.0 / intBitsToFloat(R127i.w));
// 5
R4i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R0i.x), intBitsToFloat(PS0i)));
}
if( activeMaskStackC[1] == true ) {
// 0
PV0i.y = floatBitsToInt(mul_nonIEEE(uf_blockPS3[15].w, intBitsToFloat(R2i.z)));
// 1
PS1i = floatBitsToInt(exp2(intBitsToFloat(PV0i.y)));
// 2
PV0i.w = floatBitsToInt(mul_nonIEEE(uf_blockPS3[15].y, intBitsToFloat(PS1i)));
// 3
PV1i.z = floatBitsToInt(min(intBitsToFloat(PV0i.w), 1.0));
// 4
R123i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R2i.w),intBitsToFloat(PV1i.z)) + intBitsToFloat(R0i.w)));
PV0i.x = R123i.x;
R123i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R2i.x),intBitsToFloat(PV1i.z)) + intBitsToFloat(R1i.x)));
PV0i.y = R123i.y;
R123i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R2i.y),intBitsToFloat(PV1i.z)) + intBitsToFloat(R0i.y)));
PV0i.z = R123i.z;
// 5
PV1i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV0i.x), uf_blockPS3[20].z));
PV1i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV0i.y), uf_blockPS3[20].y));
PV1i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV0i.z), uf_blockPS3[20].x));
// 6
R3i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV1i.w), uf_blockPS10[2].x));
PV0i.x = R3i.x;
R3i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV1i.z), uf_blockPS10[2].y));
PV0i.y = R3i.y;
R3i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV1i.y), uf_blockPS10[2].z));
PV0i.z = R3i.z;
// 7
R0i.xyz = ivec3(PV0i.x,PV0i.y,PV0i.z);
R0i.w = R3i.w;
// 8
R1i.xyz = ivec3(R4i.x,R4i.y,R4i.y);
R1i.w = R4i.y;
}
// export
passPixelColor0 = vec4(intBitsToFloat(R0i.x), intBitsToFloat(R0i.y), intBitsToFloat(R0i.z), intBitsToFloat(R0i.w));
passPixelColor2 = vec4(intBitsToFloat(R1i.x), intBitsToFloat(R1i.y), intBitsToFloat(R1i.z), intBitsToFloat(R1i.w));
}
