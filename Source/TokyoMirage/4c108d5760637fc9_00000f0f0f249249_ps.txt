<?php
include 'Source/functions.php';
$fullWidth = $argv[1];
$fullHeight = $argv[2];
$scaleFactorX = always_decimal_format($fullWidth / 1280.0);
$scaleFactorY = always_decimal_format($fullHeight / 720.0);
?>

#version 420
#extension GL_ARB_texture_gather : enable
#extension GL_ARB_separate_shader_objects : enable
const float resScale = <?=$scaleFactorX?>; //self shading//shadows
// shader 4c108d5760637fc9
uniform ivec4 uf_remappedPS[33];
layout(binding = 0) uniform sampler2D textureUnitPS0;// Tex0 addr 0x3beca000 res 512x512x1 dim 1 tm: 4 format 0431 compSel: 0 1 2 3 mipView: 0x0 (num 0xa) sliceView: 0x0 (num 0x1) Sampler0 ClampX/Y/Z: 0 0 2 border: 0
layout(binding = 1) uniform sampler2D textureUnitPS1;// Tex1 addr 0x10067000 res 1x1x1 dim 1 tm: 2 format 001a compSel: 0 1 2 3 mipView: 0x0 (num 0x1) sliceView: 0x0 (num 0x1) Sampler1 ClampX/Y/Z: 2 2 2 border: 0
layout(binding = 2) uniform sampler2D textureUnitPS2;// Tex2 addr 0x3be72000 res 512x512x1 dim 1 tm: 4 format 0433 compSel: 0 1 2 3 mipView: 0x0 (num 0xa) sliceView: 0x0 (num 0x1) Sampler2 ClampX/Y/Z: 0 0 2 border: 0
layout(binding = 3) uniform sampler2D textureUnitPS3;// Tex3 addr 0x3be1a000 res 512x512x1 dim 1 tm: 4 format 0235 compSel: 0 1 4 5 mipView: 0x0 (num 0xa) sliceView: 0x0 (num 0x1) Sampler3 ClampX/Y/Z: 0 0 2 border: 0
layout(binding = 8) uniform sampler2D textureUnitPS8;// Tex8 addr 0x27fb9000 res 1024x1024x1 dim 1 tm: 4 format 001a compSel: 3 3 3 3 mipView: 0x0 (num 0x1) sliceView: 0x0 (num 0x1) Sampler8 ClampX/Y/Z: 0 0 0 border: 0
layout(binding = 13) uniform sampler2D textureUnitPS13;// Tex13 addr 0x277b8800 res 1024x2048x1 dim 1 tm: 4 format 0011 compSel: 0 0 0 0 mipView: 0x0 (num 0x1) sliceView: 0x0 (num 0x1) Sampler13 ClampX/Y/Z: 6 6 6 border: 2
layout(binding = 14) uniform sampler2D textureUnitPS14;// Tex14 addr 0x27fb9000 res 1024x1024x1 dim 1 tm: 4 format 0011 compSel: 0 0 0 0 mipView: 0x0 (num 0x1) sliceView: 0x0 (num 0x1) Sampler14 ClampX/Y/Z: 6 6 6 border: 2
layout(binding = 15) uniform sampler2D textureUnitPS15;// Tex15 addr 0x277b8800 res 1024x2048x1 dim 1 tm: 4 format 001a compSel: 3 3 3 3 mipView: 0x0 (num 0x1) sliceView: 0x0 (num 0x1) Sampler15 ClampX/Y/Z: 6 6 6 border: 1
layout(location = 1) in vec4 passParameterSem143;
layout(location = 2) in vec4 passParameterSem130;
layout(location = 3) in vec4 passParameterSem128;
layout(location = 4) in vec4 passParameterSem144;
layout(location = 5) in vec4 passParameterSem142;
layout(location = 6) in vec4 passParameterSem136;
layout(location = 0) out vec4 passPixelColor0;
layout(location = 2) out vec4 passPixelColor2;
layout(location = 4) out vec4 passPixelColor4;
uniform vec2 uf_fragCoordScale;
int clampFI32(int v)
{
if( v == 0x7FFFFFFF )
	return floatBitsToInt(1.0);
else if( v == 0xFFFFFFFF )
	return floatBitsToInt(0.0);
return floatBitsToInt(clamp(intBitsToFloat(v), 0.0, 1.0));
}
float mul_nonIEEE(float a, float b){ if( a == 0.0 || b == 0.0 ) return 0.0; return a*b; }
void main()
{
ivec4 R0i = ivec4(0);
ivec4 R1i = ivec4(0);
ivec4 R2i = ivec4(0);
ivec4 R3i = ivec4(0);
ivec4 R4i = ivec4(0);
ivec4 R5i = ivec4(0);
ivec4 R6i = ivec4(0);
ivec4 R7i = ivec4(0);
ivec4 R8i = ivec4(0);
ivec4 R9i = ivec4(0);
ivec4 R10i = ivec4(0);
ivec4 R11i = ivec4(0);
ivec4 R122i = ivec4(0);
ivec4 R123i = ivec4(0);
ivec4 R124i = ivec4(0);
ivec4 R125i = ivec4(0);
ivec4 R126i = ivec4(0);
ivec4 R127i = ivec4(0);
int backupReg0i, backupReg1i, backupReg2i, backupReg3i, backupReg4i;
ivec4 PV0i = ivec4(0), PV1i = ivec4(0);
int PS0i = 0, PS1i = 0;
ivec4 tempi = ivec4(0);
float tempResultf;
int tempResulti;
ivec4 ARi = ivec4(0);
bool predResult = true;
bool activeMaskStack[4];
bool activeMaskStackC[5];
activeMaskStack[0] = false;
activeMaskStack[1] = false;
activeMaskStack[2] = false;
activeMaskStackC[0] = false;
activeMaskStackC[1] = false;
activeMaskStackC[2] = false;
activeMaskStackC[3] = false;
activeMaskStack[0] = true;
activeMaskStackC[0] = true;
activeMaskStackC[1] = true;
vec3 cubeMapSTM;
int cubeMapFaceId;
R0i = floatBitsToInt(vec4(gl_FragCoord.xy*uf_fragCoordScale,gl_FragCoord.zw));
R1i = floatBitsToInt(passParameterSem143);
R2i = floatBitsToInt(passParameterSem130);
R3i = floatBitsToInt(passParameterSem128);
R4i = floatBitsToInt(passParameterSem144);
R5i = floatBitsToInt(passParameterSem142);
R6i = floatBitsToInt(passParameterSem136);
if( activeMaskStackC[1] == true ) {
R7i.xy = floatBitsToInt(texture(textureUnitPS3, intBitsToFloat(R6i.xy)).xy);
R9i.xyzw = floatBitsToInt(texture(textureUnitPS0, intBitsToFloat(R6i.xy)).xyzw);
R8i.xyz = floatBitsToInt(texture(textureUnitPS1, intBitsToFloat(R6i.xy)).xyz);
R10i.xyzw = floatBitsToInt(texture(textureUnitPS2, intBitsToFloat(R6i.xy)).xyzw);
}
if( activeMaskStackC[1] == true ) {
// 0
R127i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R5i.z), intBitsToFloat(R5i.w)));
PV0i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R7i.x), intBitsToFloat(R7i.x)));
R127i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R5i.x), intBitsToFloat(R5i.w)));
PV0i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R5i.y), intBitsToFloat(R5i.w)));
R127i.y = R1i.x;
PS0i = R127i.y;
// 1
R126i.xyz = ivec3(PV0i.w,R1i.y,R2i.x);
R123i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R7i.y),intBitsToFloat(R7i.y)) + intBitsToFloat(PV0i.y)));
PV1i.w = R123i.w;
R125i.z = R2i.y;
PS1i = R125i.z;
// 2
PV0i.x = floatBitsToInt(-(intBitsToFloat(PV1i.w)) + 1.0);
R125i.y = R127i.x;
R124i.z = R1i.z;
R127i.w = R2i.z;
R125i.x = floatBitsToInt(-(intBitsToFloat(R3i.x)) + intBitsToFloat(uf_remappedPS[0].x));
PS0i = R125i.x;
// 3
R124i.x = ((intBitsToFloat(R9i.x) > 0.5)?int(0xFFFFFFFF):int(0x0));
R124i.y = floatBitsToInt(-(intBitsToFloat(R3i.y)) + intBitsToFloat(uf_remappedPS[0].y));
R5i.z = floatBitsToInt(-(intBitsToFloat(R3i.z)) + intBitsToFloat(uf_remappedPS[0].z));
R126i.w = ((intBitsToFloat(R9i.y) > 0.5)?int(0xFFFFFFFF):int(0x0));
R1i.z = floatBitsToInt(sqrt(intBitsToFloat(PV0i.x)));
PS1i = R1i.z;
// 4
R127i.x = floatBitsToInt(dot(vec4(intBitsToFloat(R7i.x),intBitsToFloat(R7i.y),intBitsToFloat(PS1i),-0.0),vec4(intBitsToFloat(R127i.z),intBitsToFloat(R127i.y),intBitsToFloat(R126i.z),0.0)));
PV0i.x = R127i.x;
PV0i.y = R127i.x;
PV0i.z = R127i.x;
PV0i.w = R127i.x;
R127i.y = floatBitsToInt(-(intBitsToFloat(uf_remappedPS[1].z)) + 1.0);
PS0i = R127i.y;
// 5
backupReg0i = R126i.y;
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R7i.x),intBitsToFloat(R7i.y),intBitsToFloat(R1i.z),-0.0),vec4(intBitsToFloat(R126i.x),intBitsToFloat(backupReg0i),intBitsToFloat(R125i.z),0.0)));
PV1i.x = tempi.x;
PV1i.y = tempi.x;
PV1i.z = tempi.x;
PV1i.w = tempi.x;
R126i.y = tempi.x;
R126i.x = floatBitsToInt(intBitsToFloat(uf_remappedPS[2].x) + -(intBitsToFloat(uf_remappedPS[2].y)));
PS1i = R126i.x;
// 6
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R7i.x),intBitsToFloat(R7i.y),intBitsToFloat(R1i.z),-0.0),vec4(intBitsToFloat(R125i.y),intBitsToFloat(R124i.z),intBitsToFloat(R127i.w),0.0)));
PV0i.x = tempi.x;
PV0i.y = tempi.x;
PV0i.z = tempi.x;
PV0i.w = tempi.x;
R124i.z = tempi.x;
R127i.w = floatBitsToInt(max(-(intBitsToFloat(uf_remappedPS[2].y)), 0.0));
PS0i = R127i.w;
// 7
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R127i.x),intBitsToFloat(R126i.y),intBitsToFloat(PV0i.x),-0.0),vec4(intBitsToFloat(R127i.x),intBitsToFloat(R126i.y),intBitsToFloat(PV0i.x),0.0)));
PV1i.x = tempi.x;
PV1i.y = tempi.x;
PV1i.z = tempi.x;
PV1i.w = tempi.x;
R125i.z = ((intBitsToFloat(R9i.z) > 0.5)?int(0xFFFFFFFF):int(0x0));
PS1i = R125i.z;
// 8
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R125i.x),intBitsToFloat(R124i.y),intBitsToFloat(R5i.z),-0.0),vec4(intBitsToFloat(R125i.x),intBitsToFloat(R124i.y),intBitsToFloat(R5i.z),0.0)));
PV0i.x = tempi.x;
PV0i.y = tempi.x;
PV0i.z = tempi.x;
PV0i.w = tempi.x;
tempResultf = 1.0 / sqrt(intBitsToFloat(PV1i.x));
PS0i = floatBitsToInt(tempResultf);
// 9
backupReg0i = R127i.x;
backupReg1i = R126i.y;
backupReg2i = R124i.z;
R127i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(backupReg0i), intBitsToFloat(PS0i)));
R126i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(backupReg1i), intBitsToFloat(PS0i)));
R124i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(backupReg2i), intBitsToFloat(PS0i)));
R125i.w = floatBitsToInt(-(intBitsToFloat(R127i.y)) + 1.0);
tempResultf = 1.0 / sqrt(intBitsToFloat(PV0i.x));
PS1i = floatBitsToInt(tempResultf);
// 10
backupReg0i = R127i.w;
PV0i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R125i.x), intBitsToFloat(PS1i)));
PV0i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R124i.y), intBitsToFloat(PS1i)));
PV0i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R5i.z), intBitsToFloat(PS1i)));
R127i.w = floatBitsToInt(min(intBitsToFloat(R126i.x), intBitsToFloat(backupReg0i)));
R124i.y = floatBitsToInt(1.0 / intBitsToFloat(R126i.x));
PS0i = R124i.y;
// 11
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R127i.x),intBitsToFloat(R126i.y),intBitsToFloat(R124i.z),-0.0),vec4(intBitsToFloat(PV0i.x),intBitsToFloat(PV0i.y),intBitsToFloat(PV0i.z),0.0)));
PV1i.x = tempi.x;
PV1i.y = tempi.x;
PV1i.z = tempi.x;
PV1i.w = tempi.x;
R124i.w = floatBitsToInt(intBitsToFloat(uf_remappedPS[2].z) + -(intBitsToFloat(uf_remappedPS[2].w)));
PS1i = R124i.w;
// 12
backupReg0i = R126i.w;
PV0i.x = floatBitsToInt(max(-(intBitsToFloat(uf_remappedPS[2].w)), 0.0));
R126i.y = ((R124i.x == 0)?(0):(0x3f800000));
PV0i.y = R126i.y;
PV0i.z = floatBitsToInt(max(intBitsToFloat(PV1i.x), 0.0));
R126i.w = ((backupReg0i == 0)?(0):(0x3f800000));
R7i.y = ((R125i.z == 0)?(0):(0x3f800000));
PS0i = R7i.y;
// 13
R125i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R127i.w), intBitsToFloat(R124i.y)));
PV1i.x = R125i.x;
R124i.y = floatBitsToInt(min(intBitsToFloat(R124i.w), intBitsToFloat(PV0i.x)));
R124i.z = floatBitsToInt((intBitsToFloat(0xc0000000) * intBitsToFloat(PV0i.y) + 1.0));
R3i.w = floatBitsToInt(-(intBitsToFloat(PV0i.z)) + 1.0);
PV1i.w = R3i.w;
R125i.z = floatBitsToInt(1.0 / intBitsToFloat(R125i.w));
PS1i = R125i.z;
// 14
backupReg0i = R127i.y;
R124i.x = floatBitsToInt((intBitsToFloat(0xc0000000) * intBitsToFloat(R7i.y) + 1.0));
R127i.y = floatBitsToInt((intBitsToFloat(0xc0000000) * intBitsToFloat(R126i.w) + 1.0));
R127i.z = floatBitsToInt(-(intBitsToFloat(PV1i.x)) + 1.0);
PV0i.w = floatBitsToInt(intBitsToFloat(PV1i.w) + -(intBitsToFloat(backupReg0i)));
PS0i = floatBitsToInt(1.0 / intBitsToFloat(R124i.w));
// 15
R127i.x = floatBitsToInt(-(0.5) + intBitsToFloat(R9i.x));
PV1i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV0i.w), intBitsToFloat(R125i.z)));
PV1i.y = clampFI32(PV1i.y);
R125i.z = floatBitsToInt(-(0.5) + intBitsToFloat(R9i.y));
R1i.w = floatBitsToInt((mul_nonIEEE(-(intBitsToFloat(R124i.y)),intBitsToFloat(PS0i)) + 1.0));
R126i.z = floatBitsToInt(-(0.5) + intBitsToFloat(R9i.z));
PS1i = R126i.z;
// 16
backupReg0i = R127i.y;
R126i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R124i.z), intBitsToFloat(R9i.x)));
PV0i.x = R126i.x;
R127i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R124i.x), intBitsToFloat(R9i.z)));
R124i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(backupReg0i), intBitsToFloat(R9i.y)));
PV0i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV1i.y), intBitsToFloat(PV1i.y)));
R122i.x = floatBitsToInt((intBitsToFloat(0xc0000000) * intBitsToFloat(PV1i.y) + intBitsToFloat(0x40400000)));
PS0i = R122i.x;
// 17
R124i.x = floatBitsToInt(intBitsToFloat(R125i.z) + intBitsToFloat(R8i.y));
R124i.x = floatBitsToInt(intBitsToFloat(R124i.x) * 2.0);
R124i.y = floatBitsToInt(-(intBitsToFloat(R1i.w)) + intBitsToFloat(R127i.z));
R127i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV0i.w), intBitsToFloat(PS0i)));
PV1i.w = floatBitsToInt(intBitsToFloat(R127i.x) + intBitsToFloat(R8i.x));
PV1i.w = floatBitsToInt(intBitsToFloat(PV1i.w) * 2.0);
PS1i = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R8i.x), intBitsToFloat(PV0i.x)));
PS1i = floatBitsToInt(intBitsToFloat(PS1i) * 2.0);
// 18
PV0i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R8i.y), intBitsToFloat(R124i.z)));
PV0i.x = floatBitsToInt(intBitsToFloat(PV0i.x) * 2.0);
PV0i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R8i.z), intBitsToFloat(R127i.y)));
PV0i.y = floatBitsToInt(intBitsToFloat(PV0i.y) * 2.0);
PV0i.z = floatBitsToInt(intBitsToFloat(R126i.z) + intBitsToFloat(R8i.z));
PV0i.z = floatBitsToInt(intBitsToFloat(PV0i.z) * 2.0);
R124i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R126i.y),intBitsToFloat(PV1i.w)) + intBitsToFloat(PS1i)));
R5i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R9i.x), intBitsToFloat(uf_remappedPS[3].x)));
PS0i = R5i.y;
// 19
backupReg0i = R127i.x;
R127i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R7i.y),intBitsToFloat(PV0i.z)) + intBitsToFloat(PV0i.y)));
R6i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R9i.y), intBitsToFloat(uf_remappedPS[3].y)));
R5i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R9i.z), intBitsToFloat(uf_remappedPS[3].z)));
R125i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R126i.w),intBitsToFloat(R124i.x)) + intBitsToFloat(PV0i.x)));
R125i.y = floatBitsToInt(intBitsToFloat(backupReg0i) + intBitsToFloat(R10i.x));
R125i.y = floatBitsToInt(intBitsToFloat(R125i.y) * 2.0);
PS1i = R125i.y;
// 20
R8i.x = floatBitsToInt(intBitsToFloat(R126i.z) + intBitsToFloat(R10i.z));
R8i.x = floatBitsToInt(intBitsToFloat(R8i.x) * 2.0);
R8i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R10i.z), intBitsToFloat(R127i.y)));
R8i.y = floatBitsToInt(intBitsToFloat(R8i.y) * 2.0);
R126i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R10i.x), intBitsToFloat(R126i.x)));
R126i.z = floatBitsToInt(intBitsToFloat(R126i.z) * 2.0);
R127i.w = floatBitsToInt(intBitsToFloat(R125i.z) + intBitsToFloat(R10i.y));
R127i.w = floatBitsToInt(intBitsToFloat(R127i.w) * 2.0);
PS0i = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R124i.y), intBitsToFloat(R9i.x)));
// 21
PV1i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R124i.y), intBitsToFloat(R9i.y)));
PV1i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R10i.y), intBitsToFloat(R124i.z)));
PV1i.y = floatBitsToInt(intBitsToFloat(PV1i.y) * 2.0);
PV1i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R124i.y), intBitsToFloat(R9i.z)));
R5i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R125i.x),intBitsToFloat(R124i.w)) + intBitsToFloat(PS0i)));
tempResultf = log2(intBitsToFloat(R127i.z));
if( isinf(tempResultf) == true ) tempResultf = -3.40282347E+38F;
PS1i = floatBitsToInt(tempResultf);
// 22
R7i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R126i.y),intBitsToFloat(R125i.y)) + intBitsToFloat(R126i.z)));
R1i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R125i.x),intBitsToFloat(R127i.x)) + intBitsToFloat(PV1i.z)));
R8i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R126i.w),intBitsToFloat(R127i.w)) + intBitsToFloat(PV1i.y)));
R2i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R125i.x),intBitsToFloat(R125i.w)) + intBitsToFloat(PV1i.x)));
R6i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(uf_remappedPS[1].w), intBitsToFloat(PS1i)));
PS0i = R6i.w;
}
if( activeMaskStackC[1] == true ) {
// 0
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R2i.x),intBitsToFloat(R2i.y),intBitsToFloat(R2i.z),-0.0),vec4(-(intBitsToFloat(uf_remappedPS[4].x)),-(intBitsToFloat(uf_remappedPS[4].y)),-(intBitsToFloat(uf_remappedPS[4].z)),0.0)));
PV0i.x = tempi.x;
PV0i.y = tempi.x;
PV0i.z = tempi.x;
PV0i.w = tempi.x;
R122i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R7i.y),intBitsToFloat(R8i.x)) + intBitsToFloat(R8i.y)));
PS0i = R122i.x;
// 1
backupReg0i = R7i.x;
backupReg1i = R1i.y;
R7i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R1i.w),intBitsToFloat(backupReg0i)) + intBitsToFloat(R5i.w)));
R1i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R1i.w),intBitsToFloat(PS0i)) + intBitsToFloat(backupReg1i)));
R2i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R9i.w), intBitsToFloat(uf_remappedPS[3].w)));
R127i.w = floatBitsToInt(max(intBitsToFloat(PV0i.x), 0.0));
PV1i.w = R127i.w;
// 2
R2i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R1i.w),intBitsToFloat(R8i.z)) + intBitsToFloat(R2i.w)));
PV0i.y = floatBitsToInt(-(intBitsToFloat(PV1i.w)) + 1.0);
PS0i = floatBitsToInt(exp2(intBitsToFloat(R6i.w)));
// 3
R123i.x = floatBitsToInt((mul_nonIEEE(-(intBitsToFloat(R127i.w)),intBitsToFloat(PV0i.y)) + intBitsToFloat(PV0i.y)));
PV1i.x = R123i.x;
R0i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(uf_remappedPS[1].y), intBitsToFloat(PS0i)));
// 4
R10i.z = floatBitsToInt((mul_nonIEEE(-(intBitsToFloat(R127i.w)),intBitsToFloat(PV1i.x)) + intBitsToFloat(PV1i.x)));
}
if( activeMaskStackC[1] == true ) {
activeMaskStack[1] = activeMaskStack[0];
activeMaskStackC[2] = activeMaskStackC[1];
// 0
PV0i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R6i.y), intBitsToFloat(uf_remappedPS[5].x)));
PV0i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R5i.y), intBitsToFloat(uf_remappedPS[5].x)));
R126i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R2i.z), intBitsToFloat(uf_remappedPS[5].x)));
PV0i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R5i.z), intBitsToFloat(uf_remappedPS[5].x)));
R6i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R7i.x), intBitsToFloat(uf_remappedPS[6].x)));
PS0i = R6i.x;
// 1
PV1i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV0i.x), intBitsToFloat(uf_remappedPS[7].y)));
PV1i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV0i.y), intBitsToFloat(uf_remappedPS[7].x)));
PV1i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV0i.w), intBitsToFloat(uf_remappedPS[7].z)));
// 2
R7i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R126i.z), intBitsToFloat(PV1i.y)));
R6i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R126i.z), intBitsToFloat(PV1i.x)));
R6i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R126i.z), intBitsToFloat(PV1i.w)));
R7i.w = 0;
R7i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R2i.x), intBitsToFloat(uf_remappedPS[6].x)));
PS0i = R7i.y;
// 3
R7i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R1i.y), intBitsToFloat(uf_remappedPS[6].x)));
// 4
predResult = (intBitsToFloat(uf_remappedPS[8].x) >= -(intBitsToFloat(R4i.w)));
activeMaskStack[1] = predResult;
activeMaskStackC[2] = predResult == true && activeMaskStackC[1] == true;
}
else {
activeMaskStack[1] = false;
activeMaskStackC[2] = false;
}
if( activeMaskStackC[2] == true ) {
// 0
R4i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R10i.z),intBitsToFloat(uf_remappedPS[9].y)) + intBitsToFloat(uf_remappedPS[9].x)));
R9i.z = uf_remappedPS[10].x;
R9i.z = floatBitsToInt(intBitsToFloat(R9i.z) * 4.0);
R6i.w = floatBitsToInt(1.0);
PV0i.w = R6i.w;
// 1
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R3i.x),intBitsToFloat(R3i.y),intBitsToFloat(R3i.z),intBitsToFloat(PV0i.w)),vec4(intBitsToFloat(uf_remappedPS[11].x),intBitsToFloat(uf_remappedPS[11].y),intBitsToFloat(uf_remappedPS[11].z),intBitsToFloat(uf_remappedPS[11].w))));
PV1i.x = tempi.x;
PV1i.y = tempi.x;
PV1i.z = tempi.x;
PV1i.w = tempi.x;
// 2
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R3i.x),intBitsToFloat(R3i.y),intBitsToFloat(R3i.z),intBitsToFloat(R6i.w)),vec4(intBitsToFloat(uf_remappedPS[12].x),intBitsToFloat(uf_remappedPS[12].y),intBitsToFloat(uf_remappedPS[12].z),intBitsToFloat(uf_remappedPS[12].w))));
PV0i.x = tempi.x;
PV0i.y = tempi.x;
PV0i.z = tempi.x;
PV0i.w = tempi.x;
R1i.w = floatBitsToInt(1.0 / intBitsToFloat(PV1i.x));
PS0i = R1i.w;
// 3
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R3i.x),intBitsToFloat(R3i.y),intBitsToFloat(R3i.z),intBitsToFloat(R6i.w)),vec4(intBitsToFloat(uf_remappedPS[13].x),intBitsToFloat(uf_remappedPS[13].y),intBitsToFloat(uf_remappedPS[13].z),intBitsToFloat(uf_remappedPS[13].w))));
PV1i.x = tempi.x;
PV1i.y = tempi.x;
PV1i.z = tempi.x;
PV1i.w = tempi.x;
R4i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV0i.x), intBitsToFloat(PS0i)));
PS1i = R4i.x;
// 4
R5i.x = floatBitsToInt((-(intBitsToFloat(uf_remappedPS[14].x)) /resScale  * 0.5 + intBitsToFloat(PS1i)));
R10i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV1i.x), intBitsToFloat(R1i.w)));
PV0i.y = R10i.y;
PV0i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R6i.w), intBitsToFloat(uf_remappedPS[15].w)));
R0i.x = uf_remappedPS[14].x;
R0i.x = floatBitsToInt(intBitsToFloat(R0i.x) / 2.0);
PS0i = R0i.x;
// 5
R1i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R3i.z),intBitsToFloat(uf_remappedPS[15].z)) + intBitsToFloat(PV0i.z)));
R5i.y = floatBitsToInt((-(intBitsToFloat(uf_remappedPS[14].y)) /resScale  * 0.5 + intBitsToFloat(PV0i.y)));
R9i.y = uf_remappedPS[14].y;
R9i.y = floatBitsToInt(intBitsToFloat(R9i.y) / 2.0);
PS1i = R9i.y;
}
if( activeMaskStackC[2] == true ) {
R2i.xyzw = floatBitsToInt(textureGather(textureUnitPS15, intBitsToFloat(R5i.xy)).xyzw);
R8i.xyzw = floatBitsToInt(textureGather(textureUnitPS13, intBitsToFloat(R5i.xy)).xyzw);
}
if( activeMaskStackC[2] == true ) {
activeMaskStack[2] = activeMaskStack[1];
activeMaskStackC[3] = activeMaskStackC[2];
// 0
PV0i.x = floatBitsToInt(intBitsToFloat(R2i.x) + intBitsToFloat(R2i.w));
R122i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R3i.y),intBitsToFloat(uf_remappedPS[15].y)) + intBitsToFloat(R1i.x)));
PS0i = R122i.x;
// 1
R123i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R3i.x),intBitsToFloat(uf_remappedPS[15].x)) + intBitsToFloat(PS0i)));
PV1i.x = R123i.x;
PV1i.z = floatBitsToInt(intBitsToFloat(R2i.y) + intBitsToFloat(PV0i.x));
// 2
R4i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV1i.x), intBitsToFloat(R1i.w)));
PV0i.w = floatBitsToInt(intBitsToFloat(R2i.z) + intBitsToFloat(PV1i.z));
// 3
PV1i.x = ((intBitsToFloat(PV0i.w) != 0.0)?int(0xFFFFFFFF):int(0x0));
PV1i.y = ((intBitsToFloat(R9i.z) != intBitsToFloat(PV0i.w))?int(0xFFFFFFFF):int(0x0));
// 4
R1i.z = ((PV1i.y == 0)?(0):(PV1i.x));
// 5
predResult = (R1i.z != 0);
activeMaskStack[2] = predResult;
activeMaskStackC[3] = predResult == true && activeMaskStackC[2] == true;
}
else {
activeMaskStack[2] = false;
activeMaskStackC[3] = false;
}
if( activeMaskStackC[3] == true ) {
// 0
R1i.x = floatBitsToInt((-(intBitsToFloat(uf_remappedPS[14].x)) /resScale  * 0.5 + intBitsToFloat(R5i.x)));
R11i.y = floatBitsToInt(-(intBitsToFloat(R9i.y)));
PV0i.z = floatBitsToInt(-(intBitsToFloat(R0i.x)));
PV0i.w = R9i.y;
R1i.y = floatBitsToInt((-(intBitsToFloat(uf_remappedPS[14].y)) /resScale  * 0.5 + intBitsToFloat(R5i.y)));
PS0i = R1i.y;
// 1
backupReg0i = R5i.x;
R2i.x = floatBitsToInt(intBitsToFloat(R5i.x) + intBitsToFloat(PV0i.z));
R2i.y = floatBitsToInt(intBitsToFloat(R5i.y) + intBitsToFloat(PV0i.w));
R1i.z = floatBitsToInt((intBitsToFloat(uf_remappedPS[14].x) /resScale  * 0.5 + intBitsToFloat(R5i.x)));
R1i.w = floatBitsToInt((intBitsToFloat(uf_remappedPS[14].y) /resScale  * 0.5 + intBitsToFloat(R5i.y)));
R5i.x = floatBitsToInt(intBitsToFloat(R0i.x) + intBitsToFloat(backupReg0i));
PS1i = R5i.x;
// 2
backupReg0i = R5i.y;
R5i.y = floatBitsToInt(intBitsToFloat(R11i.y) + intBitsToFloat(backupReg0i));
}
if( activeMaskStackC[3] == true ) {
R2i.w = floatBitsToInt(texture(textureUnitPS15, intBitsToFloat(R1i.xy)).x);
R2i.x = floatBitsToInt(texture(textureUnitPS15, intBitsToFloat(R2i.xy)).x);
R2i.y = floatBitsToInt(texture(textureUnitPS15, intBitsToFloat(R1i.zw)).x);
R2i.z = floatBitsToInt(texture(textureUnitPS15, intBitsToFloat(R5i.xy)).x);
}
activeMaskStackC[2] = activeMaskStack[1] == true && activeMaskStackC[1] == true;
if( activeMaskStackC[2] == true ) {
// 0
backupReg0i = R2i.w;
R1i.x = floatBitsToInt((intBitsToFloat(uf_remappedPS[14].x) /resScale  * 0.5 + intBitsToFloat(R4i.x)));
R1i.y = floatBitsToInt((intBitsToFloat(uf_remappedPS[14].y) /resScale  * 0.5 + intBitsToFloat(R10i.y)));
R1i.z = floatBitsToInt((intBitsToFloat(uf_remappedPS[10].x) == intBitsToFloat(R2i.x))?1.0:0.0);
R2i.w = floatBitsToInt(-(intBitsToFloat(R4i.y)) + intBitsToFloat(R4i.z));
R1i.w = floatBitsToInt((intBitsToFloat(uf_remappedPS[10].x) == intBitsToFloat(backupReg0i))?1.0:0.0);
PS0i = R1i.w;
}
if( activeMaskStackC[2] == true ) {
R5i.xyzw = floatBitsToInt(textureGather(textureUnitPS15, intBitsToFloat(R1i.xy)).xyzw);
R4i.xyz = floatBitsToInt(textureGather(textureUnitPS13, intBitsToFloat(R1i.xy)).xyz);
}
if( activeMaskStackC[2] == true ) {
activeMaskStack[2] = activeMaskStack[1];
activeMaskStackC[3] = activeMaskStackC[2];
// 0
PV0i.x = floatBitsToInt(intBitsToFloat(R5i.x) + intBitsToFloat(R5i.w));
PV0i.y = floatBitsToInt((intBitsToFloat(uf_remappedPS[10].x) == intBitsToFloat(R2i.y))?1.0:0.0);
PV0i.z = floatBitsToInt((intBitsToFloat(R8i.x) >= intBitsToFloat(R2i.w))?1.0:0.0);
PV0i.w = floatBitsToInt((intBitsToFloat(R8i.w) >= intBitsToFloat(R2i.w))?1.0:0.0);
PS0i = floatBitsToInt((intBitsToFloat(R8i.y) >= intBitsToFloat(R2i.w))?1.0:0.0);
// 1
PV1i.x = floatBitsToInt(intBitsToFloat(R5i.y) + intBitsToFloat(PV0i.x));
PV1i.y = floatBitsToInt(intBitsToFloat(PV0i.y) + intBitsToFloat(PS0i));
PV1i.z = floatBitsToInt(intBitsToFloat(R1i.z) + intBitsToFloat(PV0i.z));
PV1i.w = floatBitsToInt(intBitsToFloat(R1i.w) + intBitsToFloat(PV0i.w));
R127i.x = floatBitsToInt((intBitsToFloat(uf_remappedPS[10].x) == intBitsToFloat(R2i.z))?1.0:0.0);
PS1i = R127i.x;
// 2
PV0i.x = floatBitsToInt((intBitsToFloat(R8i.z) >= intBitsToFloat(R2i.w))?1.0:0.0);
PV0i.y = floatBitsToInt(min(intBitsToFloat(PV1i.w), 1.0));
PV0i.z = floatBitsToInt(min(intBitsToFloat(PV1i.z), 1.0));
PV0i.w = floatBitsToInt(intBitsToFloat(R5i.z) + intBitsToFloat(PV1i.x));
R127i.y = floatBitsToInt(min(intBitsToFloat(PV1i.y), 1.0));
PS0i = R127i.y;
// 3
PV1i.x = floatBitsToInt(intBitsToFloat(R127i.x) + intBitsToFloat(PV0i.x));
PV1i.y = floatBitsToInt(intBitsToFloat(PV0i.z) + intBitsToFloat(PV0i.y));
PV1i.z = ((intBitsToFloat(R9i.z) != intBitsToFloat(PV0i.w))?int(0xFFFFFFFF):int(0x0));
PV1i.w = ((intBitsToFloat(PV0i.w) != 0.0)?int(0xFFFFFFFF):int(0x0));
// 4
PV0i.x = floatBitsToInt(min(intBitsToFloat(PV1i.x), 1.0));
R1i.z = ((PV1i.z == 0)?(0):(PV1i.w));
PV0i.w = floatBitsToInt(intBitsToFloat(R127i.y) + intBitsToFloat(PV1i.y));
// 5
R8i.x = floatBitsToInt(intBitsToFloat(PV0i.x) + intBitsToFloat(PV0i.w));
// 6
predResult = (R1i.z != 0);
activeMaskStack[2] = predResult;
activeMaskStackC[3] = predResult == true && activeMaskStackC[2] == true;
}
else {
activeMaskStack[2] = false;
activeMaskStackC[3] = false;
}
if( activeMaskStackC[3] == true ) {
// 0
R2i.x = floatBitsToInt((intBitsToFloat(uf_remappedPS[14].x) /resScale  * 0.5 + intBitsToFloat(R1i.x)));
R5i.y = floatBitsToInt(-(intBitsToFloat(R9i.y)));
PV0i.y = R5i.y;
PV0i.z = floatBitsToInt(-(intBitsToFloat(R0i.x)));
PV0i.w = R9i.y;
R2i.y = floatBitsToInt((intBitsToFloat(uf_remappedPS[14].y) /resScale  * 0.5 + intBitsToFloat(R1i.y)));
PS0i = R2i.y;
// 1
backupReg0i = R1i.x;
backupReg1i = R1i.y;
backupReg0i = R1i.x;
backupReg1i = R1i.y;
R1i.xyz = floatBitsToInt(vec3(intBitsToFloat(PV0i.z),intBitsToFloat(PV0i.w),intBitsToFloat(R0i.x)) + vec3(intBitsToFloat(backupReg0i),intBitsToFloat(backupReg1i),intBitsToFloat(backupReg0i)));
R1i.w = floatBitsToInt(intBitsToFloat(PV0i.y) + intBitsToFloat(backupReg1i));
}
if( activeMaskStackC[3] == true ) {
R5i.x = floatBitsToInt(texture(textureUnitPS15, intBitsToFloat(R1i.xy)).x);
R5i.y = floatBitsToInt(texture(textureUnitPS15, intBitsToFloat(R2i.xy)).x);
R5i.z = floatBitsToInt(texture(textureUnitPS15, intBitsToFloat(R1i.zw)).x);
}
activeMaskStackC[2] = activeMaskStack[1] == true && activeMaskStackC[1] == true;
if( activeMaskStackC[2] == true ) {
activeMaskStack[2] = activeMaskStack[1];
activeMaskStackC[3] = activeMaskStackC[2];
// 0
PV0i.x = floatBitsToInt((intBitsToFloat(uf_remappedPS[10].x) == intBitsToFloat(R5i.y))?1.0:0.0);
PV0i.y = floatBitsToInt((intBitsToFloat(R4i.x) >= intBitsToFloat(R2i.w))?1.0:0.0);
PV0i.z = floatBitsToInt((intBitsToFloat(uf_remappedPS[10].x) == intBitsToFloat(R5i.x))?1.0:0.0);
PV0i.w = floatBitsToInt((intBitsToFloat(R4i.y) >= intBitsToFloat(R2i.w))?1.0:0.0);
R127i.w = floatBitsToInt((intBitsToFloat(uf_remappedPS[10].x) == intBitsToFloat(R5i.z))?1.0:0.0);
PS0i = R127i.w;
// 1
PV1i.x = floatBitsToInt((intBitsToFloat(R4i.z) >= intBitsToFloat(R2i.w))?1.0:0.0);
PV1i.y = floatBitsToInt(intBitsToFloat(PV0i.x) + intBitsToFloat(PV0i.w));
PV1i.z = floatBitsToInt(-(intBitsToFloat(uf_remappedPS[8].x)) + intBitsToFloat(uf_remappedPS[16].x));
PV1i.w = floatBitsToInt(intBitsToFloat(PV0i.z) + intBitsToFloat(PV0i.y));
// 2
PV0i.x = floatBitsToInt(min(intBitsToFloat(PV1i.w), 1.0));
PV0i.z = floatBitsToInt(intBitsToFloat(R127i.w) + intBitsToFloat(PV1i.x));
PV0i.w = floatBitsToInt(min(intBitsToFloat(PV1i.y), 1.0));
R0i.x = floatBitsToInt(-(intBitsToFloat(R4i.w)) + intBitsToFloat(PV1i.z));
PS0i = R0i.x;
// 3
PV1i.y = floatBitsToInt(min(intBitsToFloat(PV0i.z), 1.0));
PV1i.z = floatBitsToInt(intBitsToFloat(PV0i.x) + intBitsToFloat(PV0i.w));
// 4
PV0i.x = floatBitsToInt(intBitsToFloat(PV1i.y) + intBitsToFloat(PV1i.z));
// 5
PV1i.w = floatBitsToInt(intBitsToFloat(R8i.x) + intBitsToFloat(PV0i.x));
// 6
R8i.z = floatBitsToInt(intBitsToFloat(PV1i.w) * intBitsToFloat(0x3e124922));
// 7
backupReg0i = R0i.x;
predResult = (intBitsToFloat(backupReg0i) > 0.0);
activeMaskStack[2] = predResult;
activeMaskStackC[3] = predResult == true && activeMaskStackC[2] == true;
}
else {
activeMaskStack[2] = false;
activeMaskStackC[3] = false;
}
if( activeMaskStackC[3] == true ) {
// 0
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R3i.x),intBitsToFloat(R3i.y),intBitsToFloat(R3i.z),intBitsToFloat(R6i.w)),vec4(intBitsToFloat(uf_remappedPS[17].x),intBitsToFloat(uf_remappedPS[17].y),intBitsToFloat(uf_remappedPS[17].z),intBitsToFloat(uf_remappedPS[17].w))));
PV0i.x = tempi.x;
PV0i.y = tempi.x;
PV0i.z = tempi.x;
PV0i.w = tempi.x;
// 1
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R3i.x),intBitsToFloat(R3i.y),intBitsToFloat(R3i.z),intBitsToFloat(R6i.w)),vec4(intBitsToFloat(uf_remappedPS[18].x),intBitsToFloat(uf_remappedPS[18].y),intBitsToFloat(uf_remappedPS[18].z),intBitsToFloat(uf_remappedPS[18].w))));
PV1i.x = tempi.x;
PV1i.y = tempi.x;
PV1i.z = tempi.x;
PV1i.w = tempi.x;
R1i.z = floatBitsToInt(1.0 / intBitsToFloat(PV0i.x));
PS1i = R1i.z;
// 2
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R3i.x),intBitsToFloat(R3i.y),intBitsToFloat(R3i.z),intBitsToFloat(R6i.w)),vec4(intBitsToFloat(uf_remappedPS[19].x),intBitsToFloat(uf_remappedPS[19].y),intBitsToFloat(uf_remappedPS[19].z),intBitsToFloat(uf_remappedPS[19].w))));
PV0i.x = tempi.x;
PV0i.y = tempi.x;
PV0i.z = tempi.x;
PV0i.w = tempi.x;
R8i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV1i.x), intBitsToFloat(PS1i)));
PS0i = R8i.x;
// 3
R5i.x = floatBitsToInt((-(intBitsToFloat(uf_remappedPS[20].x)) /resScale  * 0.5 + intBitsToFloat(PS0i)));
R8i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV0i.x), intBitsToFloat(R1i.z)));
PV1i.y = R8i.y;
R5i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R10i.z),intBitsToFloat(uf_remappedPS[21].y)) + intBitsToFloat(uf_remappedPS[21].x)));
R9i.x = uf_remappedPS[20].x;
R9i.x = floatBitsToInt(intBitsToFloat(R9i.x) / 2.0);
PS1i = R9i.x;
// 4
R1i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R6i.w), intBitsToFloat(uf_remappedPS[22].w)));
R5i.y = floatBitsToInt((-(intBitsToFloat(uf_remappedPS[20].y)) /resScale  * 0.5 + intBitsToFloat(PV1i.y)));
R9i.y = uf_remappedPS[20].y;
R9i.y = floatBitsToInt(intBitsToFloat(R9i.y) / 2.0);
PS0i = R9i.y;
}
if( activeMaskStackC[3] == true ) {
R2i.xyzw = floatBitsToInt(textureGather(textureUnitPS8, intBitsToFloat(R5i.xy)).xyzw);
R4i.xyzw = floatBitsToInt(textureGather(textureUnitPS14, intBitsToFloat(R5i.xy)).xyzw);
}
if( activeMaskStackC[3] == true ) {
activeMaskStack[3] = activeMaskStack[2];
activeMaskStackC[4] = activeMaskStackC[3];
// 0
PV0i.x = floatBitsToInt(intBitsToFloat(R2i.x) + intBitsToFloat(R2i.w));
R122i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R3i.z),intBitsToFloat(uf_remappedPS[22].z)) + intBitsToFloat(R1i.x)));
PS0i = R122i.x;
// 1
R123i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R3i.y),intBitsToFloat(uf_remappedPS[22].y)) + intBitsToFloat(PS0i)));
PV1i.x = R123i.x;
PV1i.w = floatBitsToInt(intBitsToFloat(R2i.y) + intBitsToFloat(PV0i.x));
// 2
R123i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R3i.x),intBitsToFloat(uf_remappedPS[22].x)) + intBitsToFloat(PV1i.x)));
PV0i.y = R123i.y;
PV0i.z = floatBitsToInt(intBitsToFloat(R2i.z) + intBitsToFloat(PV1i.w));
// 3
PV1i.x = ((intBitsToFloat(PV0i.z) != 0.0)?int(0xFFFFFFFF):int(0x0));
PV1i.y = ((intBitsToFloat(R9i.z) != intBitsToFloat(PV0i.z))?int(0xFFFFFFFF):int(0x0));
R3i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV0i.y), intBitsToFloat(R1i.z)));
// 4
R1i.w = ((PV1i.y == 0)?(0):(PV1i.x));
// 5
predResult = (R1i.w != 0);
activeMaskStack[3] = predResult;
activeMaskStackC[4] = predResult == true && activeMaskStackC[3] == true;
}
else {
activeMaskStack[3] = false;
activeMaskStackC[4] = false;
}
if( activeMaskStackC[4] == true ) {
// 0
R1i.x = floatBitsToInt((-(intBitsToFloat(uf_remappedPS[20].x)) /resScale  * 0.5 + intBitsToFloat(R5i.x)));
R3i.y = floatBitsToInt(-(intBitsToFloat(R9i.y)));
PV0i.z = floatBitsToInt(-(intBitsToFloat(R9i.x)));
PV0i.w = R9i.y;
R1i.y = floatBitsToInt((-(intBitsToFloat(uf_remappedPS[20].y)) /resScale  * 0.5 + intBitsToFloat(R5i.y)));
PS0i = R1i.y;
// 1
R2i.x = floatBitsToInt(intBitsToFloat(R5i.x) + intBitsToFloat(PV0i.z));
R2i.y = floatBitsToInt(intBitsToFloat(R5i.y) + intBitsToFloat(PV0i.w));
R1i.z = floatBitsToInt((intBitsToFloat(uf_remappedPS[20].x) /resScale  * 0.5 + intBitsToFloat(R5i.x)));
R1i.w = floatBitsToInt((intBitsToFloat(uf_remappedPS[20].y) /resScale  * 0.5 + intBitsToFloat(R5i.y)));
R3i.x = floatBitsToInt(intBitsToFloat(R9i.x) + intBitsToFloat(R5i.x));
PS1i = R3i.x;
// 2
backupReg0i = R3i.y;
R3i.y = floatBitsToInt(intBitsToFloat(backupReg0i) + intBitsToFloat(R5i.y));
}
if( activeMaskStackC[4] == true ) {
R2i.w = floatBitsToInt(texture(textureUnitPS8, intBitsToFloat(R1i.xy)).x);
R2i.x = floatBitsToInt(texture(textureUnitPS8, intBitsToFloat(R2i.xy)).x);
R2i.y = floatBitsToInt(texture(textureUnitPS8, intBitsToFloat(R1i.zw)).x);
R2i.z = floatBitsToInt(texture(textureUnitPS8, intBitsToFloat(R3i.xy)).x);
}
activeMaskStackC[3] = activeMaskStack[2] == true && activeMaskStackC[2] == true;
if( activeMaskStackC[3] == true ) {
// 0
backupReg0i = R8i.x;
backupReg1i = R8i.y;
R8i.x = floatBitsToInt((intBitsToFloat(uf_remappedPS[20].x) /resScale  * 0.5 + intBitsToFloat(backupReg0i)));
R8i.y = floatBitsToInt((intBitsToFloat(uf_remappedPS[20].y) /resScale  * 0.5 + intBitsToFloat(backupReg1i)));
R10i.z = floatBitsToInt(-(intBitsToFloat(R5i.w)) + intBitsToFloat(R3i.z));
R1i.w = floatBitsToInt((intBitsToFloat(uf_remappedPS[10].x) == intBitsToFloat(R2i.x))?1.0:0.0);
R1i.y = floatBitsToInt((intBitsToFloat(uf_remappedPS[10].x) == intBitsToFloat(R2i.w))?1.0:0.0);
PS0i = R1i.y;
}
if( activeMaskStackC[3] == true ) {
R5i.xyzw = floatBitsToInt(textureGather(textureUnitPS8, intBitsToFloat(R8i.xy)).xyzw);
R3i.xyz = floatBitsToInt(textureGather(textureUnitPS14, intBitsToFloat(R8i.xy)).xyz);
}
if( activeMaskStackC[3] == true ) {
activeMaskStack[3] = activeMaskStack[2];
activeMaskStackC[4] = activeMaskStackC[3];
// 0
PV0i.x = floatBitsToInt((intBitsToFloat(R4i.x) >= intBitsToFloat(R10i.z))?1.0:0.0);
PV0i.y = floatBitsToInt((intBitsToFloat(R4i.w) >= intBitsToFloat(R10i.z))?1.0:0.0);
PV0i.z = floatBitsToInt(intBitsToFloat(R5i.x) + intBitsToFloat(R5i.w));
PV0i.w = floatBitsToInt((intBitsToFloat(uf_remappedPS[10].x) == intBitsToFloat(R2i.y))?1.0:0.0);
PS0i = floatBitsToInt((intBitsToFloat(R4i.y) >= intBitsToFloat(R10i.z))?1.0:0.0);
// 1
PV1i.x = floatBitsToInt(intBitsToFloat(R1i.w) + intBitsToFloat(PV0i.x));
PV1i.y = floatBitsToInt(intBitsToFloat(R1i.y) + intBitsToFloat(PV0i.y));
PV1i.z = floatBitsToInt(intBitsToFloat(R5i.y) + intBitsToFloat(PV0i.z));
PV1i.w = floatBitsToInt(intBitsToFloat(PV0i.w) + intBitsToFloat(PS0i));
R127i.z = floatBitsToInt((intBitsToFloat(uf_remappedPS[10].x) == intBitsToFloat(R2i.z))?1.0:0.0);
PS1i = R127i.z;
// 2
PV0i.x = floatBitsToInt(min(intBitsToFloat(PV1i.x), 1.0));
PV0i.y = floatBitsToInt(min(intBitsToFloat(PV1i.y), 1.0));
PV0i.z = floatBitsToInt((intBitsToFloat(R4i.z) >= intBitsToFloat(R10i.z))?1.0:0.0);
PV0i.w = floatBitsToInt(intBitsToFloat(R5i.z) + intBitsToFloat(PV1i.z));
R127i.w = floatBitsToInt(min(intBitsToFloat(PV1i.w), 1.0));
PS0i = R127i.w;
// 3
PV1i.x = ((intBitsToFloat(R9i.z) != intBitsToFloat(PV0i.w))?int(0xFFFFFFFF):int(0x0));
PV1i.y = ((intBitsToFloat(PV0i.w) != 0.0)?int(0xFFFFFFFF):int(0x0));
PV1i.z = floatBitsToInt(intBitsToFloat(R127i.z) + intBitsToFloat(PV0i.z));
PV1i.w = floatBitsToInt(intBitsToFloat(PV0i.x) + intBitsToFloat(PV0i.y));
// 4
PV0i.x = floatBitsToInt(min(intBitsToFloat(PV1i.z), 1.0));
R1i.y = ((PV1i.x == 0)?(0):(PV1i.y));
PV0i.z = floatBitsToInt(intBitsToFloat(R127i.w) + intBitsToFloat(PV1i.w));
// 5
R2i.w = floatBitsToInt(intBitsToFloat(PV0i.x) + intBitsToFloat(PV0i.z));
// 6
predResult = (R1i.y != 0);
activeMaskStack[3] = predResult;
activeMaskStackC[4] = predResult == true && activeMaskStackC[3] == true;
}
else {
activeMaskStack[3] = false;
activeMaskStackC[4] = false;
}
if( activeMaskStackC[4] == true ) {
// 0
R2i.x = floatBitsToInt((intBitsToFloat(uf_remappedPS[20].x) /resScale  * 0.5 + intBitsToFloat(R8i.x)));
R1i.y = floatBitsToInt(-(intBitsToFloat(R9i.y)));
PV0i.y = R1i.y;
PV0i.z = floatBitsToInt(-(intBitsToFloat(R9i.x)));
PV0i.w = R9i.y;
R2i.y = floatBitsToInt((intBitsToFloat(uf_remappedPS[20].y) /resScale  * 0.5 + intBitsToFloat(R8i.y)));
PS0i = R2i.y;
// 1
R1i.xyz = floatBitsToInt(vec3(intBitsToFloat(PV0i.z),intBitsToFloat(PV0i.w),intBitsToFloat(R9i.x)) + vec3(intBitsToFloat(R8i.x),intBitsToFloat(R8i.y),intBitsToFloat(R8i.x)));
R1i.w = floatBitsToInt(intBitsToFloat(PV0i.y) + intBitsToFloat(R8i.y));
}
if( activeMaskStackC[4] == true ) {
R5i.x = floatBitsToInt(texture(textureUnitPS8, intBitsToFloat(R1i.xy)).x);
R5i.y = floatBitsToInt(texture(textureUnitPS8, intBitsToFloat(R2i.xy)).x);
R5i.z = floatBitsToInt(texture(textureUnitPS8, intBitsToFloat(R1i.zw)).x);
}
activeMaskStackC[3] = activeMaskStack[2] == true && activeMaskStackC[2] == true;
if( activeMaskStackC[3] == true ) {
// 0
PV0i.x = floatBitsToInt((intBitsToFloat(uf_remappedPS[10].x) == intBitsToFloat(R5i.y))?1.0:0.0);
PV0i.y = floatBitsToInt((intBitsToFloat(uf_remappedPS[10].x) == intBitsToFloat(R5i.x))?1.0:0.0);
PV0i.z = floatBitsToInt((intBitsToFloat(R3i.y) >= intBitsToFloat(R10i.z))?1.0:0.0);
PV0i.w = floatBitsToInt((intBitsToFloat(R3i.x) >= intBitsToFloat(R10i.z))?1.0:0.0);
R127i.z = floatBitsToInt((intBitsToFloat(uf_remappedPS[10].x) == intBitsToFloat(R5i.z))?1.0:0.0);
PS0i = R127i.z;
// 1
PV1i.x = floatBitsToInt((intBitsToFloat(R3i.z) >= intBitsToFloat(R10i.z))?1.0:0.0);
PV1i.z = floatBitsToInt(intBitsToFloat(PV0i.y) + intBitsToFloat(PV0i.w));
PV1i.w = floatBitsToInt(intBitsToFloat(PV0i.x) + intBitsToFloat(PV0i.z));
PS1i = floatBitsToInt(1.0 / intBitsToFloat(uf_remappedPS[16].x));
// 2
backupReg0i = R0i.x;
PV0i.x = floatBitsToInt(min(intBitsToFloat(PV1i.z), 1.0));
PV0i.y = floatBitsToInt(intBitsToFloat(R127i.z) + intBitsToFloat(PV1i.x));
PV0i.z = floatBitsToInt(min(intBitsToFloat(PV1i.w), 1.0));
R127i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(backupReg0i), intBitsToFloat(PS1i)));
// 3
PV1i.y = floatBitsToInt(intBitsToFloat(PV0i.x) + intBitsToFloat(PV0i.z));
PV1i.w = floatBitsToInt(min(intBitsToFloat(PV0i.y), 1.0));
// 4
PV0i.x = floatBitsToInt(intBitsToFloat(PV1i.w) + intBitsToFloat(PV1i.y));
// 5
PV1i.z = floatBitsToInt(intBitsToFloat(R2i.w) + intBitsToFloat(PV0i.x));
// 6
R123i.x = floatBitsToInt((intBitsToFloat(PV1i.z) * intBitsToFloat(0x3e124922) + -(intBitsToFloat(R8i.z))));
PV0i.x = R123i.x;
// 7
backupReg0i = R8i.z;
R8i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV0i.x),intBitsToFloat(R127i.w)) + intBitsToFloat(backupReg0i)));
}
activeMaskStackC[2] = activeMaskStack[1] == true && activeMaskStackC[1] == true;
activeMaskStack[1] = activeMaskStack[1] == false;
activeMaskStackC[2] = activeMaskStack[1] == true && activeMaskStackC[1] == true;
if( activeMaskStackC[2] == true ) {
// 0
R8i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R10i.z),intBitsToFloat(uf_remappedPS[21].y)) + intBitsToFloat(uf_remappedPS[21].x)));
R1i.w = floatBitsToInt(1.0);
PV0i.w = R1i.w;
R6i.w = uf_remappedPS[10].x;
R6i.w = floatBitsToInt(intBitsToFloat(R6i.w) * 4.0);
PS0i = R6i.w;
// 1
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R3i.x),intBitsToFloat(R3i.y),intBitsToFloat(R3i.z),intBitsToFloat(PV0i.w)),vec4(intBitsToFloat(uf_remappedPS[17].x),intBitsToFloat(uf_remappedPS[17].y),intBitsToFloat(uf_remappedPS[17].z),intBitsToFloat(uf_remappedPS[17].w))));
PV1i.x = tempi.x;
PV1i.y = tempi.x;
PV1i.z = tempi.x;
PV1i.w = tempi.x;
// 2
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R3i.x),intBitsToFloat(R3i.y),intBitsToFloat(R3i.z),intBitsToFloat(R1i.w)),vec4(intBitsToFloat(uf_remappedPS[18].x),intBitsToFloat(uf_remappedPS[18].y),intBitsToFloat(uf_remappedPS[18].z),intBitsToFloat(uf_remappedPS[18].w))));
PV0i.x = tempi.x;
PV0i.y = tempi.x;
PV0i.z = tempi.x;
PV0i.w = tempi.x;
R1i.z = floatBitsToInt(1.0 / intBitsToFloat(PV1i.x));
PS0i = R1i.z;
// 3
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R3i.x),intBitsToFloat(R3i.y),intBitsToFloat(R3i.z),intBitsToFloat(R1i.w)),vec4(intBitsToFloat(uf_remappedPS[19].x),intBitsToFloat(uf_remappedPS[19].y),intBitsToFloat(uf_remappedPS[19].z),intBitsToFloat(uf_remappedPS[19].w))));
PV1i.x = tempi.x;
PV1i.y = tempi.x;
PV1i.z = tempi.x;
PV1i.w = tempi.x;
R8i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV0i.x), intBitsToFloat(PS0i)));
PS1i = R8i.x;
// 4
R4i.x = floatBitsToInt((-(intBitsToFloat(uf_remappedPS[20].x)) /resScale  * 0.5 + intBitsToFloat(PS1i)));
R10i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV1i.x), intBitsToFloat(R1i.z)));
PV0i.y = R10i.y;
PV0i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R1i.w), intBitsToFloat(uf_remappedPS[22].w)));
R0i.x = uf_remappedPS[20].x;
R0i.x = floatBitsToInt(intBitsToFloat(R0i.x) / 2.0);
PS0i = R0i.x;
// 5
R1i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R3i.z),intBitsToFloat(uf_remappedPS[22].z)) + intBitsToFloat(PV0i.z)));
R4i.y = floatBitsToInt((-(intBitsToFloat(uf_remappedPS[20].y)) /resScale  * 0.5 + intBitsToFloat(PV0i.y)));
R9i.y = uf_remappedPS[20].y;
R9i.y = floatBitsToInt(intBitsToFloat(R9i.y) / 2.0);
PS1i = R9i.y;
}
if( activeMaskStackC[2] == true ) {
R2i.xyzw = floatBitsToInt(textureGather(textureUnitPS8, intBitsToFloat(R4i.xy)).xyzw);
R5i.xyzw = floatBitsToInt(textureGather(textureUnitPS14, intBitsToFloat(R4i.xy)).xyzw);
}
if( activeMaskStackC[2] == true ) {
activeMaskStack[2] = activeMaskStack[1];
activeMaskStackC[3] = activeMaskStackC[2];
// 0
PV0i.x = floatBitsToInt(intBitsToFloat(R2i.x) + intBitsToFloat(R2i.w));
R122i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R3i.y),intBitsToFloat(uf_remappedPS[22].y)) + intBitsToFloat(R1i.x)));
PS0i = R122i.x;
// 1
R123i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R3i.x),intBitsToFloat(uf_remappedPS[22].x)) + intBitsToFloat(PS0i)));
PV1i.z = R123i.z;
PV1i.w = floatBitsToInt(intBitsToFloat(R2i.y) + intBitsToFloat(PV0i.x));
// 2
PV0i.z = floatBitsToInt(intBitsToFloat(R2i.z) + intBitsToFloat(PV1i.w));
R3i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV1i.z), intBitsToFloat(R1i.z)));
PS0i = R3i.z;
// 3
PV1i.x = ((intBitsToFloat(PV0i.z) != 0.0)?int(0xFFFFFFFF):int(0x0));
PV1i.y = ((intBitsToFloat(R6i.w) != intBitsToFloat(PV0i.z))?int(0xFFFFFFFF):int(0x0));
// 4
R1i.w = ((PV1i.y == 0)?(0):(PV1i.x));
// 5
predResult = (R1i.w != 0);
activeMaskStack[2] = predResult;
activeMaskStackC[3] = predResult == true && activeMaskStackC[2] == true;
}
else {
activeMaskStack[2] = false;
activeMaskStackC[3] = false;
}
if( activeMaskStackC[3] == true ) {
// 0
R1i.x = floatBitsToInt((-(intBitsToFloat(uf_remappedPS[20].x)) /resScale  * 0.5 + intBitsToFloat(R4i.x)));
R3i.y = floatBitsToInt(-(intBitsToFloat(R9i.y)));
PV0i.z = floatBitsToInt(-(intBitsToFloat(R0i.x)));
PV0i.w = R9i.y;
R1i.y = floatBitsToInt((-(intBitsToFloat(uf_remappedPS[20].y)) /resScale  * 0.5 + intBitsToFloat(R4i.y)));
PS0i = R1i.y;
// 1
R2i.x = floatBitsToInt(intBitsToFloat(R4i.x) + intBitsToFloat(PV0i.z));
R2i.y = floatBitsToInt(intBitsToFloat(R4i.y) + intBitsToFloat(PV0i.w));
R1i.z = floatBitsToInt((intBitsToFloat(uf_remappedPS[20].x) /resScale  * 0.5 + intBitsToFloat(R4i.x)));
R1i.w = floatBitsToInt((intBitsToFloat(uf_remappedPS[20].y) /resScale  * 0.5 + intBitsToFloat(R4i.y)));
R3i.x = floatBitsToInt(intBitsToFloat(R0i.x) + intBitsToFloat(R4i.x));
PS1i = R3i.x;
// 2
backupReg0i = R3i.y;
R3i.y = floatBitsToInt(intBitsToFloat(backupReg0i) + intBitsToFloat(R4i.y));
}
if( activeMaskStackC[3] == true ) {
R2i.w = floatBitsToInt(texture(textureUnitPS8, intBitsToFloat(R1i.xy)).x);
R2i.x = floatBitsToInt(texture(textureUnitPS8, intBitsToFloat(R2i.xy)).x);
R2i.y = floatBitsToInt(texture(textureUnitPS8, intBitsToFloat(R1i.zw)).x);
R2i.z = floatBitsToInt(texture(textureUnitPS8, intBitsToFloat(R3i.xy)).x);
}
activeMaskStackC[2] = activeMaskStack[1] == true && activeMaskStackC[1] == true;
if( activeMaskStackC[2] == true ) {
// 0
backupReg0i = R2i.w;
R1i.x = floatBitsToInt((intBitsToFloat(uf_remappedPS[20].x) /resScale  * 0.5 + intBitsToFloat(R8i.x)));
R1i.y = floatBitsToInt((intBitsToFloat(uf_remappedPS[20].y) /resScale  * 0.5 + intBitsToFloat(R10i.y)));
R4i.z = floatBitsToInt(-(intBitsToFloat(R8i.y)) + intBitsToFloat(R3i.z));
R1i.w = floatBitsToInt((intBitsToFloat(uf_remappedPS[10].x) == intBitsToFloat(R2i.x))?1.0:0.0);
R2i.w = floatBitsToInt((intBitsToFloat(uf_remappedPS[10].x) == intBitsToFloat(backupReg0i))?1.0:0.0);
PS0i = R2i.w;
}
if( activeMaskStackC[2] == true ) {
R8i.xyzw = floatBitsToInt(textureGather(textureUnitPS8, intBitsToFloat(R1i.xy)).xyzw);
R3i.xyz = floatBitsToInt(textureGather(textureUnitPS14, intBitsToFloat(R1i.xy)).xyz);
}
if( activeMaskStackC[2] == true ) {
activeMaskStack[2] = activeMaskStack[1];
activeMaskStackC[3] = activeMaskStackC[2];
// 0
PV0i.x = floatBitsToInt(intBitsToFloat(R8i.x) + intBitsToFloat(R8i.w));
PV0i.y = floatBitsToInt((intBitsToFloat(R5i.x) >= intBitsToFloat(R4i.z))?1.0:0.0);
PV0i.z = floatBitsToInt((intBitsToFloat(uf_remappedPS[10].x) == intBitsToFloat(R2i.y))?1.0:0.0);
PV0i.w = floatBitsToInt((intBitsToFloat(R5i.w) >= intBitsToFloat(R4i.z))?1.0:0.0);
PS0i = floatBitsToInt((intBitsToFloat(R5i.y) >= intBitsToFloat(R4i.z))?1.0:0.0);
// 1
PV1i.x = floatBitsToInt(intBitsToFloat(PV0i.z) + intBitsToFloat(PS0i));
PV1i.y = floatBitsToInt(intBitsToFloat(R1i.w) + intBitsToFloat(PV0i.y));
PV1i.z = floatBitsToInt(intBitsToFloat(R8i.y) + intBitsToFloat(PV0i.x));
PV1i.w = floatBitsToInt(intBitsToFloat(R2i.w) + intBitsToFloat(PV0i.w));
R127i.z = floatBitsToInt((intBitsToFloat(uf_remappedPS[10].x) == intBitsToFloat(R2i.z))?1.0:0.0);
PS1i = R127i.z;
// 2
PV0i.x = floatBitsToInt(intBitsToFloat(R8i.z) + intBitsToFloat(PV1i.z));
PV0i.y = floatBitsToInt(min(intBitsToFloat(PV1i.y), 1.0));
PV0i.z = floatBitsToInt((intBitsToFloat(R5i.z) >= intBitsToFloat(R4i.z))?1.0:0.0);
PV0i.w = floatBitsToInt(min(intBitsToFloat(PV1i.w), 1.0));
R127i.x = floatBitsToInt(min(intBitsToFloat(PV1i.x), 1.0));
PS0i = R127i.x;
// 3
PV1i.x = ((intBitsToFloat(R6i.w) != intBitsToFloat(PV0i.x))?int(0xFFFFFFFF):int(0x0));
PV1i.y = floatBitsToInt(intBitsToFloat(PV0i.y) + intBitsToFloat(PV0i.w));
PV1i.z = floatBitsToInt(intBitsToFloat(R127i.z) + intBitsToFloat(PV0i.z));
PV1i.w = ((intBitsToFloat(PV0i.x) != 0.0)?int(0xFFFFFFFF):int(0x0));
// 4
PV0i.x = floatBitsToInt(min(intBitsToFloat(PV1i.z), 1.0));
PV0i.z = floatBitsToInt(intBitsToFloat(R127i.x) + intBitsToFloat(PV1i.y));
R1i.w = ((PV1i.x == 0)?(0):(PV1i.w));
// 5
R2i.w = floatBitsToInt(intBitsToFloat(PV0i.x) + intBitsToFloat(PV0i.z));
// 6
predResult = (R1i.w != 0);
activeMaskStack[2] = predResult;
activeMaskStackC[3] = predResult == true && activeMaskStackC[2] == true;
}
else {
activeMaskStack[2] = false;
activeMaskStackC[3] = false;
}
if( activeMaskStackC[3] == true ) {
// 0
R2i.x = floatBitsToInt((intBitsToFloat(uf_remappedPS[20].x) /resScale  * 0.5 + intBitsToFloat(R1i.x)));
R4i.y = floatBitsToInt(-(intBitsToFloat(R9i.y)));
PV0i.y = R4i.y;
PV0i.z = floatBitsToInt(-(intBitsToFloat(R0i.x)));
PV0i.w = R9i.y;
R2i.y = floatBitsToInt((intBitsToFloat(uf_remappedPS[20].y) /resScale  * 0.5 + intBitsToFloat(R1i.y)));
PS0i = R2i.y;
// 1
backupReg0i = R1i.x;
backupReg1i = R1i.y;
backupReg0i = R1i.x;
backupReg1i = R1i.y;
R1i.xyz = floatBitsToInt(vec3(intBitsToFloat(PV0i.z),intBitsToFloat(PV0i.w),intBitsToFloat(R0i.x)) + vec3(intBitsToFloat(backupReg0i),intBitsToFloat(backupReg1i),intBitsToFloat(backupReg0i)));
R1i.w = floatBitsToInt(intBitsToFloat(PV0i.y) + intBitsToFloat(backupReg1i));
}
if( activeMaskStackC[3] == true ) {
R8i.x = floatBitsToInt(texture(textureUnitPS8, intBitsToFloat(R1i.xy)).x);
R8i.y = floatBitsToInt(texture(textureUnitPS8, intBitsToFloat(R2i.xy)).x);
R8i.z = floatBitsToInt(texture(textureUnitPS8, intBitsToFloat(R1i.zw)).x);
}
activeMaskStackC[2] = activeMaskStack[1] == true && activeMaskStackC[1] == true;
if( activeMaskStackC[2] == true ) {
// 0
PV0i.x = floatBitsToInt((intBitsToFloat(R3i.x) >= intBitsToFloat(R4i.z))?1.0:0.0);
PV0i.y = floatBitsToInt((intBitsToFloat(R3i.y) >= intBitsToFloat(R4i.z))?1.0:0.0);
PV0i.z = floatBitsToInt((intBitsToFloat(uf_remappedPS[10].x) == intBitsToFloat(R8i.x))?1.0:0.0);
PV0i.w = floatBitsToInt((intBitsToFloat(uf_remappedPS[10].x) == intBitsToFloat(R8i.y))?1.0:0.0);
R127i.y = floatBitsToInt((intBitsToFloat(uf_remappedPS[10].x) == intBitsToFloat(R8i.z))?1.0:0.0);
PS0i = R127i.y;
// 1
PV1i.x = floatBitsToInt(intBitsToFloat(PV0i.w) + intBitsToFloat(PV0i.y));
PV1i.y = floatBitsToInt(intBitsToFloat(PV0i.z) + intBitsToFloat(PV0i.x));
PV1i.z = floatBitsToInt(-(intBitsToFloat(uf_remappedPS[8].x)) + intBitsToFloat(uf_remappedPS[23].x));
PV1i.w = floatBitsToInt((intBitsToFloat(R3i.z) >= intBitsToFloat(R4i.z))?1.0:0.0);
// 2
PV0i.x = floatBitsToInt(intBitsToFloat(PV1i.z) * intBitsToFloat(0x3dcccccd));
PV0i.y = floatBitsToInt(min(intBitsToFloat(PV1i.x), 1.0));
PV0i.z = floatBitsToInt(intBitsToFloat(R127i.y) + intBitsToFloat(PV1i.w));
PV0i.w = floatBitsToInt(min(intBitsToFloat(PV1i.y), 1.0));
// 3
PV1i.x = floatBitsToInt(min(intBitsToFloat(PV0i.z), 1.0));
PV1i.y = floatBitsToInt(-(intBitsToFloat(uf_remappedPS[23].x)) + intBitsToFloat(PV0i.x));
PV1i.z = floatBitsToInt(intBitsToFloat(PV0i.w) + intBitsToFloat(PV0i.y));
R127i.z = floatBitsToInt(1.0 / intBitsToFloat(PV0i.x));
PS1i = R127i.z;
// 4
PV0i.x = floatBitsToInt(-(intBitsToFloat(R4i.w)) + intBitsToFloat(PV1i.y));
PV0i.w = floatBitsToInt(intBitsToFloat(PV1i.x) + intBitsToFloat(PV1i.z));
// 5
PV1i.y = floatBitsToInt(intBitsToFloat(R2i.w) + intBitsToFloat(PV0i.w));
PV1i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV0i.x), intBitsToFloat(R127i.z)));
// 6
R127i.x = floatBitsToInt(intBitsToFloat(PV1i.y) * intBitsToFloat(0x3e124922));
PV0i.x = R127i.x;
R127i.y = floatBitsToInt(max(intBitsToFloat(PV1i.w), 0.0));
// 7
PV1i.x = floatBitsToInt(-(intBitsToFloat(PV0i.x)) + 1.0);
// 8
R8i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV1i.x),intBitsToFloat(R127i.y)) + intBitsToFloat(R127i.x)));
}
activeMaskStackC[1] = activeMaskStack[0] == true && activeMaskStackC[0] == true;
if( activeMaskStackC[1] == true ) {
// 0
backupReg0i = R0i.w;
PV0i.x = floatBitsToInt(-(intBitsToFloat(uf_remappedPS[24].x)) + 1.0);
R123i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(uf_remappedPS[25].z),-(intBitsToFloat(R8i.z))) + intBitsToFloat(uf_remappedPS[25].z)));
PV0i.y = R123i.y;
R127i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R10i.w), intBitsToFloat(R0i.y)));
PV0i.w = floatBitsToInt(max(intBitsToFloat(uf_remappedPS[24].x), intBitsToFloat(0x33d6bf95)));
R2i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R0i.z), intBitsToFloat(backupReg0i)));
PS0i = R2i.x;
// 1
PV1i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(uf_remappedPS[6].y), intBitsToFloat(uf_remappedPS[26].w)));
R0i.y = floatBitsToInt(intBitsToFloat(R8i.z) + intBitsToFloat(PV0i.y));
PV1i.z = floatBitsToInt(intBitsToFloat(R3i.w) + -(intBitsToFloat(PV0i.x)));
R6i.w = 0;
R127i.y = floatBitsToInt(1.0 / intBitsToFloat(PV0i.w));
PS1i = R127i.y;
// 2
PV0i.x = floatBitsToInt(max(intBitsToFloat(PV1i.z), -(intBitsToFloat(PV1i.z))));
PV0i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV1i.x), intBitsToFloat(uf_remappedPS[27].z)));
PV0i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV1i.x), intBitsToFloat(uf_remappedPS[27].y)));
PV0i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV1i.x), intBitsToFloat(uf_remappedPS[27].x)));
// 3
R123i.x = floatBitsToInt((mul_nonIEEE(-(intBitsToFloat(PV0i.x)),intBitsToFloat(R127i.y)) + 1.0));
R123i.x = clampFI32(R123i.x);
PV1i.x = R123i.x;
R1i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R127i.z), intBitsToFloat(PV0i.y)));
R0i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R127i.z), intBitsToFloat(PV0i.z)));
R0i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R127i.z), intBitsToFloat(PV0i.w)));
R2i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(uf_remappedPS[6].y), intBitsToFloat(uf_remappedPS[28].x)));
PS1i = R2i.y;
// 4
R0i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(uf_remappedPS[6].y), intBitsToFloat(uf_remappedPS[28].y)));
tempResultf = log2(intBitsToFloat(PV1i.x));
if( isinf(tempResultf) == true ) tempResultf = -3.40282347E+38F;
R127i.z = floatBitsToInt(tempResultf);
PS0i = R127i.z;
// 5
PV1i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(uf_remappedPS[6].y), intBitsToFloat(uf_remappedPS[28].w)));
R1i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(uf_remappedPS[6].y), intBitsToFloat(uf_remappedPS[28].z)));
// 6
R1i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R10i.w), intBitsToFloat(PV1i.z)));
PV0i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(uf_remappedPS[24].y), intBitsToFloat(R127i.z)));
R5i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R9i.w), intBitsToFloat(uf_remappedPS[5].x)));
// 7
R4i.xyz = ivec3(uf_remappedPS[29].x,uf_remappedPS[29].y,uf_remappedPS[29].z);
R3i.x = floatBitsToInt(exp2(intBitsToFloat(PV0i.y)));
PS1i = R3i.x;
}
if( activeMaskStackC[1] == true ) {
// 0
R123i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R0i.y),intBitsToFloat(uf_remappedPS[30].y)) + intBitsToFloat(uf_remappedPS[31].y)));
PV0i.z = R123i.z;
R123i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R0i.y),intBitsToFloat(uf_remappedPS[30].x)) + intBitsToFloat(uf_remappedPS[31].x)));
PV0i.w = R123i.w;
// 1
R127i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R6i.x),intBitsToFloat(PV0i.w)) + intBitsToFloat(R0i.w)));
PV1i.x = R127i.x;
R123i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R0i.y),intBitsToFloat(uf_remappedPS[30].z)) + intBitsToFloat(uf_remappedPS[31].z)));
PV1i.y = R123i.y;
R127i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R7i.y),intBitsToFloat(PV0i.z)) + intBitsToFloat(R0i.z)));
PV1i.w = R127i.w;
// 2
backupReg0i = R0i.x;
PV0i.x = floatBitsToInt(-(intBitsToFloat(PV1i.w)) + intBitsToFloat(backupReg0i));
PV0i.y = floatBitsToInt(-(intBitsToFloat(uf_remappedPS[32].z)) + intBitsToFloat(uf_remappedPS[32].w));
R127i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R7i.z),intBitsToFloat(PV1i.y)) + intBitsToFloat(R1i.y)));
PV0i.z = R127i.z;
PV0i.w = floatBitsToInt(-(intBitsToFloat(PV1i.x)) + intBitsToFloat(R2i.y));
// 3
R123i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV0i.w),intBitsToFloat(R1i.x)) + intBitsToFloat(R127i.x)));
PV1i.x = R123i.x;
PV1i.y = floatBitsToInt(-(intBitsToFloat(PV0i.z)) + intBitsToFloat(R1i.w));
R123i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV0i.x),intBitsToFloat(R1i.x)) + intBitsToFloat(R127i.w)));
PV1i.w = R123i.w;
PS1i = floatBitsToInt(1.0 / intBitsToFloat(PV0i.y));
// 4
PV0i.x = floatBitsToInt(-(intBitsToFloat(R127i.w)) + intBitsToFloat(PV1i.w));
PV0i.y = floatBitsToInt(-(intBitsToFloat(R127i.x)) + intBitsToFloat(PV1i.x));
R123i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV1i.y),intBitsToFloat(R1i.x)) + intBitsToFloat(R127i.z)));
PV0i.z = R123i.z;
R6i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R2i.x), intBitsToFloat(PS1i)));
PS0i = R6i.x;
// 5
R123i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV0i.x),intBitsToFloat(R3i.x)) + intBitsToFloat(R127i.w)));
PV1i.y = R123i.y;
R123i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV0i.y),intBitsToFloat(R3i.x)) + intBitsToFloat(R127i.x)));
PV1i.z = R123i.z;
PV1i.w = floatBitsToInt(-(intBitsToFloat(R127i.z)) + intBitsToFloat(PV0i.z));
// 6
R123i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV1i.w),intBitsToFloat(R3i.x)) + intBitsToFloat(R127i.z)));
PV0i.x = R123i.x;
R0i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV1i.y), intBitsToFloat(R4i.y)));
R1i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV1i.z), intBitsToFloat(R4i.x)));
// 7
R4i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV0i.x), intBitsToFloat(R4i.z)));
}
if( activeMaskStackC[1] == true ) {
// 0
R5i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(uf_remappedPS[7].x), intBitsToFloat(R1i.w)));
R5i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(uf_remappedPS[7].y), intBitsToFloat(R0i.z)));
R5i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(uf_remappedPS[7].z), intBitsToFloat(R4i.y)));
// 1
R2i.xyz = ivec3(R7i.x,R6i.y,R6i.z);
R2i.w = R7i.w;
// 2
R0i.xyz = ivec3(R5i.x,R5i.y,R5i.z);
R0i.w = R5i.w;
// 3
R1i.xyz = ivec3(R6i.x,R6i.w,R6i.w);
R1i.w = R6i.w;
}
// export
passPixelColor0 = vec4(intBitsToFloat(R0i.x), intBitsToFloat(R0i.y), intBitsToFloat(R0i.z), intBitsToFloat(R0i.w));
passPixelColor2 = vec4(intBitsToFloat(R1i.x), intBitsToFloat(R1i.y), intBitsToFloat(R1i.z), intBitsToFloat(R1i.w));
passPixelColor4 = vec4(intBitsToFloat(R2i.x), intBitsToFloat(R2i.y), intBitsToFloat(R2i.z), intBitsToFloat(R2i.w));
}
