<?php
include 'Source/functions.php';
$fullWidth = $argv[1];
$fullHeight = $argv[2];
$scaleFactorX = always_decimal_format($fullWidth / 1280.0);
$scaleFactorY = always_decimal_format($fullHeight / 720.0);
?>

#version 420
#extension GL_ARB_texture_gather : enable
#extension GL_ARB_separate_shader_objects : enable
const float resScale = <?=$scaleFactorX?>; //self shading//shadows
// shader 82395d1cbdf2c430
uniform ivec4 uf_remappedPS[28];
layout(binding = 0) uniform sampler2D textureUnitPS0;// Tex0 addr 0x3547b000 res 128x512x1 dim 1 tm: 4 format 0431 compSel: 0 1 2 3 mipView: 0x0 (num 0xa) sliceView: 0x0 (num 0x1) Sampler0 ClampX/Y/Z: 0 0 2 border: 0
layout(binding = 1) uniform sampler2D textureUnitPS1;// Tex1 addr 0x10067000 res 1x1x1 dim 1 tm: 2 format 001a compSel: 0 1 2 3 mipView: 0x0 (num 0x1) sliceView: 0x0 (num 0x1) Sampler1 ClampX/Y/Z: 2 2 2 border: 0
layout(binding = 2) uniform sampler2D textureUnitPS2;// Tex2 addr 0x35487000 res 256x256x1 dim 1 tm: 4 format 0431 compSel: 0 1 2 3 mipView: 0x0 (num 0x9) sliceView: 0x0 (num 0x1) Sampler2 ClampX/Y/Z: 0 0 2 border: 0
layout(binding = 5) uniform sampler2D textureUnitPS5;// Tex5 addr 0x35487000 res 256x256x1 dim 1 tm: 4 format 0431 compSel: 0 1 2 3 mipView: 0x0 (num 0x9) sliceView: 0x0 (num 0x1) Sampler5 ClampX/Y/Z: 0 0 2 border: 0
layout(binding = 8) uniform sampler2D textureUnitPS8;// Tex8 addr 0x27fb9000 res 1024x1024x1 dim 1 tm: 4 format 001a compSel: 3 3 3 3 mipView: 0x0 (num 0x1) sliceView: 0x0 (num 0x1) Sampler8 ClampX/Y/Z: 0 0 0 border: 0
layout(binding = 9) uniform samplerCubeArray textureUnitPS9;// Tex9 addr 0x35022000 res 256x256x1 dim 3 tm: 4 format 0820 compSel: 0 1 2 3 mipView: 0x0 (num 0x3) sliceView: 0x0 (num 0x6) Sampler9 ClampX/Y/Z: 2 2 2 border: 0
layout(binding = 13) uniform sampler2D textureUnitPS13;// Tex13 addr 0x277b8800 res 1024x2048x1 dim 1 tm: 4 format 0011 compSel: 0 0 0 0 mipView: 0x0 (num 0x1) sliceView: 0x0 (num 0x1) Sampler13 ClampX/Y/Z: 6 6 6 border: 2
layout(binding = 14) uniform sampler2D textureUnitPS14;// Tex14 addr 0x27fb9000 res 1024x1024x1 dim 1 tm: 4 format 0011 compSel: 0 0 0 0 mipView: 0x0 (num 0x1) sliceView: 0x0 (num 0x1) Sampler14 ClampX/Y/Z: 6 6 6 border: 2
layout(binding = 15) uniform sampler2D textureUnitPS15;// Tex15 addr 0x277b8800 res 1024x2048x1 dim 1 tm: 4 format 001a compSel: 3 3 3 3 mipView: 0x0 (num 0x1) sliceView: 0x0 (num 0x1) Sampler15 ClampX/Y/Z: 6 6 6 border: 1
layout(location = 1) in vec4 passParameterSem130;
layout(location = 2) in vec4 passParameterSem128;
layout(location = 3) in vec4 passParameterSem144;
layout(location = 4) in vec4 passParameterSem136;
layout(location = 0) out vec4 passPixelColor0;
layout(location = 2) out vec4 passPixelColor2;
uniform vec2 uf_fragCoordScale;
void redcCUBE(vec4 src0, vec4 src1, out vec3 stm, out int faceId)
{
// stm -> x .. s, y .. t, z .. MajorAxis*2.0
vec3 inputCoord = normalize(vec3(src1.y, src1.x, src0.x));
float rx = inputCoord.x;
float ry = inputCoord.y;
float rz = inputCoord.z;
if( abs(rx) > abs(ry) && abs(rx) > abs(rz) )
{
stm.z = rx*2.0;
stm.xy = vec2(ry,rz);	
if( rx >= 0.0 )
{
faceId = 0;
}
else
{
faceId = 1;
}
}
else if( abs(ry) > abs(rx) && abs(ry) > abs(rz) )
{
stm.z = ry*2.0;
stm.xy = vec2(rx,rz);	
if( ry >= 0.0 )
{
faceId = 2;
}
else
{
faceId = 3;
}
}
else //if( abs(rz) > abs(ry) && abs(rz) > abs(rx) )
{
stm.z = rz*2.0;
stm.xy = vec2(rx,ry);	
if( rz >= 0.0 )
{
faceId = 4;
}
else
{
faceId = 5;
}
}
}
vec3 redcCUBEReverse(vec2 st, int faceId)
{
st.yx = st.xy;
vec3 v;
float majorAxis = 1.0;
if( faceId == 0 )
{
v.yz = (st-vec2(1.5))*(majorAxis*2.0);
v.x = 1.0;
}
else if( faceId == 1 )
{
v.yz = (st-vec2(1.5))*(majorAxis*2.0);
v.x = -1.0;
}
else if( faceId == 2 )
{
v.xz = (st-vec2(1.5))*(majorAxis*2.0);
v.y = 1.0;
}
else if( faceId == 3 )
{
v.xz = (st-vec2(1.5))*(majorAxis*2.0);
v.y = -1.0;
}
else if( faceId == 4 )
{
v.xy = (st-vec2(1.5))*(majorAxis*2.0);
v.z = 1.0;
}
else
{
v.xy = (st-vec2(1.5))*(majorAxis*2.0);
v.z = -1.0;
}
return v;
}
int clampFI32(int v)
{
if( v == 0x7FFFFFFF )
	return floatBitsToInt(1.0);
else if( v == 0xFFFFFFFF )
	return floatBitsToInt(0.0);
return floatBitsToInt(clamp(intBitsToFloat(v), 0.0, 1.0));
}
float mul_nonIEEE(float a, float b){ if( a == 0.0 || b == 0.0 ) return 0.0; return a*b; }
void main()
{
ivec4 R0i = ivec4(0);
ivec4 R1i = ivec4(0);
ivec4 R2i = ivec4(0);
ivec4 R3i = ivec4(0);
ivec4 R4i = ivec4(0);
ivec4 R5i = ivec4(0);
ivec4 R6i = ivec4(0);
ivec4 R7i = ivec4(0);
ivec4 R8i = ivec4(0);
ivec4 R9i = ivec4(0);
ivec4 R10i = ivec4(0);
ivec4 R122i = ivec4(0);
ivec4 R123i = ivec4(0);
ivec4 R124i = ivec4(0);
ivec4 R125i = ivec4(0);
ivec4 R126i = ivec4(0);
ivec4 R127i = ivec4(0);
int backupReg0i, backupReg1i, backupReg2i, backupReg3i, backupReg4i;
ivec4 PV0i = ivec4(0), PV1i = ivec4(0);
int PS0i = 0, PS1i = 0;
ivec4 tempi = ivec4(0);
float tempResultf;
int tempResulti;
ivec4 ARi = ivec4(0);
bool predResult = true;
bool activeMaskStack[4];
bool activeMaskStackC[5];
activeMaskStack[0] = false;
activeMaskStack[1] = false;
activeMaskStack[2] = false;
activeMaskStackC[0] = false;
activeMaskStackC[1] = false;
activeMaskStackC[2] = false;
activeMaskStackC[3] = false;
activeMaskStack[0] = true;
activeMaskStackC[0] = true;
activeMaskStackC[1] = true;
vec3 cubeMapSTM;
int cubeMapFaceId;
float cubeMapArrayIndex9 = 0.0;
R0i = floatBitsToInt(vec4(gl_FragCoord.xy*uf_fragCoordScale,gl_FragCoord.zw));
R1i = floatBitsToInt(passParameterSem130);
R2i = floatBitsToInt(passParameterSem128);
R3i = floatBitsToInt(passParameterSem144);
R4i = floatBitsToInt(passParameterSem136);
if( activeMaskStackC[1] == true ) {
R8i.xyzw = floatBitsToInt(texture(textureUnitPS0, intBitsToFloat(R4i.xy)).xyzw);
R5i.xyz = floatBitsToInt(texture(textureUnitPS1, intBitsToFloat(R4i.xy)).xyz);
R6i.xyz = floatBitsToInt(texture(textureUnitPS2, intBitsToFloat(R4i.xy)).xyz);
R2i.w = floatBitsToInt(texture(textureUnitPS5, intBitsToFloat(R4i.xy)).w);
}
if( activeMaskStackC[1] == true ) {
// 0
R127i.xyz = floatBitsToInt(vec3(-(intBitsToFloat(R2i.x)),-(intBitsToFloat(R2i.y)),-(intBitsToFloat(R2i.z))) + vec3(intBitsToFloat(uf_remappedPS[0].x),intBitsToFloat(uf_remappedPS[0].y),intBitsToFloat(uf_remappedPS[0].z)));
PS0i = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R1i.z), intBitsToFloat(R1i.z)));
// 1
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R1i.x),intBitsToFloat(R1i.y),intBitsToFloat(PS0i),-0.0),vec4(intBitsToFloat(R1i.x),intBitsToFloat(R1i.y),1.0,0.0)));
PV1i.x = tempi.x;
PV1i.y = tempi.x;
PV1i.z = tempi.x;
PV1i.w = tempi.x;
R126i.x = floatBitsToInt(-(intBitsToFloat(uf_remappedPS[1].z)) + 1.0);
PS1i = R126i.x;
// 2
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R127i.x),intBitsToFloat(R127i.y),intBitsToFloat(R127i.z),-0.0),vec4(intBitsToFloat(R127i.x),intBitsToFloat(R127i.y),intBitsToFloat(R127i.z),0.0)));
PV0i.x = tempi.x;
PV0i.y = tempi.x;
PV0i.z = tempi.x;
PV0i.w = tempi.x;
tempResultf = 1.0 / sqrt(intBitsToFloat(PV1i.x));
PS0i = floatBitsToInt(tempResultf);
// 3
R125i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R1i.x), intBitsToFloat(PS0i)));
R125i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R1i.y), intBitsToFloat(PS0i)));
R126i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R1i.z), intBitsToFloat(PS0i)));
R127i.w = floatBitsToInt(intBitsToFloat(uf_remappedPS[2].x) + -(intBitsToFloat(uf_remappedPS[2].y)));
tempResultf = 1.0 / sqrt(intBitsToFloat(PV0i.x));
PS1i = floatBitsToInt(tempResultf);
// 4
backupReg0i = R127i.x;
R127i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(backupReg0i), intBitsToFloat(PS1i)));
PV0i.x = R127i.x;
R124i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R127i.y), intBitsToFloat(PS1i)));
PV0i.y = R124i.y;
R125i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R127i.z), intBitsToFloat(PS1i)));
PV0i.z = R125i.z;
PV0i.w = floatBitsToInt(max(-(intBitsToFloat(uf_remappedPS[2].y)), 0.0));
R127i.y = floatBitsToInt(-(intBitsToFloat(R126i.x)) + 1.0);
PS0i = R127i.y;
// 5
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R125i.x),intBitsToFloat(R125i.y),intBitsToFloat(R126i.z),-0.0),vec4(intBitsToFloat(PV0i.x),intBitsToFloat(PV0i.y),intBitsToFloat(PV0i.z),0.0)));
PV1i.x = tempi.x;
PV1i.y = tempi.x;
PV1i.z = tempi.x;
PV1i.w = tempi.x;
R126i.y = floatBitsToInt(min(intBitsToFloat(R127i.w), intBitsToFloat(PV0i.w)));
PS1i = R126i.y;
// 6
PV0i.x = floatBitsToInt(max(-(intBitsToFloat(uf_remappedPS[2].w)), 0.0));
PV0i.y = floatBitsToInt(max(intBitsToFloat(PV1i.x), 0.0));
R127i.z = floatBitsToInt(intBitsToFloat(uf_remappedPS[2].z) + -(intBitsToFloat(uf_remappedPS[2].w)));
PV0i.z = R127i.z;
PV0i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R126i.z), -(intBitsToFloat(R125i.z))));
PS0i = floatBitsToInt(1.0 / intBitsToFloat(R127i.w));
// 7
backupReg0i = R127i.y;
R124i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R126i.y), intBitsToFloat(PS0i)));
PV1i.x = R124i.x;
R127i.y = floatBitsToInt(min(intBitsToFloat(PV0i.z), intBitsToFloat(PV0i.x)));
R123i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R125i.x),-(intBitsToFloat(R127i.x))) + intBitsToFloat(PV0i.w)));
PV1i.z = R123i.z;
PV1i.w = floatBitsToInt(-(intBitsToFloat(PV0i.y)) + 1.0);
R127i.w = floatBitsToInt(1.0 / intBitsToFloat(backupReg0i));
PS1i = R127i.w;
// 8
R126i.y = floatBitsToInt(-(intBitsToFloat(PV1i.x)) + 1.0);
PV0i.z = floatBitsToInt(intBitsToFloat(PV1i.w) + -(intBitsToFloat(R126i.x)));
R126i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R125i.y),-(intBitsToFloat(R124i.y))) + intBitsToFloat(PV1i.z))*2.0);
PV0i.w = R126i.w;
PS0i = floatBitsToInt(1.0 / intBitsToFloat(R127i.z));
// 9
PV1i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV0i.z), intBitsToFloat(R127i.w)));
PV1i.x = clampFI32(PV1i.x);
R0i.y = floatBitsToInt((mul_nonIEEE(-(intBitsToFloat(PV0i.w)),intBitsToFloat(R125i.y)) + -(intBitsToFloat(R124i.y))));
R127i.z = floatBitsToInt((mul_nonIEEE(-(intBitsToFloat(R127i.y)),intBitsToFloat(PS0i)) + 1.0));
PV1i.z = R127i.z;
R9i.x = floatBitsToInt((mul_nonIEEE(-(intBitsToFloat(PV0i.w)),intBitsToFloat(R125i.x)) + -(intBitsToFloat(R127i.x))));
PS1i = R9i.x;
// 10
R123i.y = floatBitsToInt((intBitsToFloat(0xc0000000) * intBitsToFloat(PV1i.x) + intBitsToFloat(0x40400000)));
PV0i.y = R123i.y;
PV0i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV1i.x), intBitsToFloat(PV1i.x)));
PV0i.w = floatBitsToInt(-(intBitsToFloat(PV1i.z)) + intBitsToFloat(R126i.y));
R7i.z = floatBitsToInt((mul_nonIEEE(-(intBitsToFloat(R126i.w)),intBitsToFloat(R126i.z)) + -(intBitsToFloat(R125i.z))));
PS0i = R7i.z;
// 11
PV1i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV0i.w), intBitsToFloat(R8i.x)));
PV1i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV0i.w), intBitsToFloat(R8i.z)));
PV1i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV0i.w), intBitsToFloat(R8i.y)));
PV1i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV0i.z), intBitsToFloat(PV0i.y)));
// 12
R123i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R124i.x),intBitsToFloat(R5i.y)) + intBitsToFloat(PV1i.z)));
PV0i.x = R123i.x;
R123i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R124i.x),intBitsToFloat(R5i.z)) + intBitsToFloat(PV1i.y)));
PV0i.z = R123i.z;
R123i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R124i.x),intBitsToFloat(R5i.x)) + intBitsToFloat(PV1i.x)));
PV0i.w = R123i.w;
tempResultf = log2(intBitsToFloat(PV1i.w));
if( isinf(tempResultf) == true ) tempResultf = -3.40282347E+38F;
PS0i = floatBitsToInt(tempResultf);
// 13
backupReg0i = R6i.x;
backupReg1i = R6i.y;
R6i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R127i.z),intBitsToFloat(R6i.z)) + intBitsToFloat(PV0i.z)));
R6i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R127i.z),intBitsToFloat(backupReg0i)) + intBitsToFloat(PV0i.w)));
PV1i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(uf_remappedPS[1].w), intBitsToFloat(PS0i)));
R1i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R127i.z),intBitsToFloat(backupReg1i)) + intBitsToFloat(PV0i.x)));
// 14
PS0i = floatBitsToInt(exp2(intBitsToFloat(PV1i.z)));
// 15
R7i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(uf_remappedPS[1].y), intBitsToFloat(PS0i)));
}
if( activeMaskStackC[1] == true ) {
activeMaskStack[1] = activeMaskStack[0];
activeMaskStackC[2] = activeMaskStackC[1];
// 0
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R1i.x),intBitsToFloat(R1i.y),intBitsToFloat(R1i.z),-0.0),vec4(-(intBitsToFloat(uf_remappedPS[3].x)),-(intBitsToFloat(uf_remappedPS[3].y)),-(intBitsToFloat(uf_remappedPS[3].z)),0.0)));
PV0i.x = tempi.x;
PV0i.y = tempi.x;
PV0i.z = tempi.x;
PV0i.w = tempi.x;
// 1
R0i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R6i.y), intBitsToFloat(uf_remappedPS[4].x)));
R7i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R1i.w), intBitsToFloat(uf_remappedPS[4].x)));
R127i.z = floatBitsToInt(max(intBitsToFloat(PV0i.x), 0.0));
PV1i.z = R127i.z;
R8i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R6i.x), intBitsToFloat(uf_remappedPS[4].x)));
PS1i = R8i.z;
// 2
PV0i.y = floatBitsToInt(-(intBitsToFloat(PV1i.z)) + 1.0);
// 3
R123i.x = floatBitsToInt((mul_nonIEEE(-(intBitsToFloat(R127i.z)),intBitsToFloat(PV0i.y)) + intBitsToFloat(PV0i.y)));
PV1i.x = R123i.x;
// 4
R9i.w = floatBitsToInt((mul_nonIEEE(-(intBitsToFloat(R127i.z)),intBitsToFloat(PV1i.x)) + intBitsToFloat(PV1i.x)));
// 5
predResult = (intBitsToFloat(uf_remappedPS[5].x) >= -(intBitsToFloat(R3i.w)));
activeMaskStack[1] = predResult;
activeMaskStackC[2] = predResult == true && activeMaskStackC[1] == true;
}
else {
activeMaskStack[1] = false;
activeMaskStackC[2] = false;
}
if( activeMaskStackC[2] == true ) {
// 0
R3i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R9i.w),intBitsToFloat(uf_remappedPS[6].y)) + intBitsToFloat(uf_remappedPS[6].x)));
R10i.w = floatBitsToInt(1.0);
PV0i.w = R10i.w;
R7i.w = uf_remappedPS[7].x;
R7i.w = floatBitsToInt(intBitsToFloat(R7i.w) * 4.0);
PS0i = R7i.w;
// 1
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R2i.x),intBitsToFloat(R2i.y),intBitsToFloat(R2i.z),intBitsToFloat(PV0i.w)),vec4(intBitsToFloat(uf_remappedPS[8].x),intBitsToFloat(uf_remappedPS[8].y),intBitsToFloat(uf_remappedPS[8].z),intBitsToFloat(uf_remappedPS[8].w))));
PV1i.x = tempi.x;
PV1i.y = tempi.x;
PV1i.z = tempi.x;
PV1i.w = tempi.x;
// 2
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R2i.x),intBitsToFloat(R2i.y),intBitsToFloat(R2i.z),intBitsToFloat(R10i.w)),vec4(intBitsToFloat(uf_remappedPS[9].x),intBitsToFloat(uf_remappedPS[9].y),intBitsToFloat(uf_remappedPS[9].z),intBitsToFloat(uf_remappedPS[9].w))));
PV0i.x = tempi.x;
PV0i.y = tempi.x;
PV0i.z = tempi.x;
PV0i.w = tempi.x;
R1i.z = floatBitsToInt(1.0 / intBitsToFloat(PV1i.x));
PS0i = R1i.z;
// 3
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R2i.x),intBitsToFloat(R2i.y),intBitsToFloat(R2i.z),intBitsToFloat(R10i.w)),vec4(intBitsToFloat(uf_remappedPS[10].x),intBitsToFloat(uf_remappedPS[10].y),intBitsToFloat(uf_remappedPS[10].z),intBitsToFloat(uf_remappedPS[10].w))));
PV1i.x = tempi.x;
PV1i.y = tempi.x;
PV1i.z = tempi.x;
PV1i.w = tempi.x;
R10i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV0i.x), intBitsToFloat(PS0i)));
PS1i = R10i.x;
// 4
R3i.x = floatBitsToInt((-(intBitsToFloat(uf_remappedPS[11].x)) /resScale  * 0.5 + intBitsToFloat(PS1i)));
R9i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV1i.x), intBitsToFloat(R1i.z)));
PV0i.y = R9i.y;
PV0i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R10i.w), intBitsToFloat(uf_remappedPS[12].w)));
R8i.x = uf_remappedPS[11].x;
R8i.x = floatBitsToInt(intBitsToFloat(R8i.x) / 2.0);
PS0i = R8i.x;
// 5
R1i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R2i.z),intBitsToFloat(uf_remappedPS[12].z)) + intBitsToFloat(PV0i.z)));
R3i.y = floatBitsToInt((-(intBitsToFloat(uf_remappedPS[11].y)) /resScale  * 0.5 + intBitsToFloat(PV0i.y)));
R8i.y = uf_remappedPS[11].y;
R8i.y = floatBitsToInt(intBitsToFloat(R8i.y) / 2.0);
PS1i = R8i.y;
}
if( activeMaskStackC[2] == true ) {
R4i.xyzw = floatBitsToInt(textureGather(textureUnitPS15, intBitsToFloat(R3i.xy)).xyzw);
R6i.xyzw = floatBitsToInt(textureGather(textureUnitPS13, intBitsToFloat(R3i.xy)).xyzw);
}
if( activeMaskStackC[2] == true ) {
activeMaskStack[2] = activeMaskStack[1];
activeMaskStackC[3] = activeMaskStackC[2];
// 0
PV0i.x = floatBitsToInt(intBitsToFloat(R4i.x) + intBitsToFloat(R4i.w));
R122i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R2i.y),intBitsToFloat(uf_remappedPS[12].y)) + intBitsToFloat(R1i.x)));
PS0i = R122i.x;
// 1
R123i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R2i.x),intBitsToFloat(uf_remappedPS[12].x)) + intBitsToFloat(PS0i)));
PV1i.y = R123i.y;
PV1i.w = floatBitsToInt(intBitsToFloat(R4i.y) + intBitsToFloat(PV0i.x));
// 2
PV0i.z = floatBitsToInt(intBitsToFloat(R4i.z) + intBitsToFloat(PV1i.w));
R5i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV1i.y), intBitsToFloat(R1i.z)));
PS0i = R5i.z;
// 3
PV1i.x = ((intBitsToFloat(PV0i.z) != 0.0)?int(0xFFFFFFFF):int(0x0));
PV1i.y = ((intBitsToFloat(R7i.w) != intBitsToFloat(PV0i.z))?int(0xFFFFFFFF):int(0x0));
// 4
R1i.w = ((PV1i.y == 0)?(0):(PV1i.x));
// 5
predResult = (R1i.w != 0);
activeMaskStack[2] = predResult;
activeMaskStackC[3] = predResult == true && activeMaskStackC[2] == true;
}
else {
activeMaskStack[2] = false;
activeMaskStackC[3] = false;
}
if( activeMaskStackC[3] == true ) {
// 0
R1i.x = floatBitsToInt((-(intBitsToFloat(uf_remappedPS[11].x)) /resScale  * 0.5 + intBitsToFloat(R3i.x)));
R5i.y = floatBitsToInt(-(intBitsToFloat(R8i.y)));
PV0i.z = floatBitsToInt(-(intBitsToFloat(R8i.x)));
PV0i.w = R8i.y;
R1i.y = floatBitsToInt((-(intBitsToFloat(uf_remappedPS[11].y)) /resScale  * 0.5 + intBitsToFloat(R3i.y)));
PS0i = R1i.y;
// 1
R4i.x = floatBitsToInt(intBitsToFloat(R3i.x) + intBitsToFloat(PV0i.z));
R4i.y = floatBitsToInt(intBitsToFloat(R3i.y) + intBitsToFloat(PV0i.w));
R1i.z = floatBitsToInt((intBitsToFloat(uf_remappedPS[11].x) /resScale  * 0.5 + intBitsToFloat(R3i.x)));
R1i.w = floatBitsToInt((intBitsToFloat(uf_remappedPS[11].y) /resScale  * 0.5 + intBitsToFloat(R3i.y)));
R5i.x = floatBitsToInt(intBitsToFloat(R8i.x) + intBitsToFloat(R3i.x));
PS1i = R5i.x;
// 2
backupReg0i = R5i.y;
R5i.y = floatBitsToInt(intBitsToFloat(backupReg0i) + intBitsToFloat(R3i.y));
}
if( activeMaskStackC[3] == true ) {
R4i.w = floatBitsToInt(texture(textureUnitPS15, intBitsToFloat(R1i.xy)).x);
R4i.x = floatBitsToInt(texture(textureUnitPS15, intBitsToFloat(R4i.xy)).x);
R4i.y = floatBitsToInt(texture(textureUnitPS15, intBitsToFloat(R1i.zw)).x);
R4i.z = floatBitsToInt(texture(textureUnitPS15, intBitsToFloat(R5i.xy)).x);
}
activeMaskStackC[2] = activeMaskStack[1] == true && activeMaskStackC[1] == true;
if( activeMaskStackC[2] == true ) {
// 0
R1i.x = floatBitsToInt((intBitsToFloat(uf_remappedPS[11].x) /resScale  * 0.5 + intBitsToFloat(R10i.x)));
R1i.y = floatBitsToInt((intBitsToFloat(uf_remappedPS[11].y) /resScale  * 0.5 + intBitsToFloat(R9i.y)));
R1i.z = floatBitsToInt((intBitsToFloat(uf_remappedPS[7].x) == intBitsToFloat(R4i.x))?1.0:0.0);
R1i.w = floatBitsToInt((intBitsToFloat(uf_remappedPS[7].x) == intBitsToFloat(R4i.w))?1.0:0.0);
R10i.x = floatBitsToInt(-(intBitsToFloat(R3i.z)) + intBitsToFloat(R5i.z));
PS0i = R10i.x;
}
if( activeMaskStackC[2] == true ) {
R5i.xyzw = floatBitsToInt(textureGather(textureUnitPS15, intBitsToFloat(R1i.xy)).xyzw);
R3i.xyz = floatBitsToInt(textureGather(textureUnitPS13, intBitsToFloat(R1i.xy)).xyz);
}
if( activeMaskStackC[2] == true ) {
activeMaskStack[2] = activeMaskStack[1];
activeMaskStackC[3] = activeMaskStackC[2];
// 0
PV0i.x = floatBitsToInt((intBitsToFloat(R6i.x) >= intBitsToFloat(R10i.x))?1.0:0.0);
PV0i.y = floatBitsToInt((intBitsToFloat(R6i.w) >= intBitsToFloat(R10i.x))?1.0:0.0);
PV0i.z = floatBitsToInt(intBitsToFloat(R5i.x) + intBitsToFloat(R5i.w));
PV0i.w = floatBitsToInt((intBitsToFloat(uf_remappedPS[7].x) == intBitsToFloat(R4i.y))?1.0:0.0);
PS0i = floatBitsToInt((intBitsToFloat(R6i.y) >= intBitsToFloat(R10i.x))?1.0:0.0);
// 1
PV1i.x = floatBitsToInt(intBitsToFloat(R1i.z) + intBitsToFloat(PV0i.x));
PV1i.y = floatBitsToInt(intBitsToFloat(R1i.w) + intBitsToFloat(PV0i.y));
PV1i.z = floatBitsToInt(intBitsToFloat(R5i.y) + intBitsToFloat(PV0i.z));
PV1i.w = floatBitsToInt(intBitsToFloat(PV0i.w) + intBitsToFloat(PS0i));
R127i.z = floatBitsToInt((intBitsToFloat(uf_remappedPS[7].x) == intBitsToFloat(R4i.z))?1.0:0.0);
PS1i = R127i.z;
// 2
PV0i.x = floatBitsToInt(min(intBitsToFloat(PV1i.x), 1.0));
PV0i.y = floatBitsToInt(min(intBitsToFloat(PV1i.y), 1.0));
PV0i.z = floatBitsToInt((intBitsToFloat(R6i.z) >= intBitsToFloat(R10i.x))?1.0:0.0);
PV0i.w = floatBitsToInt(intBitsToFloat(R5i.z) + intBitsToFloat(PV1i.z));
R127i.w = floatBitsToInt(min(intBitsToFloat(PV1i.w), 1.0));
PS0i = R127i.w;
// 3
PV1i.x = ((intBitsToFloat(PV0i.w) != 0.0)?int(0xFFFFFFFF):int(0x0));
PV1i.y = ((intBitsToFloat(R7i.w) != intBitsToFloat(PV0i.w))?int(0xFFFFFFFF):int(0x0));
PV1i.z = floatBitsToInt(intBitsToFloat(R127i.z) + intBitsToFloat(PV0i.z));
PV1i.w = floatBitsToInt(intBitsToFloat(PV0i.x) + intBitsToFloat(PV0i.y));
// 4
PV0i.x = floatBitsToInt(min(intBitsToFloat(PV1i.z), 1.0));
PV0i.z = floatBitsToInt(intBitsToFloat(R127i.w) + intBitsToFloat(PV1i.w));
R1i.w = ((PV1i.y == 0)?(0):(PV1i.x));
// 5
R6i.y = floatBitsToInt(intBitsToFloat(PV0i.x) + intBitsToFloat(PV0i.z));
// 6
predResult = (R1i.w != 0);
activeMaskStack[2] = predResult;
activeMaskStackC[3] = predResult == true && activeMaskStackC[2] == true;
}
else {
activeMaskStack[2] = false;
activeMaskStackC[3] = false;
}
if( activeMaskStackC[3] == true ) {
// 0
R4i.x = floatBitsToInt((intBitsToFloat(uf_remappedPS[11].x) /resScale  * 0.5 + intBitsToFloat(R1i.x)));
R5i.y = floatBitsToInt(-(intBitsToFloat(R8i.y)));
PV0i.y = R5i.y;
PV0i.z = floatBitsToInt(-(intBitsToFloat(R8i.x)));
PV0i.w = R8i.y;
R4i.y = floatBitsToInt((intBitsToFloat(uf_remappedPS[11].y) /resScale  * 0.5 + intBitsToFloat(R1i.y)));
PS0i = R4i.y;
// 1
backupReg0i = R1i.x;
backupReg1i = R1i.y;
backupReg0i = R1i.x;
backupReg1i = R1i.y;
R1i.xyz = floatBitsToInt(vec3(intBitsToFloat(PV0i.z),intBitsToFloat(PV0i.w),intBitsToFloat(R8i.x)) + vec3(intBitsToFloat(backupReg0i),intBitsToFloat(backupReg1i),intBitsToFloat(backupReg0i)));
R1i.w = floatBitsToInt(intBitsToFloat(PV0i.y) + intBitsToFloat(backupReg1i));
}
if( activeMaskStackC[3] == true ) {
R5i.x = floatBitsToInt(texture(textureUnitPS15, intBitsToFloat(R1i.xy)).x);
R5i.y = floatBitsToInt(texture(textureUnitPS15, intBitsToFloat(R4i.xy)).x);
R5i.z = floatBitsToInt(texture(textureUnitPS15, intBitsToFloat(R1i.zw)).x);
}
activeMaskStackC[2] = activeMaskStack[1] == true && activeMaskStackC[1] == true;
if( activeMaskStackC[2] == true ) {
activeMaskStack[2] = activeMaskStack[1];
activeMaskStackC[3] = activeMaskStackC[2];
// 0
PV0i.x = floatBitsToInt((intBitsToFloat(R3i.x) >= intBitsToFloat(R10i.x))?1.0:0.0);
PV0i.y = floatBitsToInt((intBitsToFloat(uf_remappedPS[7].x) == intBitsToFloat(R5i.y))?1.0:0.0);
PV0i.z = floatBitsToInt((intBitsToFloat(R3i.y) >= intBitsToFloat(R10i.x))?1.0:0.0);
PV0i.w = floatBitsToInt((intBitsToFloat(uf_remappedPS[7].x) == intBitsToFloat(R5i.x))?1.0:0.0);
R127i.z = floatBitsToInt((intBitsToFloat(uf_remappedPS[7].x) == intBitsToFloat(R5i.z))?1.0:0.0);
PS0i = R127i.z;
// 1
PV1i.x = floatBitsToInt(intBitsToFloat(PV0i.y) + intBitsToFloat(PV0i.z));
PV1i.y = floatBitsToInt((intBitsToFloat(R3i.z) >= intBitsToFloat(R10i.x))?1.0:0.0);
PV1i.z = floatBitsToInt(intBitsToFloat(PV0i.w) + intBitsToFloat(PV0i.x));
PV1i.w = floatBitsToInt(-(intBitsToFloat(uf_remappedPS[5].x)) + intBitsToFloat(uf_remappedPS[13].x));
// 2
PV0i.y = floatBitsToInt(min(intBitsToFloat(PV1i.z), 1.0));
PV0i.z = floatBitsToInt(min(intBitsToFloat(PV1i.x), 1.0));
PV0i.w = floatBitsToInt(intBitsToFloat(R127i.z) + intBitsToFloat(PV1i.y));
R8i.y = floatBitsToInt(-(intBitsToFloat(R3i.w)) + intBitsToFloat(PV1i.w));
PS0i = R8i.y;
// 3
PV1i.x = floatBitsToInt(min(intBitsToFloat(PV0i.w), 1.0));
PV1i.w = floatBitsToInt(intBitsToFloat(PV0i.y) + intBitsToFloat(PV0i.z));
// 4
PV0i.y = floatBitsToInt(intBitsToFloat(PV1i.x) + intBitsToFloat(PV1i.w));
// 5
PV1i.z = floatBitsToInt(intBitsToFloat(R6i.y) + intBitsToFloat(PV0i.y));
// 6
R6i.w = floatBitsToInt(intBitsToFloat(PV1i.z) * intBitsToFloat(0x3e124922));
// 7
predResult = (intBitsToFloat(R8i.y) > 0.0);
activeMaskStack[2] = predResult;
activeMaskStackC[3] = predResult == true && activeMaskStackC[2] == true;
}
else {
activeMaskStack[2] = false;
activeMaskStackC[3] = false;
}
if( activeMaskStackC[3] == true ) {
// 0
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R2i.x),intBitsToFloat(R2i.y),intBitsToFloat(R2i.z),intBitsToFloat(R10i.w)),vec4(intBitsToFloat(uf_remappedPS[14].x),intBitsToFloat(uf_remappedPS[14].y),intBitsToFloat(uf_remappedPS[14].z),intBitsToFloat(uf_remappedPS[14].w))));
PV0i.x = tempi.x;
PV0i.y = tempi.x;
PV0i.z = tempi.x;
PV0i.w = tempi.x;
// 1
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R2i.x),intBitsToFloat(R2i.y),intBitsToFloat(R2i.z),intBitsToFloat(R10i.w)),vec4(intBitsToFloat(uf_remappedPS[15].x),intBitsToFloat(uf_remappedPS[15].y),intBitsToFloat(uf_remappedPS[15].z),intBitsToFloat(uf_remappedPS[15].w))));
PV1i.x = tempi.x;
PV1i.y = tempi.x;
PV1i.z = tempi.x;
PV1i.w = tempi.x;
R1i.w = floatBitsToInt(1.0 / intBitsToFloat(PV0i.x));
PS1i = R1i.w;
// 2
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R2i.x),intBitsToFloat(R2i.y),intBitsToFloat(R2i.z),intBitsToFloat(R10i.w)),vec4(intBitsToFloat(uf_remappedPS[16].x),intBitsToFloat(uf_remappedPS[16].y),intBitsToFloat(uf_remappedPS[16].z),intBitsToFloat(uf_remappedPS[16].w))));
PV0i.x = tempi.x;
PV0i.y = tempi.x;
PV0i.z = tempi.x;
PV0i.w = tempi.x;
R6i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV1i.x), intBitsToFloat(PS1i)));
PS0i = R6i.x;
// 3
R3i.x = floatBitsToInt((-(intBitsToFloat(uf_remappedPS[17].x)) /resScale  * 0.5 + intBitsToFloat(PS0i)));
R6i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV0i.x), intBitsToFloat(R1i.w)));
PV1i.y = R6i.y;
R10i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R9i.w),intBitsToFloat(uf_remappedPS[18].y)) + intBitsToFloat(uf_remappedPS[18].x)));
PS1i = R10i.y;
// 4
R8i.x = uf_remappedPS[17].x;
R8i.x = floatBitsToInt(intBitsToFloat(R8i.x) / 2.0);
R3i.y = floatBitsToInt((-(intBitsToFloat(uf_remappedPS[17].y)) /resScale  * 0.5 + intBitsToFloat(PV1i.y)));
R1i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R10i.w), intBitsToFloat(uf_remappedPS[19].w)));
R9i.y = uf_remappedPS[17].y;
R9i.y = floatBitsToInt(intBitsToFloat(R9i.y) / 2.0);
PS0i = R9i.y;
}
if( activeMaskStackC[3] == true ) {
R5i.xyzw = floatBitsToInt(textureGather(textureUnitPS8, intBitsToFloat(R3i.xy)).xyzw);
R4i.xyzw = floatBitsToInt(textureGather(textureUnitPS14, intBitsToFloat(R3i.xy)).xyzw);
}
if( activeMaskStackC[3] == true ) {
activeMaskStack[3] = activeMaskStack[2];
activeMaskStackC[4] = activeMaskStackC[3];
// 0
PV0i.x = floatBitsToInt(intBitsToFloat(R5i.x) + intBitsToFloat(R5i.w));
R122i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R2i.z),intBitsToFloat(uf_remappedPS[19].z)) + intBitsToFloat(R1i.z)));
PS0i = R122i.x;
// 1
R123i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R2i.y),intBitsToFloat(uf_remappedPS[19].y)) + intBitsToFloat(PS0i)));
PV1i.x = R123i.x;
PV1i.z = floatBitsToInt(intBitsToFloat(R5i.y) + intBitsToFloat(PV0i.x));
// 2
R123i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R2i.x),intBitsToFloat(uf_remappedPS[19].x)) + intBitsToFloat(PV1i.x)));
PV0i.x = R123i.x;
PV0i.w = floatBitsToInt(intBitsToFloat(R5i.z) + intBitsToFloat(PV1i.z));
// 3
PV1i.x = ((intBitsToFloat(PV0i.w) != 0.0)?int(0xFFFFFFFF):int(0x0));
PV1i.y = ((intBitsToFloat(R7i.w) != intBitsToFloat(PV0i.w))?int(0xFFFFFFFF):int(0x0));
R2i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV0i.x), intBitsToFloat(R1i.w)));
// 4
R1i.z = ((PV1i.y == 0)?(0):(PV1i.x));
// 5
predResult = (R1i.z != 0);
activeMaskStack[3] = predResult;
activeMaskStackC[4] = predResult == true && activeMaskStackC[3] == true;
}
else {
activeMaskStack[3] = false;
activeMaskStackC[4] = false;
}
if( activeMaskStackC[4] == true ) {
// 0
R1i.x = floatBitsToInt((-(intBitsToFloat(uf_remappedPS[17].x)) /resScale  * 0.5 + intBitsToFloat(R3i.x)));
R5i.y = floatBitsToInt(-(intBitsToFloat(R9i.y)));
PV0i.z = floatBitsToInt(-(intBitsToFloat(R8i.x)));
PV0i.w = R9i.y;
R1i.y = floatBitsToInt((-(intBitsToFloat(uf_remappedPS[17].y)) /resScale  * 0.5 + intBitsToFloat(R3i.y)));
PS0i = R1i.y;
// 1
backupReg0i = R3i.x;
R2i.x = floatBitsToInt(intBitsToFloat(R3i.x) + intBitsToFloat(PV0i.z));
R2i.y = floatBitsToInt(intBitsToFloat(R3i.y) + intBitsToFloat(PV0i.w));
R1i.z = floatBitsToInt((intBitsToFloat(uf_remappedPS[17].x) /resScale  * 0.5 + intBitsToFloat(R3i.x)));
R1i.w = floatBitsToInt((intBitsToFloat(uf_remappedPS[17].y) /resScale  * 0.5 + intBitsToFloat(R3i.y)));
R3i.x = floatBitsToInt(intBitsToFloat(R8i.x) + intBitsToFloat(backupReg0i));
PS1i = R3i.x;
// 2
backupReg0i = R3i.y;
R3i.y = floatBitsToInt(intBitsToFloat(R5i.y) + intBitsToFloat(backupReg0i));
}
if( activeMaskStackC[4] == true ) {
R5i.w = floatBitsToInt(texture(textureUnitPS8, intBitsToFloat(R1i.xy)).x);
R5i.x = floatBitsToInt(texture(textureUnitPS8, intBitsToFloat(R2i.xy)).x);
R5i.y = floatBitsToInt(texture(textureUnitPS8, intBitsToFloat(R1i.zw)).x);
R5i.z = floatBitsToInt(texture(textureUnitPS8, intBitsToFloat(R3i.xy)).x);
}
activeMaskStackC[3] = activeMaskStack[2] == true && activeMaskStackC[2] == true;
if( activeMaskStackC[3] == true ) {
// 0
backupReg0i = R5i.w;
R1i.x = floatBitsToInt((intBitsToFloat(uf_remappedPS[17].x) /resScale  * 0.5 + intBitsToFloat(R6i.x)));
R1i.y = floatBitsToInt((intBitsToFloat(uf_remappedPS[17].y) /resScale  * 0.5 + intBitsToFloat(R6i.y)));
R1i.z = floatBitsToInt((intBitsToFloat(uf_remappedPS[7].x) == intBitsToFloat(R5i.x))?1.0:0.0);
R5i.w = floatBitsToInt(-(intBitsToFloat(R10i.y)) + intBitsToFloat(R2i.z));
R1i.w = floatBitsToInt((intBitsToFloat(uf_remappedPS[7].x) == intBitsToFloat(backupReg0i))?1.0:0.0);
PS0i = R1i.w;
}
if( activeMaskStackC[3] == true ) {
R3i.xyzw = floatBitsToInt(textureGather(textureUnitPS8, intBitsToFloat(R1i.xy)).xyzw);
R6i.xyz = floatBitsToInt(textureGather(textureUnitPS14, intBitsToFloat(R1i.xy)).xyz);
}
if( activeMaskStackC[3] == true ) {
activeMaskStack[3] = activeMaskStack[2];
activeMaskStackC[4] = activeMaskStackC[3];
// 0
PV0i.x = floatBitsToInt(intBitsToFloat(R3i.x) + intBitsToFloat(R3i.w));
PV0i.y = floatBitsToInt((intBitsToFloat(uf_remappedPS[7].x) == intBitsToFloat(R5i.y))?1.0:0.0);
PV0i.z = floatBitsToInt((intBitsToFloat(R4i.x) >= intBitsToFloat(R5i.w))?1.0:0.0);
PV0i.w = floatBitsToInt((intBitsToFloat(R4i.w) >= intBitsToFloat(R5i.w))?1.0:0.0);
PS0i = floatBitsToInt((intBitsToFloat(R4i.y) >= intBitsToFloat(R5i.w))?1.0:0.0);
// 1
PV1i.x = floatBitsToInt(intBitsToFloat(R3i.y) + intBitsToFloat(PV0i.x));
PV1i.y = floatBitsToInt(intBitsToFloat(PV0i.y) + intBitsToFloat(PS0i));
PV1i.z = floatBitsToInt(intBitsToFloat(R1i.z) + intBitsToFloat(PV0i.z));
PV1i.w = floatBitsToInt(intBitsToFloat(R1i.w) + intBitsToFloat(PV0i.w));
R127i.x = floatBitsToInt((intBitsToFloat(uf_remappedPS[7].x) == intBitsToFloat(R5i.z))?1.0:0.0);
PS1i = R127i.x;
// 2
PV0i.x = floatBitsToInt((intBitsToFloat(R4i.z) >= intBitsToFloat(R5i.w))?1.0:0.0);
PV0i.y = floatBitsToInt(min(intBitsToFloat(PV1i.w), 1.0));
PV0i.z = floatBitsToInt(min(intBitsToFloat(PV1i.z), 1.0));
PV0i.w = floatBitsToInt(intBitsToFloat(R3i.z) + intBitsToFloat(PV1i.x));
R127i.y = floatBitsToInt(min(intBitsToFloat(PV1i.y), 1.0));
PS0i = R127i.y;
// 3
PV1i.x = floatBitsToInt(intBitsToFloat(R127i.x) + intBitsToFloat(PV0i.x));
PV1i.y = floatBitsToInt(intBitsToFloat(PV0i.z) + intBitsToFloat(PV0i.y));
PV1i.z = ((intBitsToFloat(R7i.w) != intBitsToFloat(PV0i.w))?int(0xFFFFFFFF):int(0x0));
PV1i.w = ((intBitsToFloat(PV0i.w) != 0.0)?int(0xFFFFFFFF):int(0x0));
// 4
PV0i.x = floatBitsToInt(min(intBitsToFloat(PV1i.x), 1.0));
R1i.z = ((PV1i.z == 0)?(0):(PV1i.w));
PV0i.w = floatBitsToInt(intBitsToFloat(R127i.y) + intBitsToFloat(PV1i.y));
// 5
R4i.x = floatBitsToInt(intBitsToFloat(PV0i.x) + intBitsToFloat(PV0i.w));
// 6
predResult = (R1i.z != 0);
activeMaskStack[3] = predResult;
activeMaskStackC[4] = predResult == true && activeMaskStackC[3] == true;
}
else {
activeMaskStack[3] = false;
activeMaskStackC[4] = false;
}
if( activeMaskStackC[4] == true ) {
// 0
R2i.x = floatBitsToInt((intBitsToFloat(uf_remappedPS[17].x) /resScale  * 0.5 + intBitsToFloat(R1i.x)));
R3i.y = floatBitsToInt(-(intBitsToFloat(R9i.y)));
PV0i.y = R3i.y;
PV0i.z = floatBitsToInt(-(intBitsToFloat(R8i.x)));
PV0i.w = R9i.y;
R2i.y = floatBitsToInt((intBitsToFloat(uf_remappedPS[17].y) /resScale  * 0.5 + intBitsToFloat(R1i.y)));
PS0i = R2i.y;
// 1
backupReg0i = R1i.x;
backupReg1i = R1i.y;
backupReg0i = R1i.x;
backupReg1i = R1i.y;
R1i.xyz = floatBitsToInt(vec3(intBitsToFloat(PV0i.z),intBitsToFloat(PV0i.w),intBitsToFloat(R8i.x)) + vec3(intBitsToFloat(backupReg0i),intBitsToFloat(backupReg1i),intBitsToFloat(backupReg0i)));
R1i.w = floatBitsToInt(intBitsToFloat(PV0i.y) + intBitsToFloat(backupReg1i));
}
if( activeMaskStackC[4] == true ) {
R3i.x = floatBitsToInt(texture(textureUnitPS8, intBitsToFloat(R1i.xy)).x);
R3i.y = floatBitsToInt(texture(textureUnitPS8, intBitsToFloat(R2i.xy)).x);
R3i.z = floatBitsToInt(texture(textureUnitPS8, intBitsToFloat(R1i.zw)).x);
}
activeMaskStackC[3] = activeMaskStack[2] == true && activeMaskStackC[2] == true;
if( activeMaskStackC[3] == true ) {
// 0
PV0i.x = floatBitsToInt((intBitsToFloat(uf_remappedPS[7].x) == intBitsToFloat(R3i.y))?1.0:0.0);
PV0i.y = floatBitsToInt((intBitsToFloat(uf_remappedPS[7].x) == intBitsToFloat(R3i.x))?1.0:0.0);
PV0i.z = floatBitsToInt((intBitsToFloat(R6i.x) >= intBitsToFloat(R5i.w))?1.0:0.0);
PV0i.w = floatBitsToInt((intBitsToFloat(R6i.y) >= intBitsToFloat(R5i.w))?1.0:0.0);
R127i.w = floatBitsToInt((intBitsToFloat(uf_remappedPS[7].x) == intBitsToFloat(R3i.z))?1.0:0.0);
PS0i = R127i.w;
// 1
PV1i.x = floatBitsToInt((intBitsToFloat(R6i.z) >= intBitsToFloat(R5i.w))?1.0:0.0);
PV1i.z = floatBitsToInt(intBitsToFloat(PV0i.x) + intBitsToFloat(PV0i.w));
PV1i.w = floatBitsToInt(intBitsToFloat(PV0i.y) + intBitsToFloat(PV0i.z));
PS1i = floatBitsToInt(1.0 / intBitsToFloat(uf_remappedPS[13].x));
// 2
PV0i.x = floatBitsToInt(min(intBitsToFloat(PV1i.w), 1.0));
PV0i.y = floatBitsToInt(intBitsToFloat(R127i.w) + intBitsToFloat(PV1i.x));
R127i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R8i.y), intBitsToFloat(PS1i)));
PV0i.w = floatBitsToInt(min(intBitsToFloat(PV1i.z), 1.0));
// 3
PV1i.y = floatBitsToInt(intBitsToFloat(PV0i.x) + intBitsToFloat(PV0i.w));
PV1i.z = floatBitsToInt(min(intBitsToFloat(PV0i.y), 1.0));
// 4
PV0i.x = floatBitsToInt(intBitsToFloat(PV1i.z) + intBitsToFloat(PV1i.y));
// 5
PV1i.w = floatBitsToInt(intBitsToFloat(R4i.x) + intBitsToFloat(PV0i.x));
// 6
R123i.x = floatBitsToInt((intBitsToFloat(PV1i.w) * intBitsToFloat(0x3e124922) + -(intBitsToFloat(R6i.w))));
PV0i.x = R123i.x;
// 7
backupReg0i = R6i.w;
R6i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV0i.x),intBitsToFloat(R127i.z)) + intBitsToFloat(backupReg0i)));
}
activeMaskStackC[2] = activeMaskStack[1] == true && activeMaskStackC[1] == true;
activeMaskStack[1] = activeMaskStack[1] == false;
activeMaskStackC[2] = activeMaskStack[1] == true && activeMaskStackC[1] == true;
if( activeMaskStackC[2] == true ) {
// 0
R9i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R9i.w),intBitsToFloat(uf_remappedPS[18].y)) + intBitsToFloat(uf_remappedPS[18].x)));
R9i.z = uf_remappedPS[7].x;
R9i.z = floatBitsToInt(intBitsToFloat(R9i.z) * 4.0);
R4i.w = floatBitsToInt(1.0);
PV0i.w = R4i.w;
// 1
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R2i.x),intBitsToFloat(R2i.y),intBitsToFloat(R2i.z),intBitsToFloat(PV0i.w)),vec4(intBitsToFloat(uf_remappedPS[14].x),intBitsToFloat(uf_remappedPS[14].y),intBitsToFloat(uf_remappedPS[14].z),intBitsToFloat(uf_remappedPS[14].w))));
PV1i.x = tempi.x;
PV1i.y = tempi.x;
PV1i.z = tempi.x;
PV1i.w = tempi.x;
// 2
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R2i.x),intBitsToFloat(R2i.y),intBitsToFloat(R2i.z),intBitsToFloat(R4i.w)),vec4(intBitsToFloat(uf_remappedPS[15].x),intBitsToFloat(uf_remappedPS[15].y),intBitsToFloat(uf_remappedPS[15].z),intBitsToFloat(uf_remappedPS[15].w))));
PV0i.x = tempi.x;
PV0i.y = tempi.x;
PV0i.z = tempi.x;
PV0i.w = tempi.x;
R1i.w = floatBitsToInt(1.0 / intBitsToFloat(PV1i.x));
PS0i = R1i.w;
// 3
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R2i.x),intBitsToFloat(R2i.y),intBitsToFloat(R2i.z),intBitsToFloat(R4i.w)),vec4(intBitsToFloat(uf_remappedPS[16].x),intBitsToFloat(uf_remappedPS[16].y),intBitsToFloat(uf_remappedPS[16].z),intBitsToFloat(uf_remappedPS[16].w))));
PV1i.x = tempi.x;
PV1i.y = tempi.x;
PV1i.z = tempi.x;
PV1i.w = tempi.x;
R10i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV0i.x), intBitsToFloat(PS0i)));
PS1i = R10i.x;
// 4
R3i.x = floatBitsToInt((-(intBitsToFloat(uf_remappedPS[17].x)) /resScale  * 0.5 + intBitsToFloat(PS1i)));
R10i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV1i.x), intBitsToFloat(R1i.w)));
PV0i.y = R10i.y;
PV0i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R4i.w), intBitsToFloat(uf_remappedPS[19].w)));
R8i.x = uf_remappedPS[17].x;
R8i.x = floatBitsToInt(intBitsToFloat(R8i.x) / 2.0);
PS0i = R8i.x;
// 5
R1i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R2i.z),intBitsToFloat(uf_remappedPS[19].z)) + intBitsToFloat(PV0i.z)));
R3i.y = floatBitsToInt((-(intBitsToFloat(uf_remappedPS[17].y)) /resScale  * 0.5 + intBitsToFloat(PV0i.y)));
R8i.y = uf_remappedPS[17].y;
R8i.y = floatBitsToInt(intBitsToFloat(R8i.y) / 2.0);
PS1i = R8i.y;
}
if( activeMaskStackC[2] == true ) {
R6i.xyzw = floatBitsToInt(textureGather(textureUnitPS8, intBitsToFloat(R3i.xy)).xyzw);
R5i.xyzw = floatBitsToInt(textureGather(textureUnitPS14, intBitsToFloat(R3i.xy)).xyzw);
}
if( activeMaskStackC[2] == true ) {
activeMaskStack[2] = activeMaskStack[1];
activeMaskStackC[3] = activeMaskStackC[2];
// 0
PV0i.x = floatBitsToInt(intBitsToFloat(R6i.x) + intBitsToFloat(R6i.w));
R122i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R2i.y),intBitsToFloat(uf_remappedPS[19].y)) + intBitsToFloat(R1i.x)));
PS0i = R122i.x;
// 1
R123i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R2i.x),intBitsToFloat(uf_remappedPS[19].x)) + intBitsToFloat(PS0i)));
PV1i.x = R123i.x;
PV1i.z = floatBitsToInt(intBitsToFloat(R6i.y) + intBitsToFloat(PV0i.x));
// 2
R2i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV1i.x), intBitsToFloat(R1i.w)));
PV0i.w = floatBitsToInt(intBitsToFloat(R6i.z) + intBitsToFloat(PV1i.z));
// 3
PV1i.x = ((intBitsToFloat(PV0i.w) != 0.0)?int(0xFFFFFFFF):int(0x0));
PV1i.y = ((intBitsToFloat(R9i.z) != intBitsToFloat(PV0i.w))?int(0xFFFFFFFF):int(0x0));
// 4
R1i.z = ((PV1i.y == 0)?(0):(PV1i.x));
// 5
predResult = (R1i.z != 0);
activeMaskStack[2] = predResult;
activeMaskStackC[3] = predResult == true && activeMaskStackC[2] == true;
}
else {
activeMaskStack[2] = false;
activeMaskStackC[3] = false;
}
if( activeMaskStackC[3] == true ) {
// 0
R1i.x = floatBitsToInt((-(intBitsToFloat(uf_remappedPS[17].x)) /resScale  * 0.5 + intBitsToFloat(R3i.x)));
R4i.y = floatBitsToInt(-(intBitsToFloat(R8i.y)));
PV0i.z = floatBitsToInt(-(intBitsToFloat(R8i.x)));
PV0i.w = R8i.y;
R1i.y = floatBitsToInt((-(intBitsToFloat(uf_remappedPS[17].y)) /resScale  * 0.5 + intBitsToFloat(R3i.y)));
PS0i = R1i.y;
// 1
R2i.x = floatBitsToInt(intBitsToFloat(R3i.x) + intBitsToFloat(PV0i.z));
R2i.y = floatBitsToInt(intBitsToFloat(R3i.y) + intBitsToFloat(PV0i.w));
R1i.z = floatBitsToInt((intBitsToFloat(uf_remappedPS[17].x) /resScale  * 0.5 + intBitsToFloat(R3i.x)));
R1i.w = floatBitsToInt((intBitsToFloat(uf_remappedPS[17].y) /resScale  * 0.5 + intBitsToFloat(R3i.y)));
R4i.x = floatBitsToInt(intBitsToFloat(R8i.x) + intBitsToFloat(R3i.x));
PS1i = R4i.x;
// 2
backupReg0i = R4i.y;
R4i.y = floatBitsToInt(intBitsToFloat(backupReg0i) + intBitsToFloat(R3i.y));
}
if( activeMaskStackC[3] == true ) {
R6i.w = floatBitsToInt(texture(textureUnitPS8, intBitsToFloat(R1i.xy)).x);
R6i.x = floatBitsToInt(texture(textureUnitPS8, intBitsToFloat(R2i.xy)).x);
R6i.y = floatBitsToInt(texture(textureUnitPS8, intBitsToFloat(R1i.zw)).x);
R6i.z = floatBitsToInt(texture(textureUnitPS8, intBitsToFloat(R4i.xy)).x);
}
activeMaskStackC[2] = activeMaskStack[1] == true && activeMaskStackC[1] == true;
if( activeMaskStackC[2] == true ) {
// 0
backupReg0i = R6i.w;
R1i.x = floatBitsToInt((intBitsToFloat(uf_remappedPS[17].x) /resScale  * 0.5 + intBitsToFloat(R10i.x)));
R1i.y = floatBitsToInt((intBitsToFloat(uf_remappedPS[17].y) /resScale  * 0.5 + intBitsToFloat(R10i.y)));
R1i.z = floatBitsToInt((intBitsToFloat(uf_remappedPS[7].x) == intBitsToFloat(R6i.x))?1.0:0.0);
R6i.w = floatBitsToInt(-(intBitsToFloat(R9i.y)) + intBitsToFloat(R2i.z));
R1i.w = floatBitsToInt((intBitsToFloat(uf_remappedPS[7].x) == intBitsToFloat(backupReg0i))?1.0:0.0);
PS0i = R1i.w;
}
if( activeMaskStackC[2] == true ) {
R4i.xyzw = floatBitsToInt(textureGather(textureUnitPS8, intBitsToFloat(R1i.xy)).xyzw);
R3i.xyz = floatBitsToInt(textureGather(textureUnitPS14, intBitsToFloat(R1i.xy)).xyz);
}
if( activeMaskStackC[2] == true ) {
activeMaskStack[2] = activeMaskStack[1];
activeMaskStackC[3] = activeMaskStackC[2];
// 0
PV0i.x = floatBitsToInt(intBitsToFloat(R4i.x) + intBitsToFloat(R4i.w));
PV0i.y = floatBitsToInt((intBitsToFloat(uf_remappedPS[7].x) == intBitsToFloat(R6i.y))?1.0:0.0);
PV0i.z = floatBitsToInt((intBitsToFloat(R5i.x) >= intBitsToFloat(R6i.w))?1.0:0.0);
PV0i.w = floatBitsToInt((intBitsToFloat(R5i.w) >= intBitsToFloat(R6i.w))?1.0:0.0);
PS0i = floatBitsToInt((intBitsToFloat(R5i.y) >= intBitsToFloat(R6i.w))?1.0:0.0);
// 1
PV1i.x = floatBitsToInt(intBitsToFloat(R4i.y) + intBitsToFloat(PV0i.x));
PV1i.y = floatBitsToInt(intBitsToFloat(PV0i.y) + intBitsToFloat(PS0i));
PV1i.z = floatBitsToInt(intBitsToFloat(R1i.z) + intBitsToFloat(PV0i.z));
PV1i.w = floatBitsToInt(intBitsToFloat(R1i.w) + intBitsToFloat(PV0i.w));
R127i.x = floatBitsToInt((intBitsToFloat(uf_remappedPS[7].x) == intBitsToFloat(R6i.z))?1.0:0.0);
PS1i = R127i.x;
// 2
PV0i.x = floatBitsToInt((intBitsToFloat(R5i.z) >= intBitsToFloat(R6i.w))?1.0:0.0);
PV0i.y = floatBitsToInt(min(intBitsToFloat(PV1i.w), 1.0));
PV0i.z = floatBitsToInt(min(intBitsToFloat(PV1i.z), 1.0));
PV0i.w = floatBitsToInt(intBitsToFloat(R4i.z) + intBitsToFloat(PV1i.x));
R127i.y = floatBitsToInt(min(intBitsToFloat(PV1i.y), 1.0));
PS0i = R127i.y;
// 3
PV1i.x = floatBitsToInt(intBitsToFloat(R127i.x) + intBitsToFloat(PV0i.x));
PV1i.y = floatBitsToInt(intBitsToFloat(PV0i.z) + intBitsToFloat(PV0i.y));
PV1i.z = ((intBitsToFloat(R9i.z) != intBitsToFloat(PV0i.w))?int(0xFFFFFFFF):int(0x0));
PV1i.w = ((intBitsToFloat(PV0i.w) != 0.0)?int(0xFFFFFFFF):int(0x0));
// 4
PV0i.x = floatBitsToInt(min(intBitsToFloat(PV1i.x), 1.0));
R1i.z = ((PV1i.z == 0)?(0):(PV1i.w));
PV0i.w = floatBitsToInt(intBitsToFloat(R127i.y) + intBitsToFloat(PV1i.y));
// 5
R5i.x = floatBitsToInt(intBitsToFloat(PV0i.x) + intBitsToFloat(PV0i.w));
// 6
predResult = (R1i.z != 0);
activeMaskStack[2] = predResult;
activeMaskStackC[3] = predResult == true && activeMaskStackC[2] == true;
}
else {
activeMaskStack[2] = false;
activeMaskStackC[3] = false;
}
if( activeMaskStackC[3] == true ) {
// 0
R2i.x = floatBitsToInt((intBitsToFloat(uf_remappedPS[17].x) /resScale  * 0.5 + intBitsToFloat(R1i.x)));
R4i.y = floatBitsToInt(-(intBitsToFloat(R8i.y)));
PV0i.y = R4i.y;
PV0i.z = floatBitsToInt(-(intBitsToFloat(R8i.x)));
PV0i.w = R8i.y;
R2i.y = floatBitsToInt((intBitsToFloat(uf_remappedPS[17].y) /resScale  * 0.5 + intBitsToFloat(R1i.y)));
PS0i = R2i.y;
// 1
backupReg0i = R1i.x;
backupReg1i = R1i.y;
backupReg0i = R1i.x;
backupReg1i = R1i.y;
R1i.xyz = floatBitsToInt(vec3(intBitsToFloat(PV0i.z),intBitsToFloat(PV0i.w),intBitsToFloat(R8i.x)) + vec3(intBitsToFloat(backupReg0i),intBitsToFloat(backupReg1i),intBitsToFloat(backupReg0i)));
R1i.w = floatBitsToInt(intBitsToFloat(PV0i.y) + intBitsToFloat(backupReg1i));
}
if( activeMaskStackC[3] == true ) {
R4i.x = floatBitsToInt(texture(textureUnitPS8, intBitsToFloat(R1i.xy)).x);
R4i.y = floatBitsToInt(texture(textureUnitPS8, intBitsToFloat(R2i.xy)).x);
R4i.z = floatBitsToInt(texture(textureUnitPS8, intBitsToFloat(R1i.zw)).x);
}
activeMaskStackC[2] = activeMaskStack[1] == true && activeMaskStackC[1] == true;
if( activeMaskStackC[2] == true ) {
// 0
PV0i.x = floatBitsToInt((intBitsToFloat(R3i.x) >= intBitsToFloat(R6i.w))?1.0:0.0);
PV0i.y = floatBitsToInt((intBitsToFloat(R3i.y) >= intBitsToFloat(R6i.w))?1.0:0.0);
PV0i.z = floatBitsToInt((intBitsToFloat(uf_remappedPS[7].x) == intBitsToFloat(R4i.y))?1.0:0.0);
PV0i.w = floatBitsToInt((intBitsToFloat(uf_remappedPS[7].x) == intBitsToFloat(R4i.x))?1.0:0.0);
R127i.y = floatBitsToInt((intBitsToFloat(uf_remappedPS[7].x) == intBitsToFloat(R4i.z))?1.0:0.0);
PS0i = R127i.y;
// 1
PV1i.x = floatBitsToInt(intBitsToFloat(PV0i.z) + intBitsToFloat(PV0i.y));
PV1i.y = floatBitsToInt(intBitsToFloat(PV0i.w) + intBitsToFloat(PV0i.x));
PV1i.z = floatBitsToInt((intBitsToFloat(R3i.z) >= intBitsToFloat(R6i.w))?1.0:0.0);
PV1i.w = floatBitsToInt(-(intBitsToFloat(uf_remappedPS[5].x)) + intBitsToFloat(uf_remappedPS[20].x));
// 2
PV0i.x = floatBitsToInt(intBitsToFloat(PV1i.w) * intBitsToFloat(0x3dcccccd));
PV0i.y = floatBitsToInt(min(intBitsToFloat(PV1i.x), 1.0));
PV0i.z = floatBitsToInt(min(intBitsToFloat(PV1i.y), 1.0));
PV0i.w = floatBitsToInt(intBitsToFloat(R127i.y) + intBitsToFloat(PV1i.z));
// 3
PV1i.x = floatBitsToInt(min(intBitsToFloat(PV0i.w), 1.0));
PV1i.y = floatBitsToInt(-(intBitsToFloat(uf_remappedPS[20].x)) + intBitsToFloat(PV0i.x));
PV1i.w = floatBitsToInt(intBitsToFloat(PV0i.z) + intBitsToFloat(PV0i.y));
R127i.w = floatBitsToInt(1.0 / intBitsToFloat(PV0i.x));
PS1i = R127i.w;
// 4
PV0i.x = floatBitsToInt(-(intBitsToFloat(R3i.w)) + intBitsToFloat(PV1i.y));
PV0i.z = floatBitsToInt(intBitsToFloat(PV1i.x) + intBitsToFloat(PV1i.w));
// 5
PV1i.y = floatBitsToInt(intBitsToFloat(R5i.x) + intBitsToFloat(PV0i.z));
PV1i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV0i.x), intBitsToFloat(R127i.w)));
// 6
R127i.x = floatBitsToInt(intBitsToFloat(PV1i.y) * intBitsToFloat(0x3e124922));
PV0i.x = R127i.x;
R127i.y = floatBitsToInt(max(intBitsToFloat(PV1i.z), 0.0));
// 7
PV1i.x = floatBitsToInt(-(intBitsToFloat(PV0i.x)) + 1.0);
// 8
R6i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV1i.x),intBitsToFloat(R127i.y)) + intBitsToFloat(R127i.x)));
}
activeMaskStackC[1] = activeMaskStack[0] == true && activeMaskStackC[0] == true;
if( activeMaskStackC[1] == true ) {
// 0
redcCUBE(vec4(intBitsToFloat(R7i.z),intBitsToFloat(R7i.z),intBitsToFloat(R9i.x),intBitsToFloat(R0i.y)),vec4(intBitsToFloat(R0i.y),intBitsToFloat(R9i.x),intBitsToFloat(R7i.z),intBitsToFloat(R7i.z)),cubeMapSTM,cubeMapFaceId);
R1i.x = floatBitsToInt(cubeMapSTM.x);
R1i.y = floatBitsToInt(cubeMapSTM.y);
R1i.z = floatBitsToInt(cubeMapSTM.z);
R1i.w = cubeMapFaceId;
PV0i.x = R1i.x;
PV0i.y = R1i.y;
PV0i.z = R1i.z;
PV0i.w = R1i.w;
R122i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(uf_remappedPS[21].z),-(intBitsToFloat(R6i.w))) + intBitsToFloat(uf_remappedPS[21].z)));
PS0i = R122i.x;
// 1
PV1i.x = floatBitsToInt(-(intBitsToFloat(uf_remappedPS[22].z)) + intBitsToFloat(uf_remappedPS[22].w));
R0i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R0i.z), intBitsToFloat(R0i.w)));
R2i.z = floatBitsToInt(intBitsToFloat(R6i.w) + intBitsToFloat(PS0i));
PV1i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R2i.w), intBitsToFloat(R7i.x)));
PS1i = floatBitsToInt(1.0 / abs(intBitsToFloat(PV0i.z)));
// 2
backupReg0i = R1i.x;
backupReg1i = R1i.y;
R1i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(backupReg0i),intBitsToFloat(PS1i)) + 1.5));
R1i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(backupReg1i),intBitsToFloat(PS1i)) + 1.5));
R3i.z = floatBitsToInt(min(intBitsToFloat(PV1i.w), 1.0));
R4i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R8i.w), intBitsToFloat(uf_remappedPS[23].x)));
R0i.z = floatBitsToInt(1.0 / intBitsToFloat(PV1i.x));
PS0i = R0i.z;
}
if( activeMaskStackC[1] == true ) {
R1i.xyz = floatBitsToInt(texture(textureUnitPS9, vec4(redcCUBEReverse(intBitsToFloat(R1i.yx),R1i.w),cubeMapArrayIndex9)).xyz);
}
if( activeMaskStackC[1] == true ) {
// 0
backupReg0i = R0i.z;
R123i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R2i.z),intBitsToFloat(uf_remappedPS[24].y)) + intBitsToFloat(uf_remappedPS[25].y)));
PV0i.x = R123i.x;
R123i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R2i.z),intBitsToFloat(uf_remappedPS[24].x)) + intBitsToFloat(uf_remappedPS[25].x)));
PV0i.y = R123i.y;
R0i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R0i.y), intBitsToFloat(backupReg0i)));
R0i.w = 0;
// 1
R127i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R7i.y), intBitsToFloat(PV0i.x)));
PV1i.y = R127i.y;
R127i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R0i.x), intBitsToFloat(PV0i.y)));
PV1i.z = R127i.z;
R123i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R2i.z),intBitsToFloat(uf_remappedPS[24].z)) + intBitsToFloat(uf_remappedPS[25].z)));
PV1i.w = R123i.w;
// 2
R127i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R8i.z), intBitsToFloat(PV1i.w)));
PV0i.x = R127i.x;
PV0i.y = floatBitsToInt(-(intBitsToFloat(PV1i.z)) + intBitsToFloat(R1i.x));
PV0i.z = floatBitsToInt(-(intBitsToFloat(PV1i.y)) + intBitsToFloat(R1i.y));
// 3
R123i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV0i.z),intBitsToFloat(R3i.z)) + intBitsToFloat(R127i.y)));
PV1i.y = R123i.y;
R123i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV0i.y),intBitsToFloat(R3i.z)) + intBitsToFloat(R127i.z)));
PV1i.z = R123i.z;
PV1i.w = floatBitsToInt(-(intBitsToFloat(PV0i.x)) + intBitsToFloat(R1i.z));
// 4
R123i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV1i.w),intBitsToFloat(R3i.z)) + intBitsToFloat(R127i.x)));
PV0i.x = R123i.x;
R3i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV1i.y), intBitsToFloat(uf_remappedPS[26].y)));
R1i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV1i.z), intBitsToFloat(uf_remappedPS[26].x)));
// 5
R1i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV0i.x), intBitsToFloat(uf_remappedPS[26].z)));
}
if( activeMaskStackC[1] == true ) {
// 0
R4i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R1i.w), intBitsToFloat(uf_remappedPS[27].x)));
PV0i.x = R4i.x;
R4i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R3i.z), intBitsToFloat(uf_remappedPS[27].y)));
PV0i.y = R4i.y;
R4i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R1i.y), intBitsToFloat(uf_remappedPS[27].z)));
PV0i.z = R4i.z;
// 1
R1i.xyz = ivec3(PV0i.x,PV0i.y,PV0i.z);
R1i.w = R4i.w;
// 2
R2i.xyz = ivec3(R0i.z,R0i.w,R0i.w);
R2i.w = R0i.w;
}
// export
passPixelColor0 = vec4(intBitsToFloat(R1i.x), intBitsToFloat(R1i.y), intBitsToFloat(R1i.z), intBitsToFloat(R1i.w));
passPixelColor2 = vec4(intBitsToFloat(R2i.x), intBitsToFloat(R2i.y), intBitsToFloat(R2i.z), intBitsToFloat(R2i.w));
}
