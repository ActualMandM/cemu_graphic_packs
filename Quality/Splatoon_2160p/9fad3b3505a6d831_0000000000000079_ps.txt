#version 420
#extension GL_ARB_texture_gather : enable
// shader 9fad3b3505a6d831
// Used for: Horizontal Bloom 2160
// Implementation of http://rastergrid.com/blog/2010/09/efficient-gaussian-blur-with-linear-sampling/

layout(binding = 0) uniform sampler2D textureUnitPS0;
layout(location = 0) in vec4 passParameterSem0;
layout(location = 0) out vec4 passPixelColor0;
uniform vec2 uf_fragCoordScale;

float data = passParameterSem0.z - passParameterSem0.w;
float h = data / 1.38461538 * uf_fragCoordScale.y;

uniform float o_weight[] = float[]( 0.22558594, 0.31420898, 0.06982422, 0.00317383 );
uniform float o_offset[] = float[]( 0.00000000, 1.38461538, 3.23076923, 5.07692308 );

uniform float weight[] = float[]( 0.10807685, 0.19765286, 0.13814447, 0.07221188, 0.02803520, 0.00799803, 0.00165142, 0.00024167, 0.00002435, 0.00000162, 0.00000007 );
uniform float offset[] = float[]( 0.00000000, 1.47272727, 3.43636364, 5.40000000, 7.36363636, 9.32727273, 11.29090909, 13.25454545, 15.21818182, 17.18181818, 19.14545455 );

void main()
{
vec2 R0f = vec2(passParameterSem0.w, passParameterSem0.x);

vec4 R1f = texture( textureUnitPS0, R0f ) * weight[0];
for (int i=1; i<11; i++) {
	R1f += texture( textureUnitPS0, R0f + vec2(offset[i]*h, 0.0) ) * weight[i];
	R1f += texture( textureUnitPS0, R0f - vec2(offset[i]*h, 0.0) ) * weight[i];
	}

vec4 R2f = texture( textureUnitPS0, R0f ) * o_weight[0];
for (int i=1; i<4; i++) {
	R2f += texture( textureUnitPS0, R0f + vec2(o_offset[i]*h, 0.0) ) * o_weight[i];
	R2f += texture( textureUnitPS0, R0f - vec2(o_offset[i]*h, 0.0) ) * o_weight[i];
	}

passPixelColor0 = ( (uf_fragCoordScale.y == 1.0) ? R2f : R1f );
}

//py blurninja.py --expand 7 --reduce 7 41 --linear
// game original py blurninja.py --expand 0 --reduce 0 13 --linear