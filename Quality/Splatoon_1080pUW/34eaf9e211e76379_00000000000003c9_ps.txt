#version 420
#extension GL_ARB_texture_gather : enable
// shader 34eaf9e211e76379 // bloom pre-blur
uniform ivec4 uf_remappedPS[4];
layout(binding = 0) uniform sampler2D textureUnitPS0;// Tex0 addr 0xf45c6000 res 1280x720x1 dim 1 tm: 4 format 0816 compSel: 0 1 2 5 mipView: 0x0 (num 0x1) sliceView: 0x0 (num 0x1) Sampler0 ClampX/Y/Z: 2 2 2 border: 1
layout(binding = 1) uniform sampler2D textureUnitPS1;// Tex1 addr 0x156f2000 res 1280x720x1 dim 1 tm: 4 format 0806 compSel: 0 4 4 5 mipView: 0x0 (num 0x1) sliceView: 0x0 (num 0x1) Sampler1 ClampX/Y/Z: 2 2 2 border: 1
layout(location = 0) in vec4 passParameterSem0;
layout(location = 1) in vec4 passParameterSem1;
layout(location = 2) in vec4 passParameterSem2;
layout(location = 0) out vec4 passPixelColor0;
uniform vec2 uf_fragCoordScale;
int clampFI32(int v)
{
if( v == 0x7FFFFFFF )
	return floatBitsToInt(1.0);
else if( v == 0xFFFFFFFF )
	return floatBitsToInt(0.0);
return floatBitsToInt(clamp(intBitsToFloat(v), 0.0, 1.0));
}
float mul_nonIEEE(float a, float b){ return min(a*b,min(abs(a)*3.40282347E+38F,abs(b)*3.40282347E+38F)); }
void main()
{
vec4 R0f = vec4(0.0);
vec2 R1f = vec2(0.0);
vec4 R2f = vec4(0.0);
vec4 R3f = vec4(0.0);
vec4 R4f = vec4(0.0);
vec4 R123f = vec4(0.0);
vec4 R126f = vec4(0.0);
vec4 R127f = vec4(0.0);
float backupReg0f, backupReg1f, backupReg2f, backupReg3f, backupReg4f;
vec4 PV0f = vec4(0.0), PV1f = vec4(0.0);
float PS0f = 0.0, PS1f = 0.0;
vec4 tempf = vec4(0.0);
float tempResultf;
int tempResulti;
ivec4 ARi = ivec4(0);
bool predResult = true;
vec3 cubeMapSTM;
int cubeMapFaceId;
R0f = passParameterSem0;
R1f = vec2((passParameterSem1.x + passParameterSem2.x)/2, (passParameterSem1.y + passParameterSem1.w)/2); //center point
vec2 res = vec2( passParameterSem2.x - passParameterSem1.x, passParameterSem1.w - passParameterSem1.y ) * uf_fragCoordScale;
int r = int(floor(1.0 / uf_fragCoordScale.y + 0.5));
float count = 0.0;
for( int x=-r; x<=r; x++ ) {
	for( int y=-r; y<=r; y++ ) {
		if( pow(x,2) + pow(y,2) <= pow(r,2) ) {
			R2f += texture( textureUnitPS0, R1f + vec2(x,y)*res );
			count += 1.0;
			}
		}
	}
PV0f.yxwz = R2f/count;

R0f.x = (texture(textureUnitPS1, R0f.xy).x);
// 0
backupReg0f = R0f.x;

R127f.w = (mul_nonIEEE(backupReg0f,intBitsToFloat(uf_remappedPS[0].z)) + intBitsToFloat(uf_remappedPS[0].w));
R127f.w = clamp(R127f.w, 0.0, 1.0);
PS0f = R127f.w;
// 1

R127f.z = mul_nonIEEE(PS0f, intBitsToFloat(uf_remappedPS[1].z));
PS1f = R127f.z;
// 2

// 3
PV1f.x = max(PV0f.w, 0.0);
PV1f.y = max(PV0f.y, 0.0);
PV1f.z = max(PV0f.z, 0.0);
PV1f.w = max(PV0f.x, 0.0);
// 4
R127f.x = min(PV1f.y, intBitsToFloat(0x461c4000));
PV0f.x = R127f.x;
R127f.y = min(PV1f.w, intBitsToFloat(0x461c4000));
PV0f.y = R127f.y;
R126f.z = min(PV1f.x, intBitsToFloat(0x461c4000));
PV0f.z = R126f.z;
R126f.w = min(PV1f.z, intBitsToFloat(0x461c4000));
PV0f.w = R126f.w;
// 5
tempf.x = dot(vec4(PV0f.x,PV0f.y,PV0f.z,PV0f.w),vec4(intBitsToFloat(uf_remappedPS[2].x),intBitsToFloat(uf_remappedPS[2].y),intBitsToFloat(uf_remappedPS[2].z),intBitsToFloat(uf_remappedPS[2].w)));
tempf.x = clamp(tempf.x, 0.0, 1.0);
PV1f.x = tempf.x;
PV1f.y = tempf.x;
PV1f.z = tempf.x;
PV1f.w = tempf.x;
// 6
R123f.y = (mul_nonIEEE(R127f.w,R127f.z) + PV1f.x);
PV0f.y = R123f.y;
// 7
PV1f.x = mul_nonIEEE(PV0f.y, intBitsToFloat(uf_remappedPS[3].z));
// 8
R2f.x = mul_nonIEEE(R127f.x, PV1f.x);
R2f.y = mul_nonIEEE(R127f.y, PV1f.x);
R2f.z = mul_nonIEEE(R126f.z, PV1f.x);
R2f.w = mul_nonIEEE(R126f.w, PV1f.x);
// export
passPixelColor0 = vec4(R2f.x, R2f.y, R2f.z, R2f.w);
}
