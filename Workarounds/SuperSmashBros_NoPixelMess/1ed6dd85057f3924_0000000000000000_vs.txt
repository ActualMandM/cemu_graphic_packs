#version 420
#extension GL_ARB_texture_gather : enable
#extension GL_ARB_separate_shader_objects : enable
#extension GL_ARB_shading_language_packing : enable
// shader 1ed6dd85057f3924
uniform ivec4 uf_remappedVS[12];
uniform vec2 uf_windowSpaceToClipSpaceTransform;
layout(location = 0) in uvec4 attrDataSem0;
layout(location = 1) in uvec4 attrDataSem2;
layout(location = 2) in uvec4 attrDataSem8;
out gl_PerVertex
{
	vec4 gl_Position;
	float gl_PointSize;
};
layout(location = 1) out vec4 passParameterSem131;
layout(location = 0) out vec4 passParameterSem130;
int clampFI32(int v)
{
if( v == 0x7FFFFFFF )
	return floatBitsToInt(1.0);
else if( v == 0xFFFFFFFF )
	return floatBitsToInt(0.0);
return floatBitsToInt(clamp(intBitsToFloat(v), 0.0, 1.0));
}
float mul_nonIEEE(float a, float b){ if( a == 0.0 || b == 0.0 ) return 0.0; return a*b; }
void main()
{
vec4 R0f = vec4(0.0);
vec4 R1f = vec4(0.0);
vec4 R2f = vec4(0.0);
vec4 R3f = vec4(0.0);
vec4 R122f = vec4(0.0);
vec4 R123f = vec4(0.0);
vec4 R125f = vec4(0.0);
vec4 R126f = vec4(0.0);
vec4 R127f = vec4(0.0);
uvec4 attrDecoder;
float backupReg0f, backupReg1f, backupReg2f, backupReg3f, backupReg4f;
vec4 PV0f = vec4(0.0), PV1f = vec4(0.0);
float PS0f = 0.0, PS1f = 0.0;
vec4 tempf = vec4(0.0);
float tempResultf;
int tempResulti;
ivec4 ARi = ivec4(0);
bool predResult = true;
vec3 cubeMapSTM;
int cubeMapFaceId;
R0f = floatBitsToInt(ivec4(gl_VertexID, 0, 0, gl_InstanceID));
attrDecoder = attrDataSem0;
attrDecoder = (attrDecoder>>24)|((attrDecoder>>8)&0xFF00)|((attrDecoder<<8)&0xFF0000)|((attrDecoder<<24));
R2f = vec4(intBitsToFloat(int(attrDecoder.x)), intBitsToFloat(int(attrDecoder.y)), intBitsToFloat(int(attrDecoder.z)), intBitsToFloat(int(attrDecoder.w)));
attrDecoder.xyzw = floatBitsToUint(vec4(attrDataSem8.xyzw)/255.0);
R1f = vec4(intBitsToFloat(int(attrDecoder.x)), intBitsToFloat(int(attrDecoder.y)), intBitsToFloat(int(attrDecoder.z)), intBitsToFloat(int(attrDecoder.w)));
attrDecoder.xy = attrDataSem2.xy;
attrDecoder.xy = ((attrDecoder.xy>>8)&0xFF)|((attrDecoder.xy<<8)&0xFF00);
attrDecoder.z = 0;
attrDecoder.w = 0;
attrDecoder.xy = floatBitsToUint(unpackHalf2x16(attrDecoder.x|(attrDecoder.y<<16)));
attrDecoder.zw = uvec2(0);
R3f = vec4(intBitsToFloat(int(attrDecoder.x)), intBitsToFloat(int(attrDecoder.y)), intBitsToFloat(floatBitsToInt(0.0)), intBitsToFloat(floatBitsToInt(1.0)));
// 0
backupReg0f = R1f.x;
backupReg1f = R1f.y;
backupReg2f = R1f.w;
R1f.x = backupReg0f;
R1f.y = R1f.z;
PV0f.z = intBitsToFloat(uf_remappedVS[0].z) + -(intBitsToFloat(uf_remappedVS[1].y));
R1f.w = backupReg1f;
R0f.y = backupReg2f;
PS0f = R0f.y;
// 1
backupReg0f = R3f.x;
backupReg1f = R3f.y;
R3f.x = backupReg0f;
R3f.y = backupReg1f;
R127f.z = mul_nonIEEE(intBitsToFloat(uf_remappedVS[1].x), PV0f.z);
R125f.w = mul_nonIEEE(intBitsToFloat(uf_remappedVS[2].z), intBitsToFloat(uf_remappedVS[1].x));
// 2
R127f.xyw = vec3(intBitsToFloat(uf_remappedVS[0].x),intBitsToFloat(uf_remappedVS[0].y),intBitsToFloat(uf_remappedVS[0].w));
PV0f.y = R127f.y;
PV0f.w = R127f.w;
// 3
R126f.x = intBitsToFloat(uf_remappedVS[2].x);
R126f.y = intBitsToFloat(uf_remappedVS[2].y);
PV1f.y = R126f.y;
PV1f.z = mul_nonIEEE(R2f.w, PV0f.w);
R126f.w = intBitsToFloat(uf_remappedVS[2].w);
PV1f.w = R126f.w;
PS1f = mul_nonIEEE(R2f.w, PV0f.y);
// 4
backupReg0f = R127f.x;
R127f.x = (mul_nonIEEE(R2f.z,PV1f.w) + PV1f.z);
PV0f.y = intBitsToFloat(uf_remappedVS[1].y) + R127f.z;
R127f.z = mul_nonIEEE(intBitsToFloat(uf_remappedVS[3].z), intBitsToFloat(uf_remappedVS[1].x));
R127f.w = (mul_nonIEEE(R2f.z,PV1f.y) + PS1f);
PS0f = mul_nonIEEE(R2f.w, backupReg0f);
// 5
PV1f.x = intBitsToFloat(uf_remappedVS[3].x);
PV1f.y = intBitsToFloat(uf_remappedVS[3].y);
PV1f.z = mul_nonIEEE(R2f.w, PV0f.y);
PV1f.w = intBitsToFloat(uf_remappedVS[3].w);
R122f.x = (mul_nonIEEE(R2f.z,R126f.x) + PS0f);
PS1f = R122f.x;
// 6
backupReg0f = R127f.x;
backupReg1f = R127f.w;
R127f.x = mul_nonIEEE(intBitsToFloat(uf_remappedVS[4].z), intBitsToFloat(uf_remappedVS[1].x));
R126f.y = (mul_nonIEEE(R2f.y,PV1f.w) + backupReg0f);
R123f.z = (mul_nonIEEE(R2f.z,R125f.w) + PV1f.z);
PV0f.z = R123f.z;
R127f.w = (mul_nonIEEE(R2f.y,PV1f.y) + backupReg1f);
R126f.x = (mul_nonIEEE(R2f.y,PV1f.x) + PS1f);
PS0f = R126f.x;
// 7
PV1f.x = intBitsToFloat(uf_remappedVS[4].x);
PV1f.y = intBitsToFloat(uf_remappedVS[4].y);
R123f.z = (mul_nonIEEE(R2f.y,R127f.z) + PV0f.z);
PV1f.z = R123f.z;
PV1f.w = intBitsToFloat(uf_remappedVS[4].w);
// 8
backupReg0f = R2f.x;
R2f.x = (mul_nonIEEE(backupReg0f,PV1f.x) + R126f.x);
R2f.y = (mul_nonIEEE(backupReg0f,PV1f.w) + R126f.y);
R2f.z = (mul_nonIEEE(backupReg0f,R127f.x) + PV1f.z);
R2f.w = (mul_nonIEEE(backupReg0f,PV1f.y) + R127f.w);
// export
passParameterSem131 = vec4(R3f.x, R3f.y, R3f.z, R3f.z);
// 0
PV0f.x = mul_nonIEEE(R2f.y, intBitsToFloat(uf_remappedVS[5].x));
PV0f.y = mul_nonIEEE(R2f.y, intBitsToFloat(uf_remappedVS[5].w));
PV0f.z = mul_nonIEEE(R2f.y, intBitsToFloat(uf_remappedVS[5].z));
PV0f.w = mul_nonIEEE(R2f.y, intBitsToFloat(uf_remappedVS[5].y));
// 1
R123f.x = (mul_nonIEEE(R2f.z,intBitsToFloat(uf_remappedVS[6].x)) + PV0f.x);
PV1f.x = R123f.x;
R123f.y = (mul_nonIEEE(R2f.z,intBitsToFloat(uf_remappedVS[6].w)) + PV0f.y);
PV1f.y = R123f.y;
R123f.z = (mul_nonIEEE(R2f.z,intBitsToFloat(uf_remappedVS[6].z)) + PV0f.z);
PV1f.z = R123f.z;
R123f.w = (mul_nonIEEE(R2f.z,intBitsToFloat(uf_remappedVS[6].y)) + PV0f.w);
PV1f.w = R123f.w;
// 2
R123f.x = (mul_nonIEEE(R2f.w,intBitsToFloat(uf_remappedVS[7].x)) + PV1f.x);
PV0f.x = R123f.x;
R123f.y = (mul_nonIEEE(R2f.w,intBitsToFloat(uf_remappedVS[7].w)) + PV1f.y);
PV0f.y = R123f.y;
R123f.z = (mul_nonIEEE(R2f.w,intBitsToFloat(uf_remappedVS[7].z)) + PV1f.z);
PV0f.z = R123f.z;
R123f.w = (mul_nonIEEE(R2f.w,intBitsToFloat(uf_remappedVS[7].y)) + PV1f.w);
PV0f.w = R123f.w;
// 3
backupReg0f = R2f.x;
R2f.x = (mul_nonIEEE(backupReg0f,intBitsToFloat(uf_remappedVS[8].x)) + PV0f.x);
R2f.y = (mul_nonIEEE(backupReg0f,intBitsToFloat(uf_remappedVS[8].y)) + PV0f.w);
R2f.z = (mul_nonIEEE(backupReg0f,intBitsToFloat(uf_remappedVS[8].z)) + PV0f.z);
R2f.w = (mul_nonIEEE(backupReg0f,intBitsToFloat(uf_remappedVS[8].w)) + PV0f.y);
// export

// this removes the "pixel mess" but causes several effects to go missing
// gl_Position = vec4(R2f.x, R2f.y, R2f.z, R2f.w);

// 0
PV0f.x = mul_nonIEEE(intBitsToFloat(uf_remappedVS[9].x), intBitsToFloat(uf_remappedVS[10].x));
PV0f.x *= 2.0;
PV0f.w = mul_nonIEEE(intBitsToFloat(uf_remappedVS[9].y), intBitsToFloat(uf_remappedVS[10].y));
PV0f.w *= 2.0;
// 1
backupReg0f = R1f.x;
backupReg1f = R1f.w;
R1f.x = mul_nonIEEE(PV0f.x, backupReg0f);
PV1f.y = mul_nonIEEE(intBitsToFloat(uf_remappedVS[9].w), intBitsToFloat(uf_remappedVS[10].w));
PV1f.y *= 2.0;
PV1f.z = mul_nonIEEE(intBitsToFloat(uf_remappedVS[9].z), intBitsToFloat(uf_remappedVS[10].z));
PV1f.z *= 2.0;
R1f.w = mul_nonIEEE(PV0f.w, backupReg1f);
// 2
R2f.z = mul_nonIEEE(PV1f.z, R1f.y);
R0f.w = mul_nonIEEE(PV1f.y, R0f.y);
// 0
R0f.x = mul_nonIEEE(R1f.x, intBitsToFloat(uf_remappedVS[11].x));
R0f.y = mul_nonIEEE(R1f.w, intBitsToFloat(uf_remappedVS[11].x));
R0f.z = mul_nonIEEE(R2f.z, intBitsToFloat(uf_remappedVS[11].x));
// export
passParameterSem130 = vec4(R0f.x, R0f.y, R0f.z, R0f.w);
// 0
}
